package model.tf.ap;

import model.Individual;
import org.apache.commons.math3.stat.descriptive.moment.Mean;
import org.apache.commons.math3.stat.descriptive.rank.Median;
import util.RandomUtil;

/**
 *
 * EUR USD
 * 
 * @author adam
 */
public class APgeMath extends APtf {

    double[][] points = new double[][]{{1,24.4039},{2,23.9559},{3,23.4398},{4,23.4496},{5,23.732},{6,23.4009},{7,23.3522},{8,23.2353},{9,23.1574},{10,22.9626},{11,22.9724},{12,23.2256},{13,23.4106},{14,23.6443},{15,23.8391},{16,23.9462},{17,23.7417},{18,23.2158},{19,23.4496},{20,23.2645},{21,23.5761},{22,23.8293},{23,23.5275},{24,23.8586},{25,23.878},{26,23.9949},{27,24.0728},{28,24.1215},{29,24.2383},{30,24.4915},{31,24.511},{32,24.5889},{33,24.5791},{34,24.7756},{35,24.7363},{36,24.9525},{37,25.4636},{38,25.4439},{39,25.5422},{40,25.6601},{41,25.4144},{42,25.2179},{43,25.3751},{44,24.982},{45,25.1982},{46,24.7363},{47,24.756},{48,24.9624},{49,24.6086},{50,25.0115},{51,24.8739},{52,25.1982},{53,24.8936},{54,24.9624},{55,25.0312},{56,24.8346},{57,24.4808},{58,24.3727},{59,24.4317},{60,24.6872},{61,24.3825},{62,24.412},{63,24.5103},{64,24.7462},{65,24.5889},{66,24.5791},{67,25.2867},{68,28.0188},{69,27.154},{70,27.2522},{71,26.9869},{72,26.81},{73,26.7805},{74,26.5545},{75,26.1614},{76,26.4464},{77,26.3874},{78,26.3383},{79,26.4169},{80,26.6527},{81,26.6233},{82,26.6134},{83,26.8395},{84,26.8002},{85,26.4562},{86,26.3481},{87,26.5741},{88,26.8886},{89,26.4562},{90,26.5643},{91,26.7412},{92,26.9377},{93,26.8002},{94,26.8395},{95,26.8788},{96,27.1638},{97,27.2424},{98,27.2031},{99,27.0458},{100,27.0458},{101,27.154},{102,26.8002},{103,26.81},{104,26.8591},{105,27.0557},{106,26.7903},{107,26.8198},{108,26.7707},{109,26.8591},{110,27.154},{111,27.036},{112,26.9181},{113,26.7412},{114,26.751},{115,26.8002},{116,27.1272},{117,26.9984},{118,27.1768},{119,27.3056},{120,27.0182},{121,26.8002},{122,26.8497},{123,26.4037},{124,26.3343},{125,26.4235},{126,26.5425},{127,26.0766},{128,26.2352},{129,25.6604},{130,25.7892},{131,26.037},{132,26.2352},{133,26.4235},{134,26.5326},{135,26.8002},{136,26.9984},{137,26.8993},{138,26.6118},{139,26.3938},{140,26.0271},{141,25.5216},{142,25.7198},{143,25.8685},{144,26.0271},{145,25.8883},{146,25.8685},{147,25.6405},{148,25.6703},{149,25.8685},{150,25.7991},{151,25.5612},{152,26.0073},{153,25.482},{154,25.6306},{155,25.5612},{156,25.8487},{157,25.9775},{158,25.8388},{159,25.5018},{160,24.9666},{161,24.3719},{162,23.6583},{163,23.0636},{164,23.797},{165,24.7882},{166,24.9368},{167,24.5998},{168,23.6682},{169,24.3521},{170,24.2926},{171,23.7871},{172,24.7386},{173,24.3322},{174,24.4611},{175,24.7287},{176,24.5503},{177,25.0756},{178,25.7},{179,25.35},{180,24.8},{181,25.09},{182,25.11},{183,25.14},{184,24.91},{185,24.92},{186,24.31},{187,24.57},{188,25.22},{189,25.19},{190,25.47},{191,26.82},{192,27.29},{193,27.77},{194,28.03},{195,28.07},{196,28.09},{197,27.87},{198,27.6},{199,28.03},{200,28.98},{201,28.99},{202,28.78},{203,28.85},{204,29.58},{205,29.51},{206,29.55},{207,29.46},{208,29.39},{209,29.34},{210,28.92},{211,29.4},{212,29.59},{213,29.54},{214,29.64},{215,29.92},{216,29.75},{217,30.12},{218,30.67},{219,30.16},{220,30.28},{221,30.36},{222,30.32},{223,30.52},{224,30.27},{225,30.66},{226,30.59},{227,30.66},{228,30.36},{229,30.36},{230,29.94},{231,30.17},{232,29.97},{233,30.03},{234,30.49},{235,30.37},{236,30.19},{237,30.47},{238,30.65},{239,30.26}};
    
    @Override
    public double fitness(Individual individual) {
        return this.fitness(individual.vector);
    }

    @Override
    public double fitness(double[] vector) {

        Integer[] discrete = this.discretizeVector(vector);

        double fitness = 0;

        fitness = this.squaredDistance(discrete);

        return fitness;

    }

    public Integer[] discretizeVector(double[] vector) {
        int dim = vector.length;
        Integer[] discrete = new Integer[dim];

        for (int i = 0; i < dim; i++) {

            
            discrete[i] = Float.valueOf(Math.round(vector[i])).intValue();
            
        }

        return discrete;
    }

    private double squaredDistance(Integer[] vector) {

        double sum = 0, a, b;
        double[] distance_array = new double[points.length];
        
        for (int i = 0; i < points.length; i++) {
            a = ap.dsh(vector, points[i][0]);
            if(Double.isNaN(a) || Double.isInfinite(a)){
                return Double.MAX_VALUE;
            }
            b = points[i][1];
//            if(a-b > 0){
//                sum++;
//            }
//            else if (a-b < 0){
//                sum--;
//            }

            distance_array[i] = Math.abs(a-b);
        }
        
        return (new Median().evaluate(distance_array)) + (new Mean().evaluate(distance_array));

    }

    @Override
    public String name() {
        return "AP_ge_mathematica";
    }

    public static void main(String[] args) throws Exception {
    
        double[] vector = new double[]{2.78997802734375, 5.1953125, 7.0, 2.748046875, 0.15625, 0.0, 2.890625, 5.3125, 1.96484375, 0.3802490234375, 3.111328125, 5.921875, 0.75, 6.90234375, 3.59375, 0.0, 6.28515625, 3.748046875, 6.226318359375, 3.03125};
        APtf tf = new APgeMath();
        
        System.out.println(tf.fitness(vector));
        
    }
    
}
