
package model.tf.nwf;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.Individual;
import model.tf.Cec2015;
import model.tf.TestFunction;
import util.Dijsktra;
import util.Dijsktra.Vertex;
import util.IndividualUtil;
import util.random.Random;
import util.random.UniformRandom;

/**
 *
 * This class represents the basic solution of incinerator facility locations
 * Locations and capacities based on the projected incinerators.
 * 
 * @author wiki on 31/01/2017
 */
public class Spalovny_projekt_nonlinear implements TestFunction {

    double[][] adjM;
    double[] garbage_production;
    double production_sum;
    int facility_count;
    int[] number_of_cities;
    double[] capacity_options;
    //40 cities
    //cities with incenerators - Praha [0], Brno [20], Liberec [65], Plzen [129]
    //cities of possible incenerators - Melnik [149], Kolin [145], Hodonin [24], Olomouc [99], 
//    Prerov [101], Ceske Budejovice [2], Pardubice [114], Litvinov [167], 
    //Jihlava[182], Usti nad Labem[175], Trutnov[59], Ostrov[44], Chropyne[195], 
//    Valasske Mezirici[202], Nachod[54], Strakonice[11], Zlin[205], Prostejov[100], 
//    Frantiskovy Lazne[40], Zdar nad Sazavou[192]
    //Cheb[40], Trebic[190], Varnsdorf[176], Bruntal[73], Vsetin[204], Otrokovice[197], 
//    Klatovy[125], Pribram[155], Detmarovice[81], Uherske Hradiste[199], Znojmo[37], 
//    Ostrava[89], Havirov[78], Karvina[81], 
    //Frydek-Mistek[76], Opava[87]
    double[][] possible_capacities;
    double[][] possible_prices;
    int[] incinerator_indexes;
    double unused_penalty = 500;
    double overused_penalty = 100_000;
    double path_penalty = 5;
    
    public Spalovny_projekt_nonlinear() {
        
        this.adjM = new double[206][206];
        this.garbage_production = new double[]{421456.20,4618.37,40328.62,10267.64,6054.39,12617.38,5237.12,4892.46,11682.76,8108.45,7039.16,12327.33,26770.87,5010.74,8555.13,4609.10,5111.39,3988.39,14070.61,14343.59,119805.75,19561.32,4147.45,18887.91,10201.53,8107.61,6250.03,16045.27,4836.13,6307.23,4056.93,6973.76,5520.20,19984.11,8029.20,9128.13,14495.34,24822.35,10501.02,8511.10,16835.81,25171.38,3399.31,9079.82,7454.33,21032.18,4472.56,7215.61,6201.28,6119.69,51330.69,4445.92,15210.71,6734.93,15135.70,2793.67,3637.41,4976.93,9159.88,21280.52,9544.94,24765.51,8079.11,14040.02,5842.87,50333.33,9278.74,5987.36,6045.85,8719.04,3054.00,6051.64,11312.84,9453.26,8867.39,5051.98,32099.15,9986.36,27737.28,11916.22,5641.20,21873.89,16721.48,5193.34,12028.95,12322.73,5130.85,34858.49,12588.02,82707.62,1259.73,14886.78,7083.38,10695.23,9435.95,2755.95,5084.76,7126.47,6041.74,50918.85,29322.16,26006.27,8264.66,23361.72,7493.42,10543.17,5522.79,5866.35,4096.67,23156.53,2795.28,5124.32,6425.70,7346.90,35345.02,4735.35,8529.37,7744.97,8204.27,8258.16,8342.36,3092.94,9674.67,4317.68,4435.00,15640.78,8605.63,2680.56,13789.02,60292.82,6006.31,17997.80,6725.98,5591.85,7701.58,11773.66,21185.92,17639.47,41796.62,7931.37,44712.79,10010.61,7328.53,11285.26,34601.82,34060.59,12471.84,20311.27,8569.94,17996.19,36791.19,4792.82,14507.71,16659.05,12347.36,23618.15,18237.74,24668.06,7006.08,12956.23,10422.35,4519.41,5779.48,22885.43,22103.19,14204.32,23938.29,13171.29,13841.54,9880.92,21436.48,6069.16,7595.05,10984.90,35240.52,29269.43,7066.70,9149.82,4840.89,17531.07,5802.00,5711.93,25640.05,5779.25,2753.40,4690.38,3137.53,13686.97,5994.54,3524.22,19105.03,10862.11,12096.55,4842.76,7432.78,18157.25,5126.45,10345.50,10415.80,24179.22,15164.39,5119.98,12566.70,4706.77,14186.38,27447.64};
        this.production_sum = 3011744.95;
        this.facility_count = 40;
        this.number_of_cities = new int[]{206, 206};
//        this.capacity_options = new double[]{250_000, 500_000, 750_000, 1_000_000, 1_500_000, 2_000_000, 2_500_000, 3_000_000, 3_500_000};
        this.incinerator_indexes = new int[]{0,20,65,129,149,145,24,99,101,2,114,167,182,175,59,44,195,202,54,11,205,100,40,192,40,190,176,73,204,197,125,155,81,199,37,89,78,81,76,87};
        this.possible_capacities = new double[][]{{0,8543.8},{120194.25,240194.25},{45666.67},{34707.18},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.},{0,10000.,20000.,30000.,80000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.},{0,10000.,20000.,30000.,80000.},{0,10000.,20000.,30000.,80000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10000.,20000.,30000.,80000.,90000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.},{0,10000.,20000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.}};
        this.possible_prices = new double[][]{{1400,1800},{1400,1800},{1400},{1400},{0,4431.9,2720.45,1979.22,1583.37,3170.63,3069.73,2980.47,2904.15,2825.24,2764.44,2708.81,2650.6,2605.32,2562.63,2517.36,2481.14,2447.5,2409.99,2381.53,2353.07,2322.02,2297.45,2274.16,2252.17,2227.59,2206.89,2187.49},{0,4757.89,3046.44,2307.79,1919.71,3495.33,3407.36,3332.33,3266.36,3201.68,3152.52,3109.83,3064.55,3029.63,2995.99,2959.77,2933.9,2908.03,2880.86,2861.46,2842.05,2818.77,2800.66,2783.84,2765.73,2751.5,2739.86,2729.51},{0,4431.9,2728.22,2001.21,1682.98,3337.51,3265.06,3200.38,3147.34,3093.01,3056.79,3021.87,2983.06,2954.6,2937.78,2915.79,2901.56,2893.8,2878.27,2869.22,2860.16,2845.93,2836.88,2827.82,2818.77,2805.83,2796.78,2787.72},{0,4757.89,3046.44,2306.5,1909.36,3455.22,3355.62,3268.94,3192.62,3115.,3055.5,3003.75,2952.01,2915.79,2882.16,2843.35,2813.59,2786.43,2754.09,2729.51,2704.93,2680.35,2660.95,2642.84,2624.73,2604.03,2589.8,2575.57},{0,4403.44,2692.,1952.05,1554.92,3147.34,3045.15,2957.18,2879.57,2800.66,2741.15,2688.11,2632.49,2588.51,2549.7,2507.01,2472.08,2442.33,2408.7,2382.82,2356.95,2328.49,2312.97,2298.74,2285.8,2271.57,2263.81,2256.05},{0,4394.38,2688.11,1958.52,1592.43,3192.62,3099.48,3023.16,2957.18,2887.33,2833.,2785.14,2733.39,2697.17,2670.,2638.96,2616.97,2594.97,2569.1,2549.7,2530.29,2507.01,2490.19,2475.96,2463.03,2446.21,2434.57,2422.93},{0,4431.9,2720.45,1979.22,1583.37,3170.63,3069.73,2980.47,2904.15,2825.24,2764.44,2710.11,2653.19,2609.2,2567.81,2522.53,2487.61,2453.97,2417.75,2388.,2360.83,2329.79,2305.21,2284.51,2265.11,2244.41,2231.47,2218.54},{0,4431.9,2720.45,1979.22,1583.37,3173.22,3073.61,2986.94,2911.91,2835.59,2776.08,2723.04,2671.3,2637.66,2607.91,2574.28,2548.41,2522.53,2494.07,2470.79,2450.09,2425.51,2408.7,2393.17,2377.65,2358.24,2346.6,2334.96},{0,6627.15,3386.66,2319.44,1839.51,3292.23,3204.26,3169.34,3143.46,3122.77,3109.83,3096.89,3074.9,3060.67,3046.44,3025.75,3011.52,2997.29,2977.88,2963.65,2950.72},{0,4422.84,2711.4,1970.16,1573.03,3162.87,3060.67,2972.71,2895.09,2818.77,2759.26,2706.23,2649.31,2605.32,2563.93,2519.95,2485.02,2452.68,2416.46,2386.7,2366.01,2344.02,2327.2,2311.68,2296.15,2275.45,2263.81,2250.88},{0,4431.9,2720.45,1979.22,1592.43,3213.32,3134.41,3065.85,3010.22,2949.42,2909.32,2873.1,2830.41,2799.36,2769.61,2735.98,2710.11,2685.53,2657.07,2635.08,2614.38,2592.39,2579.45,2566.52,2553.58,2538.06,2526.41,2514.77},{0,4509.51,3049.03,2450.09,2173.26,3697.13,3640.21,3588.46,3540.6,3487.56,3447.46,3408.65},{0,4512.1,3052.91,2453.97,2178.43,3702.3,3644.09,3592.35,3544.48,3490.15,3450.05,3411.24},{0,4129.19,2751.5,2190.08,1971.46,3603.99,3557.42,3513.44,3472.04,3424.18},{0,4380.15,2818.77,2249.58,1958.52,3522.49,3459.1,3415.12,3382.78,3342.68,3312.93,3285.76,3250.83,3226.25,3201.68,3171.92,3149.93,3129.23},{0,4478.47,2774.79,2051.66,1737.31,3390.54,3311.63,3244.37,3183.57,3120.18,3080.08,3045.15,3005.05,2975.3,2949.42,2919.67,2900.27,2882.16,2857.58,2845.93,2835.59,2822.65,2813.59,2805.83,2796.78,2785.14,2776.08,2768.32},{0,4365.92,2659.66,1935.24,1591.14,3283.17,3210.73,3146.05,3089.13,3028.33,2983.06,2944.25,2906.73,2880.86,2854.99,2825.24,2805.83,2787.72,2767.02,2752.79,2738.57,2721.75,2713.99,2707.52,2702.34,2693.29,2688.11,2682.94},{0,4534.09,3080.08,2474.67,2208.19,3728.17,3668.67,3613.04,3563.89,3508.26,3465.57},{0,4637.58,3190.03,2651.89,3849.77},{0,4333.58,2698.46,2108.58,1842.1,3429.35,3362.08,3306.46,3263.77,3217.2,3193.91,3174.51,3147.34,3129.23,3109.83,3085.25,3068.43,3051.62,3029.63,3012.81,2997.29,2977.88,2963.65,2949.42},{0,3773.45,2439.74,2038.72,3597.52},{0,4504.34,3077.49,2570.4,3813.55},{0,4253.38,2742.45,2240.53,2042.6,3668.67,3614.34,3565.18,3519.9,3468.16},{0,4244.32,2829.12,2329.79,3730.76,3669.96},{0,3514.73,1988.27,1490.23,1267.73,3038.68,2997.29,2966.24,2957.18,2948.13,2949.42,2946.84,2935.19,2930.02,2923.55,2909.32,2901.56,2892.5,2878.27,2869.22},{0,4431.9,2725.63,2033.55,1699.8,3510.85,3474.63,3439.7,3404.77,3363.38,3332.33,3302.58,3267.65,3240.48,3215.91,3186.15,3162.87,3140.88},{0,3990.78,2545.82,2077.53,1895.13,3597.52,3552.24,3509.55,3468.16,3420.3},{0,4478.47,3076.2,2464.32,1734.73,3389.25,3311.63,3246.95,3197.8,3144.76,3105.95,3069.73,3032.21,3008.93,2986.94,2962.36,2950.72,2939.07,2922.26,2911.91,2900.27,2884.74,2874.39,2862.75,2852.4,2838.17,2827.82,2817.48},{0,4431.9,2737.27,2027.08,1717.91,3372.43,3297.4,3231.43,3182.27,3130.53,3090.43,3056.79,3019.28,2990.82,2967.53,2944.25,2930.02,2917.08,2897.68,2887.33,2878.27,2862.75,2852.4,2843.35,2833.,2820.06,2809.71,2800.66},{0,3939.03,2443.62,1943.,1734.73,3434.53,3407.36,3377.61,3349.15,3311.63,3284.47,3258.6,3226.25},{0,3950.67,2693.29},{0,4281.84,2571.69,1830.45,1433.32,3041.27,2940.37,2851.11,2774.79,2695.88,2635.08,2580.75,2523.83,2479.84,2438.45,2394.47,2359.54,2327.2,2290.98,2262.52,2234.06,2204.31,2179.73,2157.74,2140.92,2122.81,2109.87,2098.23},{0,4356.87,2645.43,1918.42,1534.22,3227.55,3155.11,3094.31,3041.27,2983.06,2939.07,2898.97,2854.99,2821.36,2792.9,2764.44,2745.03,2725.63,2701.05,2685.53,2671.3,2651.89,2640.25,2629.9,2619.55,2605.32,2596.27,2592.39},{0,4356.87,2646.72,1922.3,1547.15,3250.83,3180.98,3118.89,3063.26,3003.75,2958.48,2918.38,2874.39,2845.93,2822.65,2794.19,2772.2,2752.79,2732.1,2715.28,2702.34,2685.53,2673.88,2660.95,2654.48,2644.13,2641.54,2637.66},{0,4422.84,2725.63,2030.96,1734.73,3381.49,3302.58,3234.02,3177.1,3125.35,3086.55,3050.32,3014.1,2986.94,2964.95,2936.49,2919.67,2908.03,2892.5,2883.45,2873.1,2858.87,2848.52,2839.47,2829.12,2816.18,2805.83,2796.78},{0,3482.39,1990.86,1513.52,1281.96,3050.32,3021.87,3006.34,3010.22,3001.17,2998.58,2992.11,2977.88,2970.12,2961.07,2944.25,2933.9,2923.55,2908.03}};
        this.garbage_production[20] = 0;
        this.garbage_production[65] = 0;   
        this.garbage_production[129] = 0;   
        
        //Added to increase the cost of small incinerators
        for(int i = 4; i < this.possible_capacities.length; i++) {
            for(int j = 0; j < this.possible_capacities[i].length; j++) {
                if(this.possible_capacities[i][j] <= 40000) {
                    this.possible_prices[i][j] = this.possible_prices[i][j] * 1.5;
                }
            }
        }
        
        String location = "/adjM_spalovnyCR.csv";
        URL resource = Cec2015.class.getResource(location);
        File fpt = null;
        try {
            fpt = Paths.get(resource.toURI()).toFile();
        } catch (URISyntaxException ex) {
            Logger.getLogger(SpalovnyCR_2.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        BufferedReader br = null;
	String line = "";
	String cvsSplitBy = ",";
        int rowIt = 0;

	try {

		br = new BufferedReader(new FileReader(fpt));
		while ((line = br.readLine()) != null) {

		        // use comma as separator
			String[] row = line.split(cvsSplitBy);
                        
                        for(int columnIt = 0; columnIt < row.length; columnIt++) {
                            this.adjM[rowIt][columnIt] = Double.parseDouble(row[columnIt]);
                        }
                        rowIt++;

		}

	} catch (FileNotFoundException e) {
            Logger.getLogger(Spalovny_projekt_nonlinear.class.getName()).log(Level.SEVERE, null, e);
	} catch (IOException e) {
            Logger.getLogger(Spalovny_projekt_nonlinear.class.getName()).log(Level.SEVERE, null, e);
	} finally {
		if (br != null) {
			try {
				br.close();
			} catch (IOException e) {
                            Logger.getLogger(SpalovnyCR_2.class.getName()).log(Level.SEVERE, null, e);
			}
		}
	}
        
    }

    @Override
    public String name() {
        return "Spalovny_projekt_nonlinear";
    }
    
    public Map<String, List> getOutput(double[] vector) {
        
        Map<String, List> map = new HashMap<>();
        List<Integer> facility_list = new ArrayList<>();
        
        double fitness = 0;
        
        //Locations of facilities
        int[] locations = this.incinerator_indexes.clone();
//        int sum = 0;
        List<List<Integer>> facility_nodes = new ArrayList<>();
        for(int i = 0; i < facility_count; i++) {
            facility_nodes.add(new ArrayList<>());
//            locations[i] = (((int) (vector[i] * number_of_cities[i])) % number_of_cities[i]) + sum;
            facility_list.add(locations[i]);
        }
        
        map.put("facilities", facility_list);
        
        List<Double> facility_capacities = new ArrayList<>();
        
        //Capacities of facilities
        double capacities[] = new double[facility_count];
        double costs[] = new double[facility_count];
        double capacity_sum = 0;
        for(int i = 0; i < facility_count; i++){
            capacities[i] = possible_capacities[i][((int) (vector[i] * possible_capacities[i].length)) % possible_capacities[i].length];
            if(i == 0) {
                switch(((int) (vector[i] * possible_capacities[i].length)) % possible_capacities[i].length) {
                    case 0:
                        this.garbage_production[0] = 111456.2;
                        break;
                    default:
                        this.garbage_production[0] = 0;
                }
            }
            facility_capacities.add(capacities[i]);
            costs[i] = possible_prices[i][((int) (vector[i] * possible_prices[i].length)) % possible_prices[i].length];
            capacity_sum += capacities[i];
        }
        
        map.put("capacities", facility_capacities);
        
        double prod = 0;
        for(int i = 0; i < this.garbage_production.length; i++) {
            prod += this.garbage_production[i];
        }
        this.production_sum = prod;
        
        //Capacity is not enough
        if(capacity_sum < production_sum){
            return null;
        }
        
        //Where to go from nodes
        int facility_index;
        for(int i = facility_count; i < vector.length; i++) {
            if(this.garbage_production[i - facility_count] == 0){
                switch(i-facility_count) {
                    case 0:
                        facility_index = 0;
                        break;
                    case 20:
                        facility_index = 1;
                        break;
                    case 65:
                        facility_index = 2;
                        break;
                    case 129:
                        facility_index = 3;
                        break;
                    default:
                        facility_index = ((int) (vector[i] * facility_count)) % facility_count;
                }
            }
            else{
                facility_index = ((int) (vector[i] * facility_count)) % facility_count;
            }
            facility_nodes.get(facility_index).add(i - facility_count);
        }
        
        for(int i = 0; i < facility_nodes.size(); i++) {
            map.put("facility[[" + (i+1) + "]]", facility_nodes.get(i));
        }
        
        facility_capacities = new ArrayList<>();
        //Chceck capacity of single facilities and if not over, add remaining capacity to fitness
        double garbage_sum;
        for(int i = 0; i < facility_count; i++) {
            garbage_sum = 0;
            for(Integer node_index : facility_nodes.get(i)){
                garbage_sum += garbage_production[node_index];
            }
            facility_capacities.add(garbage_sum);
            if(garbage_sum > capacities[i]){
//                return null;
                fitness += (garbage_sum - capacities[i])*overused_penalty;
            }
            else {
                fitness += (capacities[i] - garbage_sum)*unused_penalty;
            }
        }
        
        map.put("usedCapacities", facility_capacities);
        
        //Compute the distances and update the fitness
        List<List<Vertex>> paths;
        Dijsktra.Vertex[] vertices;
        double path_length;
        for(int i = 0; i < facility_count; i++) {
            
            paths = new ArrayList<>();
            
            vertices = Dijsktra.getShortestPathsFromAdjacencyMatrix(adjM, locations[i]);
            for(Integer node_index : facility_nodes.get(i)) {
                path_length = vertices[node_index].minDistance;
                if(path_length == Double.POSITIVE_INFINITY){
                    return null;
                }
                fitness += (path_penalty * path_length * garbage_production[node_index] + garbage_production[node_index] * costs[i]);
                paths.add(Dijsktra.getShortestPathTo(vertices[node_index]));
            }
            
            map.put("span[[" + (i+1) + "]]", paths);
            
        }
        
        return map;
    }
    
    @Override
    public double fitness(double[] vector) {
        
        double fitness = 0;
        
        //Locations of facilities
        int[] locations = this.incinerator_indexes.clone();
//        int sum = 0;
        List<List<Integer>> facility_nodes = new ArrayList<>();
        for(int i = 0; i < facility_count; i++) {
            facility_nodes.add(new ArrayList<>());
//            locations[i] = (((int) (vector[i] * number_of_cities[i])) % number_of_cities[i]) + sum;
        }
        
        //Capacities of facilities
        double capacities[] = new double[facility_count];
        double costs[] = new double[facility_count];
        double capacity_sum = 0;
        for(int i = 0; i < facility_count; i++){
            capacities[i] = possible_capacities[i][((int) (vector[i] * possible_capacities[i].length)) % possible_capacities[i].length];
            if(i == 0) {
                switch(((int) (vector[i] * possible_capacities[i].length)) % possible_capacities[i].length) {
                    case 0:
                        this.garbage_production[0] = 111456.2;
                        break;
                    default:
                        this.garbage_production[0] = 0;
                }
            }
            costs[i] = possible_prices[i][((int) (vector[i] * possible_prices[i].length)) % possible_prices[i].length];
            capacity_sum += capacities[i];
        }
        
        double prod = 0;
        for(int i = 0; i < this.garbage_production.length; i++) {
            prod += this.garbage_production[i];
        }
        this.production_sum = prod;
        
        //Capacity is not enough
        if(capacity_sum < production_sum){
            return Math.pow(10, 30);
        }
        
        //Where to go from nodes
        int facility_index;
        for(int i = facility_count; i < vector.length; i++) {
            if(this.garbage_production[i - facility_count] == 0){
                switch(i-facility_count) {
                    case 0:
                        facility_index = 0;
                        break;
                    case 20:
                        facility_index = 1;
                        break;
                    case 65:
                        facility_index = 2;
                        break;
                    case 129:
                        facility_index = 3;
                        break;
                    default:
                        facility_index = ((int) (vector[i] * facility_count)) % facility_count;
                }
            }
            else{
                facility_index = ((int) (vector[i] * facility_count)) % facility_count;
            }
            facility_nodes.get(facility_index).add(i - facility_count);
        }
        
        //Chceck capacity of single facilities and if not over, add remaining capacity to fitness
        double garbage_sum;
        for(int i = 0; i < facility_count; i++) {
            garbage_sum = 0;
            for(Integer node_index : facility_nodes.get(i)){
                garbage_sum += garbage_production[node_index];
            }
            if(garbage_sum > capacities[i]){
                fitness += (garbage_sum - capacities[i])*overused_penalty; 
//                return Math.pow(10, 30);
            }
            else {
                fitness += (capacities[i] - garbage_sum)*unused_penalty;
            }
        }
        
        //Compute the distances and update the fitness
        Vertex[] vertices;
        double pathe_length;
        for(int i = 0; i < facility_count; i++) {
            
            vertices = Dijsktra.getShortestPathsFromAdjacencyMatrix(adjM, locations[i]);
            for(Integer node_index : facility_nodes.get(i)) {
                pathe_length = vertices[node_index].minDistance;
                if(pathe_length == Double.POSITIVE_INFINITY){
                    return Math.pow(10, 30);
                }
                fitness += (path_penalty * pathe_length * garbage_production[node_index] + garbage_production[node_index] * costs[i]);
            }
            
        }
        
        return fitness;
    }

    @Override
    public double fitness(Individual individual) {
        
        
        return fitness(individual.vector);
    }

    @Override
    public void constrain(Individual individual) {
        IndividualUtil.randIfOutOfBounds(individual, 0, 1);
    }

    @Override
    public double[] generateTrial(int dim) {
        double[] vector = new double[dim];
        Random rnd = new UniformRandom();
//        for (int i = 0; i < 39; i++) vector[i] = rnd.nextDouble(0.9, 0.95);
        for (int i = 0; i < dim; i++) vector[i] = rnd.nextDouble(0, 1);
        return vector;
    }

    @Override
    public double fixedAccLevel() {
        return 10^-7;
    }

    @Override
    public double optimum() {
        return 0;
    }

    @Override
    public double max(int dim) {
        return 1;
    }

    @Override
    public double min(int dim) {
        return 0;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        
        Spalovny_projekt_nonlinear sp = new Spalovny_projekt_nonlinear();
        double[] vector = new double[206+39];
        vector = new double[]{0.7300498713105763, 0.0894998451046087, 0.04676821417347593, 0.386672159518541, 0.9040668489106264, 0.34533328350719594, 0.5118372116741633, 0.1915533884765791, 0.7373683371171146, 0.16623340293165303, 0.4750815050705559, 0.8658202789321966, 0.2847122611739618, 0.921620484143651, 0.3329412543335261, 0.37007993966448827, 0.3060079571869263, 0.059560133095500775, 0.23232068171949627, 0.1234933598339219, 0.32691848556691827, 0.13466668003323223, 0.1735433442775146, 0.18854771978190812, 0.36449768951795813, 0.1438137082922849, 0.0780600400206192, 0.014407040132241145, 0.23731784444737475, 0.2749199645277631, 0.08253457092887784, 0.17634718698752097, 0.17093385711599146, 0.38375377021884544, 0.28781615864071636, 0.7219420077317183, 0.1600724109201977, 0.1370922068706576, 0.16341435901130164, 0.16121812279477565, 0.0037365561756103616, 0.10433114672134526, 0.04577597783270579, 0.04326661475732557, 0.3269642826370594, 0.8039959930465175, 0.04608262241672112, 0.511002219549483, 0.09103919657325532, 0.017232332402950634, 0.808196388111142, 0.3129308685415238, 0.23976161410319755, 0.3358241283385771, 0.002314429185279132, 0.3566097539578984, 0.05973178954596936, 0.9267857107631023, 0.9199410965613214, 0.5220780762264433, 0.8261302719612555, 0.8557769639929498, 0.041868186888035556, 0.7467597602331297, 0.014619474617138806, 0.1543987434732378, 0.21573776855919932, 0.8709081438850622, 0.21815469592130338, 0.032941430405093786, 0.15790523599878942, 0.7438140472288703, 0.16873352455097324, 0.3741909432707333, 0.03164293421603892, 0.9091211442541294, 0.27722604819161045, 0.25753592907074185, 0.29321840686203815, 0.39400045970161013, 0.2916712467364529, 0.30325360725304296, 0.2923849638218172, 0.13069221453688765, 0.3341817328110005, 0.464808147821152, 0.3750810055389493, 0.18015034835029425, 0.37622914836519694, 0.3487435678283891, 0.08435571776820305, 0.03549415206574473, 0.11823980333516507, 0.3640360948752913, 0.09898006741568921, 0.32413750714220635, 0.12768141010253395, 0.48374234287338413, 0.3652446475086446, 0.35664307532212947, 0.2842406517958862, 0.12273231578969845, 0.29910787253359117, 0.2339342140750735, 0.18268245846334968, 0.10438461631028667, 0.06743109435112088, 0.3734730785864815, 0.4704537923939689, 0.12230170490185156, 0.16376542902733593, 0.9754681137033296, 0.8620603860814888, 0.9153312920601124, 0.7371022875245435, 0.9004114572458197, 0.5961045154573891, 0.9153157470267643, 0.9178706668473553, 0.07520122977068135, 0.9459028658214513, 0.18526730956028303, 0.7459172148163455, 0.7645697327791691, 0.8615120289822829, 0.8475337667759524, 0.902947551937319, 0.9052744890721945, 0.5238082290997471, 0.21455711938337596, 0.21587500281816047, 0.9807300938628195, 0.5272040776424878, 0.5316904828317637, 0.9187465692125469, 0.9811158987732246, 0.2056049172143355, 0.9091626618413808, 0.1746336777272909, 0.9003395377182186, 0.23050029118434978, 0.22605369321563817, 0.26694802735696516, 0.22349146399225217, 0.37197917054427354, 0.1889821383075122, 0.6059160835401923, 0.22934178757245605, 0.2735631846781881, 0.1686683464453636, 0.601846251086505, 0.27677028457950253, 0.2172836061173528, 0.2098778610346543, 0.15729283317094186, 0.1675068967320119, 0.21527548483519152, 0.816707759562333, 0.09104287932434588, 0.04875058974919538, 0.012217030754701916, 0.25214648372823534, 0.2411593112738003, 0.24606994508456773, 0.10955259738660705, 0.11005081626474904, 0.2473307110065198, 0.28916499112250227, 0.7874701071066433, 0.3546314633815922, 0.3212168422932011, 0.3367069548948309, 0.5095235541730235, 0.03871844922452185, 0.799979487562007, 0.1449772626683044, 0.12727568010317827, 0.3433454138519302, 0.11738662871517586, 0.3075638279518359, 0.1040937947542428, 0.35784014504129985, 0.4975983127159422, 0.2734097494786814, 0.11528057644058987, 0.1343384719524157, 0.20643113814986502, 0.35613936163135124, 0.12846669898650112, 0.11112225231457663, 0.29020498218519986, 0.22455310485345217, 0.354916269537273, 0.2808421055136085, 0.3057999093343217, 0.01781638318884024, 0.1622820075259659, 0.14004775456630691, 0.11727384483211739, 0.26864337006608685, 0.0014570824294778788, 0.14452197982387888, 0.4036387409718571, 0.0636013540111521, 0.33361604716481497, 0.11125657494065327, 0.3573408620762284, 0.2872808043325914, 0.30366385576263416, 0.10917363935991431, 0.3460424313566296, 0.9167844069473965, 0.3809518211726848, 0.2835586760008141, 0.29861746545911033, 0.04367891675985619, 0.35501652983395254, 0.049472691634166004, 0.5981953829595104, 0.07628114591992949, 0.25747536723586323, 0.004319643163466946, 0.23072133832115765, 0.7629969970767847, 0.3325432989767296, 0.09571148017319242, 0.20929463188669, 0.09024138168354727, 0.24507203054336485, 0.15445340105480762, 0.012211532287800642, 0.4871578878994687, 0.518834699816942, 0.15444086111701394, 0.0360724130097721, 0.9140052760716519, 0.11663761460440669, 0.7190581596113617, 0.7190129470740017, 0.21613500396723045, 0.11475304530357394, 0.21233353952229223, 0.0403220406539791, 0.8316016525111163, 0.34933040185937414};
        
//        vector = new double[]{0.8020758909236043, 0.3966936079690218, 0.44955034894232354, 0.30906242426823244, 0.8929572381947177, 0.15036277752671323, 0.203733190102784, 0.18219775919654238, 0.5770646169550157, 0.28407544075320523, 0.9664407238681354, 0.49534568070030754, 0.2292398754881938, 0.7296360751606176, 0.5151486011201198, 0.35947925111971407, 0.40848548052635336, 0.45539611735530305, 0.22346257457768554, 0.14982201049044985, 0.3086168932200783, 0.010210845283266545, 0.6853445698527594, 0.2026314544316736, 0.7588832606008015, 0.7255970217599915, 0.434882282339273, 0.5629994947071502, 0.20624734074756512, 0.25405148418981827, 0.3716946476597854, 0.2026178883331901, 0.16289315018197834, 0.33591141401441593, 0.6857881919601091, 0.8895767148331968, 0.17161235150119622, 0.15929760836414789, 0.15985610272044265, 0.36518572522667775, 0.49888728891121814, 0.2430238508253565, 0.038261771265668626, 0.2718153719785717, 0.793033704263113, 0.3152811642195748, 0.5001373179819095, 0.08851812207248724, 0.23092467227914615, 0.49269121201061783, 0.2686621219430888, 0.1204625734508652, 0.5089555243580385, 0.0420585786873614, 0.03699371713892474, 0.5124870994057964, 0.32836175085261043, 0.03406218441881387, 0.716713724274005, 0.3544543090682567, 0.434560789558758, 0.8691677407132568, 0.4158865731908952, 0.4420952807140018, 0.4562349131867734, 0.044639289426165796, 0.2294418094149304, 0.034029551960762586, 0.03131860316564086, 0.2259123588485509, 0.0429751817220035, 0.20757732103234217, 0.26530066089702625, 0.2616523615203397, 0.05072943607482641, 0.02719970017994519, 0.6631826072403304, 0.04809528372135974, 0.29348828008701067, 0.58460668900703, 0.4023971227986615, 0.635200247781397, 0.2960072772125054, 0.34870930920405224, 0.3382148463620834, 0.12603042941784437, 0.015495680276275126, 0.6790474029895924, 0.09584833107088975, 0.3822070997546387, 0.4858925129588407, 0.46896043029188905, 0.6116494335040681, 0.2799285265699184, 0.09728266875702128, 0.4851164206059797, 0.024285449274677892, 0.4859337109394437, 0.3685060401141019, 0.38055755625989446, 0.10780310959875028, 0.12041140675409255, 0.1178831520765735, 0.9663429353730322, 0.1237818168067154, 0.11263390099515375, 0.3611596451265293, 0.6670555308207247, 0.12093831947308523, 0.08147152793999457, 0.9602352101022689, 0.828787947754413, 0.9303583149974389, 0.830602299963175, 0.8386852481321317, 0.9094714080190943, 0.9086928751845054, 0.9126883500623771, 0.9300269161810621, 0.8260261128596046, 0.7473231587515559, 0.921719017100336, 0.20594363595913234, 0.9542798231395446, 0.21057426236857765, 0.8237918624085807, 0.22670677712829312, 0.9812581869628982, 0.913039292898075, 0.6738211721085242, 0.975852112768431, 0.8535643018485752, 0.7302696818551707, 0.6035927145901598, 0.7425912693737563, 0.45270587251106886, 0.040341072104819256, 0.8714045270121693, 0.2174745138991, 0.03941272116752499, 0.22142262959129708, 0.027171174397928655, 0.9037798643705004, 0.04509652174279699, 0.7107739491770786, 0.9508715066504873, 0.048927717749844946, 0.037182490370153976, 0.2779613187399087, 0.7032878593176487, 0.22169640849143085, 0.2094522696635445, 0.7673207556125847, 0.06505535762357062, 0.4808517270229117, 0.278368832688297, 0.32825355151309005, 0.9599266459244611, 0.26265955018974596, 0.27334014725036565, 0.14376251073470175, 0.004805794614607728, 0.1344202904014168, 0.06418639276996982, 0.6369571651591566, 0.6244341622122901, 0.7733491894590433, 0.7825059272178132, 0.4319245018727659, 0.02118667411766665, 0.01032523809743957, 0.12694756414878816, 0.49629750292127706, 0.49127456385353085, 0.5873823251168717, 0.129303920070103, 0.34215045523732857, 0.33871302010717463, 0.14166099013914052, 0.30576787834723956, 0.12415676694173639, 0.034270405276984967, 0.40255596036297453, 0.12651818078829438, 0.2679699264999183, 0.10758324013692216, 0.047598354369272566, 0.11297389333059188, 0.1063533368592072, 0.2670763224941865, 0.12603034365050647, 0.11011120684312277, 0.31847091898809887, 0.27707988457297505, 0.6760607792421337, 0.12350412785707277, 0.2749534812440577, 0.6049954832244114, 0.260177179171616, 0.27235448512483595, 0.059454325272241815, 0.292615657568422, 0.3538671273914125, 0.33473349039751243, 0.29269464027254455, 0.3004225458599327, 0.3059836607335336, 0.11908145183855876, 0.3351072377575328, 0.3465278246763873, 0.017403149700682685, 0.10752550419610024, 0.3377802155719007, 0.33767410328521696, 0.2955378532747683, 0.11769790305197081, 0.011738638207265006, 0.041004855845335975, 0.2732621506185853, 0.32927573138443006, 0.27222552464413136, 0.012589945324509272, 0.02671567139900277, 0.031911204594422204, 0.042308390335049295, 0.08918937061136575, 0.5948982898399832, 0.0855985003315357, 0.025857958193232736, 0.873712170981003, 0.2567154437174975, 0.04460741129965917, 0.8698747772424134, 0.862280601581356, 0.9197637183568454, 0.20878803437979782, 0.7466799528009032, 0.9157025043577797, 0.7326875533868615, 0.9294201093850414, 0.8610254210747865, 0.9812968275300498, 0.8491052009132866, 0.44251570566278153, 0.9033292897725644};

        System.out.println(sp.fitness(vector));
        
        Map<String, List> map = sp.getOutput(vector);
            
        System.out.println("=================================");
        String line;

        if(map == null) {
            return;
        }
        
        if(map != null){
            for(Map.Entry<String,List> entry : map.entrySet()){
                line = "";
                System.out.print(entry.getKey() + " = ");
                line += "{";
//                System.out.print("{");
                for(int pup = 0; pup < entry.getValue().size(); pup++){
//                    System.out.print(entry.getValue().get(pup));
                    line += entry.getValue().get(pup);
                    if(pup != entry.getValue().size()-1){
//                       System.out.print(","); 
                       line += ",";
                    }
                }
//                System.out.println("}");
                line += "};";
                line = line.replace("[", "{");
                line = line.replace("]", "}");
                System.out.println(line);

            }
        }

        System.out.println("=================================");
        
    }

    @Override
    public double[] optimumPosition() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
}
