
package model.tf.nwf;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.Individual;
import model.tf.Cec2015;
import model.tf.TestFunction;
import util.Dijsktra;
import util.Dijsktra.Vertex;
import util.IndividualUtil;
import util.random.Random;
import util.random.UniformRandom;

/**
 *
 * This class represents the basic solution of incinerator facility locations
 * Locations and capacities based on the projected incinerators.
 * 
 * @author wiki on 31/01/2017
 */
public class Spalovny_projekt implements TestFunction {

    double[][] adjM;
    double[] garbage_production;
    double[] existing_fac_production;
    double production_sum;
    int facility_count;
    int producent_count;
    int[] number_of_cities;
    double[] capacity_options;
    //40 cities
    //cities with incenerators - Praha [0], Brno [20], Liberec [65], Plzen [129]
    //cities of possible incenerators - Melnik [149], Kolin [145], Hodonin [23], Olomouc [99], 
//    Prerov [101], Ceske Budejovice [2], Pardubice [114], Most [170], 
    //Jihlava[182], Usti nad Labem[175], Trutnov[59], Ostrov[44], Chropyne[195], 
//    Valasske Mezirici[202], Nachod[54], Strakonice[11], Zlin[205], Prostejov[100], 
//    Frantiskovy Lazne[40], Zdar nad Sazavou[192]
    //Cheb[40], Trebic[190], Varnsdorf[176], Bruntal[73], Vsetin[204], Otrokovice[197], 
//    Klatovy[125], Pribram[155], Detmarovice[81], Uherske Hradiste[199], Znojmo[37], 
//    Ostrava[89], Havirov[78], Karvina[81], 
    //Frydek-Mistek[76], Opava[87]
    double[][] possible_capacities;
    double[][] possible_prices;
    double[][] penalization_koeficients;
    int[] incinerator_indexes;
    double unused_penalty = 500;
    double overused_penalty = 100_000_000;
    double path_penalty = 5;
    
    int[] use_incinerator_indexes;
    int[] use_producent_indexes;
    int[] locations;
    
    public Spalovny_projekt() {

        this.use_incinerator_indexes = new int[40];
        for(int i = 0; i < this.use_incinerator_indexes.length; i++) {
            this.use_incinerator_indexes[i]=i;
        }
        
        this.use_producent_indexes = new int[206];
        for(int i = 0; i < this.use_producent_indexes.length; i++) {
            this.use_producent_indexes[i]=i;
        }
        
        this.existing_fac_production = new double[]{421456.20,4618.37,40328.62,10267.64,6054.39,12617.38,5237.12,4892.46,11682.76,8108.45,7039.16,12327.33,26770.87,5010.74,8555.13,4609.10,5111.39,3988.39,14070.61,14343.59,119805.75,19561.32,4147.45,18887.91,10201.53,8107.61,6250.03,16045.27,4836.13,6307.23,4056.93,6973.76,5520.20,19984.11,8029.20,9128.13,14495.34,24822.35,10501.02,8511.10,16835.81,25171.38,3399.31,9079.82,7454.33,21032.18,4472.56,7215.61,6201.28,6119.69,51330.69,4445.92,15210.71,6734.93,15135.70,2793.67,3637.41,4976.93,9159.88,21280.52,9544.94,24765.51,8079.11,14040.02,5842.87,50333.33,9278.74,5987.36,6045.85,8719.04,3054.00,6051.64,11312.84,9453.26,8867.39,5051.98,32099.15,9986.36,27737.28,11916.22,5641.20,21873.89,16721.48,5193.34,12028.95,12322.73,5130.85,34858.49,12588.02,82707.62,1259.73,14886.78,7083.38,10695.23,9435.95,2755.95,5084.76,7126.47,6041.74,50918.85,29322.16,26006.27,8264.66,23361.72,7493.42,10543.17,5522.79,5866.35,4096.67,23156.53,2795.28,5124.32,6425.70,7346.90,35345.02,4735.35,8529.37,7744.97,8204.27,8258.16,8342.36,3092.94,9674.67,4317.68,4435.00,15640.78,8605.63,2680.56,13789.02,60292.82,6006.31,17997.80,6725.98,5591.85,7701.58,11773.66,21185.92,17639.47,41796.62,7931.37,44712.79,10010.61,7328.53,11285.26,34601.82,34060.59,12471.84,20311.27,8569.94,17996.19,36791.19,4792.82,14507.71,16659.05,12347.36,23618.15,18237.74,24668.06,7006.08,12956.23,10422.35,4519.41,5779.48,22885.43,22103.19,14204.32,23938.29,13171.29,13841.54,9880.92,21436.48,6069.16,7595.05,10984.90,35240.52,29269.43,7066.70,9149.82,4840.89,17531.07,5802.00,5711.93,25640.05,5779.25,2753.40,4690.38,3137.53,13686.97,5994.54,3524.22,19105.03,10862.11,12096.55,4842.76,7432.78,18157.25,5126.45,10345.50,10415.80,24179.22,15164.39,5119.98,12566.70,4706.77,14186.38,27447.64};
        this.penalization_koeficients = new double[][]{{1.e9,1.e9,1.e9},{1.e9,1.e9,1.e9},{1.e9,1.e9,1.e9},{1.e9,1.e9,1.e9},{-4.6332e-9,1.15063e-6,3.40002e-9},{-6.8857e-9,1.28464e-6,6.75326e-9},{-7.6378e-9,8.61982e-7,9.3877e-9},{-5.8807e-9,1.27062e-6,5.14842e-9},{-4.5162e-9,1.0308e-6,3.79009e-9},{-4.8986e-9,9.93745e-7,4.76961e-9},{-4.6098e-9,1.12093e-6,3.51782e-9},{-4.8482e-9,1.02995e-6,4.31959e-9},{-1.0353e-8,5.90684e-7,1.31726e-8},{-4.5722e-9,1.06072e-6,3.74732e-9},{-5.7585e-9,1.09545e-6,5.53137e-9},{-9.5885e-9,1.81632e-6,9.98701e-9},{-1.091e-8,1.95017e-6,1.06918e-8},{-1.0895e-8,1.87811e-6,1.08646e-8},{-1.0405e-8,1.40713e-6,1.15351e-8},{-7.0143e-9,9.76986e-7,8.23012e-9},{-6.5815e-9,9.73096e-7,7.37948e-9},{-1.0956e-8,2.02911e-6,1.05282e-8},{9.6443e-9,2.14395e-6,9.1834e-9},{-9.7127e-9,1.09974e-6,1.14434e-8},{-9.3212e-9,1.84887e-6,9.69177e-9},{-1.102e-8,2.28826e-6,9.88925e-9},{-1.1023e-8,2.06177e-6,1.0507e-8},{-1.1009e-8,2.21107e-6,1.00858e-8},{-1.0052e-8,7.19101e-7,1.26135e-8},{-1.1205e-8,1.59485e-6,1.19419e-8},{-1.0989e-8,1.98647e-6,1.06728e-8},{-8.1623e-9,9.50883e-7,9.76647e-9},{-7.8977e-9,9.61479e-7,9.36597e-9},{-1.0822e-8,1.52129e-6,1.1715e-8},{-9.3009e-9,2.00521e-6,9.24296e-9},{-4.2603e-9,1.03226e-6,3.27097e-9},{-6.097e-9,1.03532e-6,6.344e-9},{-6.2969e-9,1.00614e-6,6.79505e-9},{-7.7641e-9,9.59571e-7,9.20838e-9},{-1.0416e-8,7.84236e-7,1.29276e-8}};
        this.adjM = new double[206][206];
        this.garbage_production = new double[]{421456.20,4618.37,40328.62,10267.64,6054.39,12617.38,5237.12,4892.46,11682.76,8108.45,7039.16,12327.33,26770.87,5010.74,8555.13,4609.10,5111.39,3988.39,14070.61,14343.59,119805.75,19561.32,4147.45,18887.91,10201.53,8107.61,6250.03,16045.27,4836.13,6307.23,4056.93,6973.76,5520.20,19984.11,8029.20,9128.13,14495.34,24822.35,10501.02,8511.10,16835.81,25171.38,3399.31,9079.82,7454.33,21032.18,4472.56,7215.61,6201.28,6119.69,51330.69,4445.92,15210.71,6734.93,15135.70,2793.67,3637.41,4976.93,9159.88,21280.52,9544.94,24765.51,8079.11,14040.02,5842.87,50333.33,9278.74,5987.36,6045.85,8719.04,3054.00,6051.64,11312.84,9453.26,8867.39,5051.98,32099.15,9986.36,27737.28,11916.22,5641.20,21873.89,16721.48,5193.34,12028.95,12322.73,5130.85,34858.49,12588.02,82707.62,1259.73,14886.78,7083.38,10695.23,9435.95,2755.95,5084.76,7126.47,6041.74,50918.85,29322.16,26006.27,8264.66,23361.72,7493.42,10543.17,5522.79,5866.35,4096.67,23156.53,2795.28,5124.32,6425.70,7346.90,35345.02,4735.35,8529.37,7744.97,8204.27,8258.16,8342.36,3092.94,9674.67,4317.68,4435.00,15640.78,8605.63,2680.56,13789.02,60292.82,6006.31,17997.80,6725.98,5591.85,7701.58,11773.66,21185.92,17639.47,41796.62,7931.37,44712.79,10010.61,7328.53,11285.26,34601.82,34060.59,12471.84,20311.27,8569.94,17996.19,36791.19,4792.82,14507.71,16659.05,12347.36,23618.15,18237.74,24668.06,7006.08,12956.23,10422.35,4519.41,5779.48,22885.43,22103.19,14204.32,23938.29,13171.29,13841.54,9880.92,21436.48,6069.16,7595.05,10984.90,35240.52,29269.43,7066.70,9149.82,4840.89,17531.07,5802.00,5711.93,25640.05,5779.25,2753.40,4690.38,3137.53,13686.97,5994.54,3524.22,19105.03,10862.11,12096.55,4842.76,7432.78,18157.25,5126.45,10345.50,10415.80,24179.22,15164.39,5119.98,12566.70,4706.77,14186.38,27447.64};
        this.production_sum = 3011744.95;
        this.facility_count = this.use_incinerator_indexes.length;
        this.producent_count = this.use_producent_indexes.length;
        this.number_of_cities = new int[]{206, 206};
//        this.capacity_options = new double[]{250_000, 500_000, 750_000, 1_000_000, 1_500_000, 2_000_000, 2_500_000, 3_000_000, 3_500_000};
        this.incinerator_indexes = new int[]{0,20,65,129,149,145,23,99,101,2,114,170,182,175,59,44,195,202,54,11,205,100,40,192,40,190,176,73,204,197,125,155,81,199,37,89,78,81,76,87};
        this.possible_capacities = new double[][]{{0,8543.8},{120194.25,240194.25},{45666.67},{34707.18},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.},{0,10000.,20000.,30000.,80000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.},{0,10000.,20000.,30000.,80000.},{0,10000.,20000.,30000.,80000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10000.,20000.,30000.,80000.,90000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.},{0,10000.,20000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.}};
        this.possible_prices = new double[][]{{1400,1800},{1400,1800},{1400},{1400},{0,4431.9,2720.45,1979.22,1583.37,3170.63,3069.73,2980.47,2904.15,2825.24,2764.44,2708.81,2650.6,2605.32,2562.63,2517.36,2481.14,2447.5,2409.99,2381.53,2353.07,2322.02,2297.45,2274.16,2252.17,2227.59,2206.89,2187.49},{0,4757.89,3046.44,2307.79,1919.71,3495.33,3407.36,3332.33,3266.36,3201.68,3152.52,3109.83,3064.55,3029.63,2995.99,2959.77,2933.9,2908.03,2880.86,2861.46,2842.05,2818.77,2800.66,2783.84,2765.73,2751.5,2739.86,2729.51},{0,4431.9,2728.22,2001.21,1682.98,3337.51,3265.06,3200.38,3147.34,3093.01,3056.79,3021.87,2983.06,2954.6,2937.78,2915.79,2901.56,2893.8,2878.27,2869.22,2860.16,2845.93,2836.88,2827.82,2818.77,2805.83,2796.78,2787.72},{0,4757.89,3046.44,2306.5,1909.36,3455.22,3355.62,3268.94,3192.62,3115.,3055.5,3003.75,2952.01,2915.79,2882.16,2843.35,2813.59,2786.43,2754.09,2729.51,2704.93,2680.35,2660.95,2642.84,2624.73,2604.03,2589.8,2575.57},{0,4403.44,2692.,1952.05,1554.92,3147.34,3045.15,2957.18,2879.57,2800.66,2741.15,2688.11,2632.49,2588.51,2549.7,2507.01,2472.08,2442.33,2408.7,2382.82,2356.95,2328.49,2312.97,2298.74,2285.8,2271.57,2263.81,2256.05},{0,4394.38,2688.11,1958.52,1592.43,3192.62,3099.48,3023.16,2957.18,2887.33,2833.,2785.14,2733.39,2697.17,2670.,2638.96,2616.97,2594.97,2569.1,2549.7,2530.29,2507.01,2490.19,2475.96,2463.03,2446.21,2434.57,2422.93},{0,4431.9,2720.45,1979.22,1583.37,3170.63,3069.73,2980.47,2904.15,2825.24,2764.44,2710.11,2653.19,2609.2,2567.81,2522.53,2487.61,2453.97,2417.75,2388.,2360.83,2329.79,2305.21,2284.51,2265.11,2244.41,2231.47,2218.54},{0,4431.9,2720.45,1979.22,1583.37,3173.22,3073.61,2986.94,2911.91,2835.59,2776.08,2723.04,2671.3,2637.66,2607.91,2574.28,2548.41,2522.53,2494.07,2470.79,2450.09,2425.51,2408.7,2393.17,2377.65,2358.24,2346.6,2334.96},{0,6627.15,3386.66,2319.44,1839.51,3292.23,3204.26,3169.34,3143.46,3122.77,3109.83,3096.89,3074.9,3060.67,3046.44,3025.75,3011.52,2997.29,2977.88,2963.65,2950.72},{0,4422.84,2711.4,1970.16,1573.03,3162.87,3060.67,2972.71,2895.09,2818.77,2759.26,2706.23,2649.31,2605.32,2563.93,2519.95,2485.02,2452.68,2416.46,2386.7,2366.01,2344.02,2327.2,2311.68,2296.15,2275.45,2263.81,2250.88},{0,4431.9,2720.45,1979.22,1592.43,3213.32,3134.41,3065.85,3010.22,2949.42,2909.32,2873.1,2830.41,2799.36,2769.61,2735.98,2710.11,2685.53,2657.07,2635.08,2614.38,2592.39,2579.45,2566.52,2553.58,2538.06,2526.41,2514.77},{0,4509.51,3049.03,2450.09,2173.26,3697.13,3640.21,3588.46,3540.6,3487.56,3447.46,3408.65},{0,4512.1,3052.91,2453.97,2178.43,3702.3,3644.09,3592.35,3544.48,3490.15,3450.05,3411.24},{0,4129.19,2751.5,2190.08,1971.46,3603.99,3557.42,3513.44,3472.04,3424.18},{0,4380.15,2818.77,2249.58,1958.52,3522.49,3459.1,3415.12,3382.78,3342.68,3312.93,3285.76,3250.83,3226.25,3201.68,3171.92,3149.93,3129.23},{0,4478.47,2774.79,2051.66,1737.31,3390.54,3311.63,3244.37,3183.57,3120.18,3080.08,3045.15,3005.05,2975.3,2949.42,2919.67,2900.27,2882.16,2857.58,2845.93,2835.59,2822.65,2813.59,2805.83,2796.78,2785.14,2776.08,2768.32},{0,4365.92,2659.66,1935.24,1591.14,3283.17,3210.73,3146.05,3089.13,3028.33,2983.06,2944.25,2906.73,2880.86,2854.99,2825.24,2805.83,2787.72,2767.02,2752.79,2738.57,2721.75,2713.99,2707.52,2702.34,2693.29,2688.11,2682.94},{0,4534.09,3080.08,2474.67,2208.19,3728.17,3668.67,3613.04,3563.89,3508.26,3465.57},{0,4637.58,3190.03,2651.89,3849.77},{0,4333.58,2698.46,2108.58,1842.1,3429.35,3362.08,3306.46,3263.77,3217.2,3193.91,3174.51,3147.34,3129.23,3109.83,3085.25,3068.43,3051.62,3029.63,3012.81,2997.29,2977.88,2963.65,2949.42},{0,3773.45,2439.74,2038.72,3597.52},{0,4504.34,3077.49,2570.4,3813.55},{0,4253.38,2742.45,2240.53,2042.6,3668.67,3614.34,3565.18,3519.9,3468.16},{0,4244.32,2829.12,2329.79,3730.76,3669.96},{0,3514.73,1988.27,1490.23,1267.73,3038.68,2997.29,2966.24,2957.18,2948.13,2949.42,2946.84,2935.19,2930.02,2923.55,2909.32,2901.56,2892.5,2878.27,2869.22},{0,4431.9,2725.63,2033.55,1699.8,3510.85,3474.63,3439.7,3404.77,3363.38,3332.33,3302.58,3267.65,3240.48,3215.91,3186.15,3162.87,3140.88},{0,3990.78,2545.82,2077.53,1895.13,3597.52,3552.24,3509.55,3468.16,3420.3},{0,4478.47,3076.2,2464.32,1734.73,3389.25,3311.63,3246.95,3197.8,3144.76,3105.95,3069.73,3032.21,3008.93,2986.94,2962.36,2950.72,2939.07,2922.26,2911.91,2900.27,2884.74,2874.39,2862.75,2852.4,2838.17,2827.82,2817.48},{0,4431.9,2737.27,2027.08,1717.91,3372.43,3297.4,3231.43,3182.27,3130.53,3090.43,3056.79,3019.28,2990.82,2967.53,2944.25,2930.02,2917.08,2897.68,2887.33,2878.27,2862.75,2852.4,2843.35,2833.,2820.06,2809.71,2800.66},{0,3939.03,2443.62,1943.,1734.73,3434.53,3407.36,3377.61,3349.15,3311.63,3284.47,3258.6,3226.25},{0,3950.67,2693.29},{0,4281.84,2571.69,1830.45,1433.32,3041.27,2940.37,2851.11,2774.79,2695.88,2635.08,2580.75,2523.83,2479.84,2438.45,2394.47,2359.54,2327.2,2290.98,2262.52,2234.06,2204.31,2179.73,2157.74,2140.92,2122.81,2109.87,2098.23},{0,4356.87,2645.43,1918.42,1534.22,3227.55,3155.11,3094.31,3041.27,2983.06,2939.07,2898.97,2854.99,2821.36,2792.9,2764.44,2745.03,2725.63,2701.05,2685.53,2671.3,2651.89,2640.25,2629.9,2619.55,2605.32,2596.27,2592.39},{0,4356.87,2646.72,1922.3,1547.15,3250.83,3180.98,3118.89,3063.26,3003.75,2958.48,2918.38,2874.39,2845.93,2822.65,2794.19,2772.2,2752.79,2732.1,2715.28,2702.34,2685.53,2673.88,2660.95,2654.48,2644.13,2641.54,2637.66},{0,4422.84,2725.63,2030.96,1734.73,3381.49,3302.58,3234.02,3177.1,3125.35,3086.55,3050.32,3014.1,2986.94,2964.95,2936.49,2919.67,2908.03,2892.5,2883.45,2873.1,2858.87,2848.52,2839.47,2829.12,2816.18,2805.83,2796.78},{0,3482.39,1990.86,1513.52,1281.96,3050.32,3021.87,3006.34,3010.22,3001.17,2998.58,2992.11,2977.88,2970.12,2961.07,2944.25,2933.9,2923.55,2908.03}};
        this.garbage_production[20] = 0;
        this.garbage_production[65] = 0;   
        this.garbage_production[129] = 0;   
        
        //Added to increase the cost of small incinerators
        for(int i = 4; i < this.possible_capacities.length; i++) {
            for(int j = 0; j < this.possible_capacities[i].length; j++) {
                if(this.possible_capacities[i][j] <= 40000) {
                    this.possible_prices[i][j] = this.possible_prices[i][j] * 1.5;
                }
            }
        }
        
        this.locations = new int[this.facility_count];
        for(int i = 0; i < this.locations.length; i++) {
            this.locations[i] = this.incinerator_indexes[this.use_incinerator_indexes[i]];
        }
        
        String location = "/adjM_new.csv";
        URL resource = Cec2015.class.getResource(location);
        File fpt = null;
        try {
            fpt = Paths.get(resource.toURI()).toFile();
        } catch (URISyntaxException ex) {
            Logger.getLogger(SpalovnyCR_2.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        BufferedReader br = null;
	String line = "";
	String cvsSplitBy = ",";
        int rowIt = 0;

	try {

		br = new BufferedReader(new FileReader(fpt));
		while ((line = br.readLine()) != null) {

		        // use comma as separator
			String[] row = line.split(cvsSplitBy);
                        
                        for(int columnIt = 0; columnIt < row.length; columnIt++) {
                            this.adjM[rowIt][columnIt] = Double.parseDouble(row[columnIt]);
                        }
                        rowIt++;

		}

	} catch (FileNotFoundException e) {
            Logger.getLogger(Spalovny_projekt.class.getName()).log(Level.SEVERE, null, e);
	} catch (IOException e) {
            Logger.getLogger(Spalovny_projekt.class.getName()).log(Level.SEVERE, null, e);
	} finally {
		if (br != null) {
			try {
				br.close();
			} catch (IOException e) {
                            Logger.getLogger(SpalovnyCR_2.class.getName()).log(Level.SEVERE, null, e);
			}
		}
	}
        
    }
    
    public Spalovny_projekt(int[] use_inc, int[] use_prod) {

        this.use_incinerator_indexes = use_inc.clone();
        
        this.use_producent_indexes = use_prod.clone();
        
        this.existing_fac_production = new double[]{421456.20,4618.37,40328.62,10267.64,6054.39,12617.38,5237.12,4892.46,11682.76,8108.45,7039.16,12327.33,26770.87,5010.74,8555.13,4609.10,5111.39,3988.39,14070.61,14343.59,119805.75,19561.32,4147.45,18887.91,10201.53,8107.61,6250.03,16045.27,4836.13,6307.23,4056.93,6973.76,5520.20,19984.11,8029.20,9128.13,14495.34,24822.35,10501.02,8511.10,16835.81,25171.38,3399.31,9079.82,7454.33,21032.18,4472.56,7215.61,6201.28,6119.69,51330.69,4445.92,15210.71,6734.93,15135.70,2793.67,3637.41,4976.93,9159.88,21280.52,9544.94,24765.51,8079.11,14040.02,5842.87,50333.33,9278.74,5987.36,6045.85,8719.04,3054.00,6051.64,11312.84,9453.26,8867.39,5051.98,32099.15,9986.36,27737.28,11916.22,5641.20,21873.89,16721.48,5193.34,12028.95,12322.73,5130.85,34858.49,12588.02,82707.62,1259.73,14886.78,7083.38,10695.23,9435.95,2755.95,5084.76,7126.47,6041.74,50918.85,29322.16,26006.27,8264.66,23361.72,7493.42,10543.17,5522.79,5866.35,4096.67,23156.53,2795.28,5124.32,6425.70,7346.90,35345.02,4735.35,8529.37,7744.97,8204.27,8258.16,8342.36,3092.94,9674.67,4317.68,4435.00,15640.78,8605.63,2680.56,13789.02,60292.82,6006.31,17997.80,6725.98,5591.85,7701.58,11773.66,21185.92,17639.47,41796.62,7931.37,44712.79,10010.61,7328.53,11285.26,34601.82,34060.59,12471.84,20311.27,8569.94,17996.19,36791.19,4792.82,14507.71,16659.05,12347.36,23618.15,18237.74,24668.06,7006.08,12956.23,10422.35,4519.41,5779.48,22885.43,22103.19,14204.32,23938.29,13171.29,13841.54,9880.92,21436.48,6069.16,7595.05,10984.90,35240.52,29269.43,7066.70,9149.82,4840.89,17531.07,5802.00,5711.93,25640.05,5779.25,2753.40,4690.38,3137.53,13686.97,5994.54,3524.22,19105.03,10862.11,12096.55,4842.76,7432.78,18157.25,5126.45,10345.50,10415.80,24179.22,15164.39,5119.98,12566.70,4706.77,14186.38,27447.64};
        this.penalization_koeficients = new double[][]{{1.e9,1.e9,1.e9},{1.e9,1.e9,1.e9},{1.e9,1.e9,1.e9},{1.e9,1.e9,1.e9},{-4.6332e-9,1.15063e-6,3.40002e-9},{-6.8857e-9,1.28464e-6,6.75326e-9},{-7.6378e-9,8.61982e-7,9.3877e-9},{-5.8807e-9,1.27062e-6,5.14842e-9},{-4.5162e-9,1.0308e-6,3.79009e-9},{-4.8986e-9,9.93745e-7,4.76961e-9},{-4.6098e-9,1.12093e-6,3.51782e-9},{-4.8482e-9,1.02995e-6,4.31959e-9},{-1.0353e-8,5.90684e-7,1.31726e-8},{-4.5722e-9,1.06072e-6,3.74732e-9},{-5.7585e-9,1.09545e-6,5.53137e-9},{-9.5885e-9,1.81632e-6,9.98701e-9},{-1.091e-8,1.95017e-6,1.06918e-8},{-1.0895e-8,1.87811e-6,1.08646e-8},{-1.0405e-8,1.40713e-6,1.15351e-8},{-7.0143e-9,9.76986e-7,8.23012e-9},{-6.5815e-9,9.73096e-7,7.37948e-9},{-1.0956e-8,2.02911e-6,1.05282e-8},{9.6443e-9,2.14395e-6,9.1834e-9},{-9.7127e-9,1.09974e-6,1.14434e-8},{-9.3212e-9,1.84887e-6,9.69177e-9},{-1.102e-8,2.28826e-6,9.88925e-9},{-1.1023e-8,2.06177e-6,1.0507e-8},{-1.1009e-8,2.21107e-6,1.00858e-8},{-1.0052e-8,7.19101e-7,1.26135e-8},{-1.1205e-8,1.59485e-6,1.19419e-8},{-1.0989e-8,1.98647e-6,1.06728e-8},{-8.1623e-9,9.50883e-7,9.76647e-9},{-7.8977e-9,9.61479e-7,9.36597e-9},{-1.0822e-8,1.52129e-6,1.1715e-8},{-9.3009e-9,2.00521e-6,9.24296e-9},{-4.2603e-9,1.03226e-6,3.27097e-9},{-6.097e-9,1.03532e-6,6.344e-9},{-6.2969e-9,1.00614e-6,6.79505e-9},{-7.7641e-9,9.59571e-7,9.20838e-9},{-1.0416e-8,7.84236e-7,1.29276e-8}};
        this.adjM = new double[206][206];
        this.garbage_production = new double[]{421456.20,4618.37,40328.62,10267.64,6054.39,12617.38,5237.12,4892.46,11682.76,8108.45,7039.16,12327.33,26770.87,5010.74,8555.13,4609.10,5111.39,3988.39,14070.61,14343.59,119805.75,19561.32,4147.45,18887.91,10201.53,8107.61,6250.03,16045.27,4836.13,6307.23,4056.93,6973.76,5520.20,19984.11,8029.20,9128.13,14495.34,24822.35,10501.02,8511.10,16835.81,25171.38,3399.31,9079.82,7454.33,21032.18,4472.56,7215.61,6201.28,6119.69,51330.69,4445.92,15210.71,6734.93,15135.70,2793.67,3637.41,4976.93,9159.88,21280.52,9544.94,24765.51,8079.11,14040.02,5842.87,50333.33,9278.74,5987.36,6045.85,8719.04,3054.00,6051.64,11312.84,9453.26,8867.39,5051.98,32099.15,9986.36,27737.28,11916.22,5641.20,21873.89,16721.48,5193.34,12028.95,12322.73,5130.85,34858.49,12588.02,82707.62,1259.73,14886.78,7083.38,10695.23,9435.95,2755.95,5084.76,7126.47,6041.74,50918.85,29322.16,26006.27,8264.66,23361.72,7493.42,10543.17,5522.79,5866.35,4096.67,23156.53,2795.28,5124.32,6425.70,7346.90,35345.02,4735.35,8529.37,7744.97,8204.27,8258.16,8342.36,3092.94,9674.67,4317.68,4435.00,15640.78,8605.63,2680.56,13789.02,60292.82,6006.31,17997.80,6725.98,5591.85,7701.58,11773.66,21185.92,17639.47,41796.62,7931.37,44712.79,10010.61,7328.53,11285.26,34601.82,34060.59,12471.84,20311.27,8569.94,17996.19,36791.19,4792.82,14507.71,16659.05,12347.36,23618.15,18237.74,24668.06,7006.08,12956.23,10422.35,4519.41,5779.48,22885.43,22103.19,14204.32,23938.29,13171.29,13841.54,9880.92,21436.48,6069.16,7595.05,10984.90,35240.52,29269.43,7066.70,9149.82,4840.89,17531.07,5802.00,5711.93,25640.05,5779.25,2753.40,4690.38,3137.53,13686.97,5994.54,3524.22,19105.03,10862.11,12096.55,4842.76,7432.78,18157.25,5126.45,10345.50,10415.80,24179.22,15164.39,5119.98,12566.70,4706.77,14186.38,27447.64};
        this.production_sum = 3011744.95;
        this.facility_count = this.use_incinerator_indexes.length;
        this.producent_count = this.use_producent_indexes.length;
        this.number_of_cities = new int[]{206, 206};
//        this.capacity_options = new double[]{250_000, 500_000, 750_000, 1_000_000, 1_500_000, 2_000_000, 2_500_000, 3_000_000, 3_500_000};
        this.incinerator_indexes = new int[]{0,20,65,129,149,145,23,99,101,2,114,170,182,175,59,44,195,202,54,11,205,100,40,192,40,190,176,73,204,197,125,155,81,199,37,89,78,81,76,87};
        this.possible_capacities = new double[][]{{0,8543.8},{120194.25,240194.25},{45666.67},{34707.18},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.},{0,10000.,20000.,30000.,80000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.},{0,10000.,20000.,30000.,80000.},{0,10000.,20000.,30000.,80000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10000.,20000.,30000.,80000.,90000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.},{0,10000.,20000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.}};
        this.possible_prices = new double[][]{{1400,1800},{1400,1800},{1400},{1400},{0,4431.9,2720.45,1979.22,1583.37,3170.63,3069.73,2980.47,2904.15,2825.24,2764.44,2708.81,2650.6,2605.32,2562.63,2517.36,2481.14,2447.5,2409.99,2381.53,2353.07,2322.02,2297.45,2274.16,2252.17,2227.59,2206.89,2187.49},{0,4757.89,3046.44,2307.79,1919.71,3495.33,3407.36,3332.33,3266.36,3201.68,3152.52,3109.83,3064.55,3029.63,2995.99,2959.77,2933.9,2908.03,2880.86,2861.46,2842.05,2818.77,2800.66,2783.84,2765.73,2751.5,2739.86,2729.51},{0,4431.9,2728.22,2001.21,1682.98,3337.51,3265.06,3200.38,3147.34,3093.01,3056.79,3021.87,2983.06,2954.6,2937.78,2915.79,2901.56,2893.8,2878.27,2869.22,2860.16,2845.93,2836.88,2827.82,2818.77,2805.83,2796.78,2787.72},{0,4757.89,3046.44,2306.5,1909.36,3455.22,3355.62,3268.94,3192.62,3115.,3055.5,3003.75,2952.01,2915.79,2882.16,2843.35,2813.59,2786.43,2754.09,2729.51,2704.93,2680.35,2660.95,2642.84,2624.73,2604.03,2589.8,2575.57},{0,4403.44,2692.,1952.05,1554.92,3147.34,3045.15,2957.18,2879.57,2800.66,2741.15,2688.11,2632.49,2588.51,2549.7,2507.01,2472.08,2442.33,2408.7,2382.82,2356.95,2328.49,2312.97,2298.74,2285.8,2271.57,2263.81,2256.05},{0,4394.38,2688.11,1958.52,1592.43,3192.62,3099.48,3023.16,2957.18,2887.33,2833.,2785.14,2733.39,2697.17,2670.,2638.96,2616.97,2594.97,2569.1,2549.7,2530.29,2507.01,2490.19,2475.96,2463.03,2446.21,2434.57,2422.93},{0,4431.9,2720.45,1979.22,1583.37,3170.63,3069.73,2980.47,2904.15,2825.24,2764.44,2710.11,2653.19,2609.2,2567.81,2522.53,2487.61,2453.97,2417.75,2388.,2360.83,2329.79,2305.21,2284.51,2265.11,2244.41,2231.47,2218.54},{0,4431.9,2720.45,1979.22,1583.37,3173.22,3073.61,2986.94,2911.91,2835.59,2776.08,2723.04,2671.3,2637.66,2607.91,2574.28,2548.41,2522.53,2494.07,2470.79,2450.09,2425.51,2408.7,2393.17,2377.65,2358.24,2346.6,2334.96},{0,6627.15,3386.66,2319.44,1839.51,3292.23,3204.26,3169.34,3143.46,3122.77,3109.83,3096.89,3074.9,3060.67,3046.44,3025.75,3011.52,2997.29,2977.88,2963.65,2950.72},{0,4422.84,2711.4,1970.16,1573.03,3162.87,3060.67,2972.71,2895.09,2818.77,2759.26,2706.23,2649.31,2605.32,2563.93,2519.95,2485.02,2452.68,2416.46,2386.7,2366.01,2344.02,2327.2,2311.68,2296.15,2275.45,2263.81,2250.88},{0,4431.9,2720.45,1979.22,1592.43,3213.32,3134.41,3065.85,3010.22,2949.42,2909.32,2873.1,2830.41,2799.36,2769.61,2735.98,2710.11,2685.53,2657.07,2635.08,2614.38,2592.39,2579.45,2566.52,2553.58,2538.06,2526.41,2514.77},{0,4509.51,3049.03,2450.09,2173.26,3697.13,3640.21,3588.46,3540.6,3487.56,3447.46,3408.65},{0,4512.1,3052.91,2453.97,2178.43,3702.3,3644.09,3592.35,3544.48,3490.15,3450.05,3411.24},{0,4129.19,2751.5,2190.08,1971.46,3603.99,3557.42,3513.44,3472.04,3424.18},{0,4380.15,2818.77,2249.58,1958.52,3522.49,3459.1,3415.12,3382.78,3342.68,3312.93,3285.76,3250.83,3226.25,3201.68,3171.92,3149.93,3129.23},{0,4478.47,2774.79,2051.66,1737.31,3390.54,3311.63,3244.37,3183.57,3120.18,3080.08,3045.15,3005.05,2975.3,2949.42,2919.67,2900.27,2882.16,2857.58,2845.93,2835.59,2822.65,2813.59,2805.83,2796.78,2785.14,2776.08,2768.32},{0,4365.92,2659.66,1935.24,1591.14,3283.17,3210.73,3146.05,3089.13,3028.33,2983.06,2944.25,2906.73,2880.86,2854.99,2825.24,2805.83,2787.72,2767.02,2752.79,2738.57,2721.75,2713.99,2707.52,2702.34,2693.29,2688.11,2682.94},{0,4534.09,3080.08,2474.67,2208.19,3728.17,3668.67,3613.04,3563.89,3508.26,3465.57},{0,4637.58,3190.03,2651.89,3849.77},{0,4333.58,2698.46,2108.58,1842.1,3429.35,3362.08,3306.46,3263.77,3217.2,3193.91,3174.51,3147.34,3129.23,3109.83,3085.25,3068.43,3051.62,3029.63,3012.81,2997.29,2977.88,2963.65,2949.42},{0,3773.45,2439.74,2038.72,3597.52},{0,4504.34,3077.49,2570.4,3813.55},{0,4253.38,2742.45,2240.53,2042.6,3668.67,3614.34,3565.18,3519.9,3468.16},{0,4244.32,2829.12,2329.79,3730.76,3669.96},{0,3514.73,1988.27,1490.23,1267.73,3038.68,2997.29,2966.24,2957.18,2948.13,2949.42,2946.84,2935.19,2930.02,2923.55,2909.32,2901.56,2892.5,2878.27,2869.22},{0,4431.9,2725.63,2033.55,1699.8,3510.85,3474.63,3439.7,3404.77,3363.38,3332.33,3302.58,3267.65,3240.48,3215.91,3186.15,3162.87,3140.88},{0,3990.78,2545.82,2077.53,1895.13,3597.52,3552.24,3509.55,3468.16,3420.3},{0,4478.47,3076.2,2464.32,1734.73,3389.25,3311.63,3246.95,3197.8,3144.76,3105.95,3069.73,3032.21,3008.93,2986.94,2962.36,2950.72,2939.07,2922.26,2911.91,2900.27,2884.74,2874.39,2862.75,2852.4,2838.17,2827.82,2817.48},{0,4431.9,2737.27,2027.08,1717.91,3372.43,3297.4,3231.43,3182.27,3130.53,3090.43,3056.79,3019.28,2990.82,2967.53,2944.25,2930.02,2917.08,2897.68,2887.33,2878.27,2862.75,2852.4,2843.35,2833.,2820.06,2809.71,2800.66},{0,3939.03,2443.62,1943.,1734.73,3434.53,3407.36,3377.61,3349.15,3311.63,3284.47,3258.6,3226.25},{0,3950.67,2693.29},{0,4281.84,2571.69,1830.45,1433.32,3041.27,2940.37,2851.11,2774.79,2695.88,2635.08,2580.75,2523.83,2479.84,2438.45,2394.47,2359.54,2327.2,2290.98,2262.52,2234.06,2204.31,2179.73,2157.74,2140.92,2122.81,2109.87,2098.23},{0,4356.87,2645.43,1918.42,1534.22,3227.55,3155.11,3094.31,3041.27,2983.06,2939.07,2898.97,2854.99,2821.36,2792.9,2764.44,2745.03,2725.63,2701.05,2685.53,2671.3,2651.89,2640.25,2629.9,2619.55,2605.32,2596.27,2592.39},{0,4356.87,2646.72,1922.3,1547.15,3250.83,3180.98,3118.89,3063.26,3003.75,2958.48,2918.38,2874.39,2845.93,2822.65,2794.19,2772.2,2752.79,2732.1,2715.28,2702.34,2685.53,2673.88,2660.95,2654.48,2644.13,2641.54,2637.66},{0,4422.84,2725.63,2030.96,1734.73,3381.49,3302.58,3234.02,3177.1,3125.35,3086.55,3050.32,3014.1,2986.94,2964.95,2936.49,2919.67,2908.03,2892.5,2883.45,2873.1,2858.87,2848.52,2839.47,2829.12,2816.18,2805.83,2796.78},{0,3482.39,1990.86,1513.52,1281.96,3050.32,3021.87,3006.34,3010.22,3001.17,2998.58,2992.11,2977.88,2970.12,2961.07,2944.25,2933.9,2923.55,2908.03}};
        this.garbage_production[20] = 0;
        this.garbage_production[65] = 0;   
        this.garbage_production[129] = 0;   
        
        //Added to increase the cost of small incinerators
        for(int i = 4; i < this.possible_capacities.length; i++) {
            for(int j = 0; j < this.possible_capacities[i].length; j++) {
                if(this.possible_capacities[i][j] <= 40000) {
                    this.possible_prices[i][j] = this.possible_prices[i][j] * 1.5;
                }
            }
        }
        
        this.locations = new int[this.facility_count];
        for(int i = 0; i < this.locations.length; i++) {
            this.locations[i] = this.incinerator_indexes[this.use_incinerator_indexes[i]];
        }
        
        String location = "/adjM_new.csv";
        URL resource = Cec2015.class.getResource(location);
        File fpt = null;
        try {
            fpt = Paths.get(resource.toURI()).toFile();
        } catch (URISyntaxException ex) {
            Logger.getLogger(SpalovnyCR_2.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        BufferedReader br = null;
	String line = "";
	String cvsSplitBy = ",";
        int rowIt = 0;

	try {

		br = new BufferedReader(new FileReader(fpt));
		while ((line = br.readLine()) != null) {

		        // use comma as separator
			String[] row = line.split(cvsSplitBy);
                        
                        for(int columnIt = 0; columnIt < row.length; columnIt++) {
                            this.adjM[rowIt][columnIt] = Double.parseDouble(row[columnIt]);
                        }
                        rowIt++;

		}

	} catch (FileNotFoundException e) {
            Logger.getLogger(Spalovny_projekt.class.getName()).log(Level.SEVERE, null, e);
	} catch (IOException e) {
            Logger.getLogger(Spalovny_projekt.class.getName()).log(Level.SEVERE, null, e);
	} finally {
		if (br != null) {
			try {
				br.close();
			} catch (IOException e) {
                            Logger.getLogger(SpalovnyCR_2.class.getName()).log(Level.SEVERE, null, e);
			}
		}
	}
        
    }

    @Override
    public String name() {
        return "Projekt_Spaloven_CR";
    }
    
    /**
     * Method evaluates the quality of a solution
     * 
     * @param vector
     * @return 
     */
    @Override
    public double fitness(double[] vector) {
        
        if(vector.length != (this.facility_count+this.producent_count)) {
            return Math.pow(10, 30);
        }
        
        double fitness = 0;
        
        //Locations of facilities
//        int[] locations = this.incinerator_indexes.clone();
//        int sum = 0;
        List<List<Integer>> facility_nodes = new ArrayList<>();
        for(int i = 0; i < facility_count; i++) {
            facility_nodes.add(new ArrayList<>());
//            locations[i] = (((int) (vector[i] * number_of_cities[i])) % number_of_cities[i]) + sum;
        }
        
        //Capacities of facilities
        double capacities[] = new double[this.facility_count];
        double costs[] = new double[this.facility_count];
        double capacity_sum = 0;
        for(int i = 0; i < this.facility_count; i++){
            capacities[i] = possible_capacities[this.use_incinerator_indexes[i]][((int) (vector[i] * possible_capacities[this.use_incinerator_indexes[i]].length)) % possible_capacities[this.use_incinerator_indexes[i]].length];
            if(i == 0) {
                switch(((int) (vector[i] * possible_capacities[this.use_incinerator_indexes[i]].length)) % possible_capacities[this.use_incinerator_indexes[i]].length) {
                    case 0:
                        this.garbage_production[0] = 111456.2;
                        break;
                    default:
                        this.garbage_production[0] = 0;
                }
            }
            costs[i] = possible_prices[this.use_incinerator_indexes[i]][((int) (vector[i] * possible_prices[this.use_incinerator_indexes[i]].length)) % possible_prices[this.use_incinerator_indexes[i]].length];
            capacity_sum += capacities[i];
        }
        
        double prod = 0;
        for(int i = 0; i < this.use_producent_indexes.length; i++) {
            prod += this.garbage_production[this.use_producent_indexes[i]];
        }
        this.production_sum = prod;
        
        //Capacity is not enough
        if(capacity_sum < production_sum){
            return Math.pow(10, 30);
        }
        
        //Where to go from nodes
        int facility_index;
        for(int i = facility_count; i < vector.length; i++) {
            if(this.garbage_production[this.use_producent_indexes[i - facility_count]] == 0){
                facility_index = ((int) (vector[i] * facility_count)) % facility_count;
                switch(this.use_producent_indexes[i - facility_count]) {
                    case 0: case 20: case 65: case 129:
                        for(int j = 0; j < this.locations.length; j++) {
                            if(this.locations[j] == this.use_producent_indexes[i - facility_count]) {
                                facility_index = j;
                                break;
                            }
                        }
                        break;
                    default:
                        facility_index = ((int) (vector[i] * facility_count)) % facility_count;
                }
            }
            else{
                facility_index = ((int) (vector[i] * facility_count)) % facility_count;
            }
            facility_nodes.get(facility_index).add(this.use_producent_indexes[i - facility_count]);
        }
        
        //Chceck capacity of single facilities and if not over, add remaining capacity to fitness
        double garbage_sum;
        double a,b,c,x,y,z;
        for(int i = 0; i < facility_count; i++) {
            garbage_sum = 0;
            for(Integer node_index : facility_nodes.get(i)){
                garbage_sum += garbage_production[node_index];
            }
            if(garbage_sum >= capacities[i]){
                fitness += (garbage_sum - capacities[i])*overused_penalty; 
//                return Math.pow(10, 30);
            }
            else {
                
//                a = this.penalization_koeficients[i][0];
//                b = this.penalization_koeficients[i][1];
//                c = this.penalization_koeficients[i][2];
//                
//                switch(this.use_incinerator_indexes[i]) {
//                    case 0:
//                        x = capacities[i] + existing_fac_production[0];
//                        garbage_sum += existing_fac_production[0];
//                        break;
//                    case 20:
//                        x = capacities[i] + existing_fac_production[20];
//                        garbage_sum += existing_fac_production[20];
//                        break;
//                    case 65:
//                        x = capacities[i] + existing_fac_production[65];
//                        garbage_sum += existing_fac_production[65];
//                        break;
//                    case 129:
//                        x = capacities[i] + existing_fac_production[129];
//                        garbage_sum += existing_fac_production[129];
//                        break;
//                    default:
//                        x = capacities[i];  
//                        
//                }
//                
//                x = x/1000.0;
//                y = (x - garbage_sum/1000.0)/x;
//                z = 1.0/(a + (b/x) + (c/y));
//                
//                fitness += z;
                fitness += (capacities[i] - garbage_sum)*unused_penalty;
            }
        }
        
        //Compute the distances and update the fitness
//        Vertex[] vertices;
        double pathe_length;
        for(int i = 0; i < facility_count; i++) {
            
//            vertices = Dijsktra.getShortestPathsFromAdjacencyMatrix(adjM, this.locations[i]);
            for(Integer node_index : facility_nodes.get(i)) {
                pathe_length = adjM[node_index.intValue()][this.locations[i]];
//                pathe_length = vertices[node_index].minDistance;
                if(pathe_length == Double.POSITIVE_INFINITY){
                    return Math.pow(10, 30);
                }
                fitness += (path_penalty * pathe_length * garbage_production[node_index] + garbage_production[node_index] * costs[i]);
            }
            
        }
        
        return fitness;
    }
    
    /**
     * Method returns the String output for Mathematica
     * 
     * @param vector
     * @return 
     */
    public Map<String, List> getOutput(double[] vector) {
        
        if(vector.length != (this.facility_count+this.producent_count)) {
            return null;
        }
        
        Map<String, List> map = new HashMap<>();
        List<Integer> facility_list = new ArrayList<>();
        double[] capacity_add_existing = new double[4];
        
        double fitness = 0;
        
        //Locations of facilities
//        int[] locations = this.incinerator_indexes.clone();
//        int sum = 0;
        List<List<Integer>> facility_nodes = new ArrayList<>();
        for(int i = 0; i < facility_count; i++) {
            facility_nodes.add(new ArrayList<>());
            facility_list.add(this.locations[i]);
        }
        
        map.put("facilities", facility_list);
        
        List<Double> facility_capacities = new ArrayList<>();
        
        //Capacities of facilities
        double capacities[] = new double[facility_count];
        double costs[] = new double[facility_count];
        double capacity_sum = 0;
        for(int i = 0; i < facility_count; i++){
            capacities[i] = possible_capacities[this.use_incinerator_indexes[i]][((int) (vector[i] * possible_capacities[this.use_incinerator_indexes[i]].length)) % possible_capacities[this.use_incinerator_indexes[i]].length];
            if(i == 0) {
                switch(((int) (vector[i] * possible_capacities[this.use_incinerator_indexes[i]].length)) % possible_capacities[this.use_incinerator_indexes[i]].length) {
                    case 0:
                        this.garbage_production[0] = 111456.2;
                        capacity_add_existing[0] = 310000;
                        break;
                    default:
                        this.garbage_production[0] = 0;
                        capacity_add_existing[0] = 421456.2;
                }
            }
            facility_capacities.add(capacities[i]);
            costs[i] = possible_prices[this.use_incinerator_indexes[i]][((int) (vector[i] * possible_prices[this.use_incinerator_indexes[i]].length)) % possible_prices[this.use_incinerator_indexes[i]].length];
            capacity_sum += capacities[i];
        }
        
        map.put("capacities", facility_capacities);
        
        double prod = 0;
        for(int i = 0; i < this.use_producent_indexes.length; i++) {
            prod += this.garbage_production[this.use_producent_indexes[i]];
        }
        this.production_sum = prod;
        
        //Capacity is not enough
        if(capacity_sum < production_sum){
            return null;
        }
        
        //Where to go from nodes
        int facility_index;
        for(int i = facility_count; i < vector.length; i++) {
            if(this.garbage_production[this.use_producent_indexes[i - facility_count]] == 0){
                facility_index = ((int) (vector[i] * facility_count)) % facility_count;
                switch(this.use_producent_indexes[i - facility_count]) {
                    case 0:
                        for(int j = 0; j < this.locations.length; j++) {
                            if(this.locations[j] == this.use_producent_indexes[i - facility_count]) {
                                facility_index = j;
                                break;
                            }
                        }
                        break;
                    case 20:
                        for(int j = 0; j < this.locations.length; j++) {
                            if(this.locations[j] == this.use_producent_indexes[i - facility_count]) {
                                facility_index = j;
                                break;
                            }
                        }
                        capacity_add_existing[1] = 119805.75;
                        break;
                    case 65:
                        for(int j = 0; j < this.locations.length; j++) {
                            if(this.locations[j] == this.use_producent_indexes[i - facility_count]) {
                                facility_index = j;
                                break;
                            }
                        }
                        capacity_add_existing[2] = 50333.33;
                        break;
                    case 129:
                        for(int j = 0; j < this.locations.length; j++) {
                            if(this.locations[j] == this.use_producent_indexes[i - facility_count]) {
                                facility_index = j;
                                break;
                            }
                        }
                        capacity_add_existing[3] = 60292.82;
                        break;
                    default:
                        facility_index = ((int) (vector[i] * facility_count)) % facility_count;
                }
            }
            else{
                facility_index = ((int) (vector[i] * facility_count)) % facility_count;
            }
            facility_nodes.get(facility_index).add(this.use_producent_indexes[i - facility_count]);
        }
        
        for(int i = 0; i < facility_nodes.size(); i++) {
            map.put("facility[[" + (i+1) + "]]", facility_nodes.get(i));
        }
        
        facility_capacities = new ArrayList<>();
        //Chceck capacity of single facilities and if not over, add remaining capacity to fitness
        double garbage_sum;
        double a,b,c,x,y,z;
        for(int i = 0; i < facility_count; i++) {
            garbage_sum = 0;
            for(Integer node_index : facility_nodes.get(i)){
                garbage_sum += garbage_production[node_index];
            }
            facility_capacities.add(garbage_sum);
            if(garbage_sum >= capacities[i]){
//                return null;
                fitness += (garbage_sum - capacities[i])*overused_penalty;
            }
            else {
//                a = this.penalization_koeficients[i][0];
//                b = this.penalization_koeficients[i][1];
//                c = this.penalization_koeficients[i][2];
//                
//                switch(this.use_incinerator_indexes[i]) {
//                    case 0:
//                        x = capacities[i] + existing_fac_production[0];
//                        garbage_sum += existing_fac_production[0];
//                        break;
//                    case 20:
//                        x = capacities[i] + existing_fac_production[20];
//                        garbage_sum += existing_fac_production[20];
//                        break;
//                    case 65:
//                        x = capacities[i] + existing_fac_production[65];
//                        garbage_sum += existing_fac_production[65];
//                        break;
//                    case 129:
//                        x = capacities[i] + existing_fac_production[129];
//                        garbage_sum += existing_fac_production[129];
//                        break;
//                    default:
//                        x = capacities[i];  
//                        
//                }
//                
//                x = x/1000.0;
//                y = (x - garbage_sum/1000.0)/x;
//                z = 1.0/(a + (b/x) + (c/y));
//                
//                fitness += z;
                
                fitness += (capacities[i] - garbage_sum)*unused_penalty;
            }
        }
        
        map.put("usedCapacities", facility_capacities);
        
        for(int i = 0; i < this.locations.length; i++) {
            
            switch(this.locations[i]) {
                
                case 0:
                    map.get("capacities").set(i, capacities[i] + capacity_add_existing[0]);
                    map.get("usedCapacities").set(i, facility_capacities.get(i) + capacity_add_existing[0]);
                    break;
                case 20:
                    map.get("capacities").set(i, capacities[i] + capacity_add_existing[1]);
                    map.get("usedCapacities").set(i, facility_capacities.get(i) + capacity_add_existing[1]);
                    break;
                case 65:
                    map.get("capacities").set(i, capacities[i] + capacity_add_existing[2]);
                    map.get("usedCapacities").set(i, facility_capacities.get(i) + capacity_add_existing[2]);
                    break;
                case 129:
                    map.get("capacities").set(i, capacities[i] + capacity_add_existing[3]);
                    map.get("usedCapacities").set(i, facility_capacities.get(i) + capacity_add_existing[3]);
                    break;
                default:
                    
                
            }
            
        }
        
        //Compute the distances and update the fitness
//        List<List<Vertex>> paths;
        List<List<Integer>> paths;
        List pp;       
//        Dijsktra.Vertex[] vertices;
        double path_length;
        for(int i = 0; i < facility_count; i++) {
            
            paths = new ArrayList<>();
            
//            vertices = Dijsktra.getShortestPathsFromAdjacencyMatrix(adjM, this.locations[i]);
            for(Integer node_index : facility_nodes.get(i)) {
                path_length = this.adjM[node_index][this.locations[i]];
//                path_length = vertices[node_index].minDistance;
                if(path_length == Double.POSITIVE_INFINITY){
                    return null;
                }
                fitness += (path_penalty * path_length * garbage_production[node_index] + garbage_production[node_index] * costs[i]);
//                paths.add(Dijsktra.getShortestPathTo(vertices[node_index]));
                pp = new ArrayList<>();
                if(this.locations[i] != node_index) {
                    pp.add(this.locations[i]);
                    pp.add(node_index);
                }
                else {
                    pp.add(node_index);
                }
                paths.add(pp);
            }
            
            map.put("span[[" + (i+1) + "]]", paths);
            
        }
        
        return map;
    }
    
    

    @Override
    public double fitness(Individual individual) {
        
        
        return fitness(individual.vector);
    }

    @Override
    public void constrain(Individual individual) {
        IndividualUtil.randIfOutOfBounds(individual, 0, 1);
    }

    @Override
    public double[] generateTrial(int dim) {
        double[] vector = new double[dim];
        Random rnd = new UniformRandom();
//        for (int i = 0; i < 39; i++) vector[i] = rnd.nextDouble(0.9, 0.95);
        for (int i = 0; i < dim; i++) vector[i] = rnd.nextDouble(0, 1);
        return vector;
    }

    @Override
    public double fixedAccLevel() {
        return 10^-7;
    }

    @Override
    public double optimum() {
        return 0;
    }

    @Override
    public double max(int dim) {
        return 1;
    }

    @Override
    public double min(int dim) {
        return 0;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        
        int[] use_prod = new int[]{18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38};
        int[] use_inc = new int[]{1,6,34};
        
        Spalovny_projekt sp = new Spalovny_projekt(use_inc, use_prod);
        double[] vector = new double[21+3];
//        double[] vector = new double[206+40];
//        vector = new double[]{0.512692774298431, 0.2924769116863042, 0.2686702206749244, 0.16311875468244313, 0.9755436009598367, 0.16415288036055467, 0.14578670971639587, 0.5599506427089997, 0.7731930931743155, 0.7548433888099649, 0.8940173938314255, 0.6687786408236757, 0.024679447275609778, 0.6931741156360816, 0.3296220486959611, 0.04233747025411938, 0.049841925791015124, 0.0398836874412093, 0.04681258835132385, 0.17551916653812344, 0.1465899298391599, 0.07424437456106286, 0.19839039908725348, 0.16244140486283368, 0.09049650310040913, 0.07322848450238179, 0.09118352053855798, 0.1236437455426159, 0.23009399551439236, 0.04600251300056438, 0.025402848875254236, 0.15105989768805142, 0.017877971073041003, 0.3078198805577636, 0.26920429659057, 0.8351665069585211, 0.15081414106268926, 0.2735843925122088, 0.15797129392120707, 0.23125602219668936, 0.9593321143987651, 0.48346801214817725, 0.2333156781533669, 0.24714472852851846, 0.2640353611483128, 0.028292822617577595, 0.24719293941661477, 0.07210547164394183, 0.23726754969125935, 0.23775668129417593, 0.058133190247592205, 0.4825614272179611, 0.23175836631708732, 0.24624838675045166, 0.24503471362487755, 0.24459691531601974, 0.48733505114815057, 0.041470920055911915, 0.22354170566215742, 0.20509778990404717, 0.21935912478225728, 0.2644554532280986, 0.028352510839826206, 0.7015510289892826, 0.17467625663976322, 0.9751062994615796, 0.047420778754236996, 0.1739300445152714, 0.7125681041276253, 0.15973299154239687, 0.026907640819022055, 0.16375839113654236, 0.04989505704395364, 0.2151704190695416, 0.2723687017578956, 0.8274838970822018, 0.20776076272222432, 0.20677964897376833, 0.20060320906777146, 0.2776267028972164, 0.11828932459529948, 0.29242631884281955, 0.12216186193967889, 0.11849090998333413, 0.28709425127282984, 0.2920981837847882, 0.2727334456075564, 0.25014601632975914, 0.2654086597674054, 0.25818218647611035, 0.19727071619873401, 0.25677490181764806, 0.34331885891811453, 0.25793482731317163, 0.36150154195192696, 0.07113150664195665, 0.0312834314335039, 0.2702790617155779, 0.20330591878328655, 0.3559379762230186, 0.27282417804206105, 0.09473164185735289, 0.3495967996421874, 0.1196281611340359, 0.25849868216093874, 0.2749729408343212, 0.32509789024724717, 0.05463540307471257, 0.27117452800126096, 0.10584136401186753, 0.11814461436187672, 0.9891093874626774, 0.8988689922247776, 0.8834064190643365, 0.8995215238380192, 0.7230578226862983, 0.8885491396017642, 0.8824687983486312, 0.9117381906996094, 0.8860854868521666, 0.990097223213985, 0.8899707370581852, 0.8966819988012282, 0.9765841058696293, 0.8892230239098088, 0.8949586367846931, 0.9822135039587188, 0.8889158662069567, 0.8965403882124314, 0.9305475283527465, 0.05537191187780725, 0.8955456435781447, 0.8837528185982853, 0.22099977033013307, 0.875523177208085, 0.7132524984106641, 0.02680755241363253, 0.2112756603831952, 0.21564977332149093, 0.18116288124586466, 0.19399706697492652, 0.9511448173455567, 0.21334897036615896, 0.18505628290511728, 0.21901672450518805, 0.21812644276700102, 0.25066489239752804, 0.2719305362834167, 0.2570949564759615, 0.26996794615603736, 0.26249173485148314, 0.03604235199967196, 0.2704790398357266, 0.7224354148345277, 0.3500632783602871, 0.2625762934403036, 0.14905127642793484, 0.2747370788189456, 0.2604686297127987, 0.21754715129220892, 0.25992152294075455, 0.1145811844658087, 0.4913963963754592, 0.4807855211296648, 0.11286310218145487, 0.11165338176654788, 0.28924593877033783, 0.49418352988176895, 0.7863922259605366, 0.13117048371347548, 0.009220147477381202, 0.28815918828472553, 0.7935523962982253, 0.10424097058088133, 0.24945506851828517, 0.12284882663867377, 0.23464423416940783, 0.33043285387235943, 0.11575441989954, 0.14373802739470593, 0.12227934603994174, 0.2639523512414452, 0.7874704862541906, 0.7818671728113696, 0.10993353608437362, 0.24551369509336446, 0.33036921442365214, 0.2617007253037027, 0.06307893019725844, 0.2593115514131705, 0.35678862341778894, 0.11237728879864761, 0.10608309961566029, 0.11834908039465179, 0.10611911051921397, 0.24870073228826511, 0.3448579910529704, 0.035519303774232014, 0.11897974724295643, 0.12098074244248587, 0.11991484769044439, 0.0645460330921272, 0.32649013265751237, 0.2950627541722259, 0.28834403633041394, 0.28374325726880084, 0.28263648925042467, 0.29875394826346036, 0.3462167204163611, 0.08434118396356821, 0.32988365397373437, 0.2899603997186224, 0.34448086921700355, 0.3381402794952317, 0.3419133104727118, 0.34361077913319765, 0.33823445292713866, 0.07204526102158187, 0.029977289840952465, 0.2578770585658362, 0.0355148785477281, 0.2659889958537804, 0.22696858227129055, 0.23992889965644013, 0.03520624055789015, 0.03480345221135593, 0.040200499972846804, 0.2736932648023858, 0.26447662462856963, 0.0456353013684085, 0.02737847120458063, 0.25678033260159305, 0.5980633848554617, 0.9940979601024407, 0.22287807901706758, 0.22294096466489532, 0.5118282602651856, 0.20147592769589737, 0.8904474056500902, 0.2046348156660907, 0.84504580964502, 0.5037764997828875, 0.22301446109731354, 0.9846582734382381, 0.8804815839688822, 0.5028071269335932};
        vector = new double[]{0.6997802473095035, 0.025868474610718575, 0.24054420884852562, 0.018355497961072317, 0.19662870477174005, 0.3696497156253889, 0.20733614770651118, 0.0874054724533454, 0.053497351780826985, 0.0367472895137466, 0.31638760375083375, 0.05086792575992886, 5.776633046097324E-4, 0.16751448102044675, 0.24408066958367317, 0.2310664638311891, 0.23198508051123795, 0.21938962782376917, 0.2675349465824178, 0.054780280729695374, 0.29292261676469433, 0.031004951518843096, 0.03375384219976915, 0.12410950899608247};

        System.out.println(sp.fitness(vector));
        
        Map<String, List> map = sp.getOutput(vector);
            
        System.out.println("=================================");
        String line;

        if(map == null) {
            return;
        }
        
        if(map != null){
            for(Map.Entry<String,List> entry : map.entrySet()){
                line = "";
                System.out.print(entry.getKey() + " = ");
                line += "{";
//                System.out.print("{");
                for(int pup = 0; pup < entry.getValue().size(); pup++){
//                    System.out.print(entry.getValue().get(pup));
                    line += entry.getValue().get(pup);
                    if(pup != entry.getValue().size()-1){
//                       System.out.print(","); 
                       line += ",";
                    }
                }
//                System.out.println("}");
                line += "};";
                line = line.replace("[", "{");
                line = line.replace("]", "}");
                System.out.println(line);

            }
        }

        System.out.println("=================================");
        
    }
    
}
