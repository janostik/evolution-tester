
package model.tf.nwf;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.Individual;
import model.tf.Cec2015;
import model.tf.TestFunction;
import util.Dijsktra;
import util.Dijsktra.Vertex;
import util.IndividualUtil;
import util.random.Random;
import util.random.UniformRandom;

/**
 *
 * This class represents the basic solution of incinerator facility locations
 * Locations and capacities based on the projected incinerators.
 * 
 * @author wiki on 31/01/2017
 */
public class Spalovny_projekt implements TestFunction {

    double[][] adjM;
    double[] garbage_production;
    double[] existing_fac_production;
    double production_sum;
    int facility_count;
    int producent_count;
    int[] number_of_cities;
    double[] capacity_options;
    //40 cities
    //cities with incenerators - Praha [0], Brno [20], Liberec [65], Plzen [129]
    //cities of possible incenerators - Melnik [149], Kolin [145], Hodonin [23], Olomouc [99], 
//    Prerov [101], Ceske Budejovice [2], Pardubice [114], Most [170], 
    //Jihlava[182], Usti nad Labem[175], Trutnov[59], Ostrov[44], Chropyne[195], 
//    Valasske Mezirici[202], Nachod[54], Strakonice[11], Zlin[205], Prostejov[100], 
//    Frantiskovy Lazne[40], Zdar nad Sazavou[192]
    //Cheb[40], Trebic[190], Varnsdorf[176], Bruntal[73], Vsetin[204], Otrokovice[197], 
//    Klatovy[125], Pribram[155], Detmarovice[81], Uherske Hradiste[199], Znojmo[37], 
//    Ostrava[89], Havirov[78], Karvina[81], 
    //Frydek-Mistek[76], Opava[87]
    double[][] possible_capacities;
    double[][] possible_prices;
    double[][] penalization_koeficients;
    int[] incinerator_indexes;
    double unused_penalty = 500;
    double overused_penalty = 100_000_000;
    double path_penalty = 5;
    
    int[] use_incinerator_indexes;
    int[] use_producent_indexes;
    int[] locations;
    
    public Spalovny_projekt() {

        this.use_incinerator_indexes = new int[40];
        for(int i = 0; i < this.use_incinerator_indexes.length; i++) {
            this.use_incinerator_indexes[i]=i;
        }
        
        this.use_producent_indexes = new int[206];
        for(int i = 0; i < this.use_producent_indexes.length; i++) {
            this.use_producent_indexes[i]=i;
        }
        
        this.existing_fac_production = new double[]{421456.20,4618.37,40328.62,10267.64,6054.39,12617.38,5237.12,4892.46,11682.76,8108.45,7039.16,12327.33,26770.87,5010.74,8555.13,4609.10,5111.39,3988.39,14070.61,14343.59,119805.75,19561.32,4147.45,18887.91,10201.53,8107.61,6250.03,16045.27,4836.13,6307.23,4056.93,6973.76,5520.20,19984.11,8029.20,9128.13,14495.34,24822.35,10501.02,8511.10,16835.81,25171.38,3399.31,9079.82,7454.33,21032.18,4472.56,7215.61,6201.28,6119.69,51330.69,4445.92,15210.71,6734.93,15135.70,2793.67,3637.41,4976.93,9159.88,21280.52,9544.94,24765.51,8079.11,14040.02,5842.87,50333.33,9278.74,5987.36,6045.85,8719.04,3054.00,6051.64,11312.84,9453.26,8867.39,5051.98,32099.15,9986.36,27737.28,11916.22,5641.20,21873.89,16721.48,5193.34,12028.95,12322.73,5130.85,34858.49,12588.02,82707.62,1259.73,14886.78,7083.38,10695.23,9435.95,2755.95,5084.76,7126.47,6041.74,50918.85,29322.16,26006.27,8264.66,23361.72,7493.42,10543.17,5522.79,5866.35,4096.67,23156.53,2795.28,5124.32,6425.70,7346.90,35345.02,4735.35,8529.37,7744.97,8204.27,8258.16,8342.36,3092.94,9674.67,4317.68,4435.00,15640.78,8605.63,2680.56,13789.02,60292.82,6006.31,17997.80,6725.98,5591.85,7701.58,11773.66,21185.92,17639.47,41796.62,7931.37,44712.79,10010.61,7328.53,11285.26,34601.82,34060.59,12471.84,20311.27,8569.94,17996.19,36791.19,4792.82,14507.71,16659.05,12347.36,23618.15,18237.74,24668.06,7006.08,12956.23,10422.35,4519.41,5779.48,22885.43,22103.19,14204.32,23938.29,13171.29,13841.54,9880.92,21436.48,6069.16,7595.05,10984.90,35240.52,29269.43,7066.70,9149.82,4840.89,17531.07,5802.00,5711.93,25640.05,5779.25,2753.40,4690.38,3137.53,13686.97,5994.54,3524.22,19105.03,10862.11,12096.55,4842.76,7432.78,18157.25,5126.45,10345.50,10415.80,24179.22,15164.39,5119.98,12566.70,4706.77,14186.38,27447.64};
        this.penalization_koeficients = new double[][]{{1.e9,1.e9,1.e9},{1.e9,1.e9,1.e9},{1.e9,1.e9,1.e9},{1.e9,1.e9,1.e9},{-4.6332e-9,1.15063e-6,3.40002e-9},{-6.8857e-9,1.28464e-6,6.75326e-9},{-7.6378e-9,8.61982e-7,9.3877e-9},{-5.8807e-9,1.27062e-6,5.14842e-9},{-4.5162e-9,1.0308e-6,3.79009e-9},{-4.8986e-9,9.93745e-7,4.76961e-9},{-4.6098e-9,1.12093e-6,3.51782e-9},{-4.8482e-9,1.02995e-6,4.31959e-9},{-1.0353e-8,5.90684e-7,1.31726e-8},{-4.5722e-9,1.06072e-6,3.74732e-9},{-5.7585e-9,1.09545e-6,5.53137e-9},{-9.5885e-9,1.81632e-6,9.98701e-9},{-1.091e-8,1.95017e-6,1.06918e-8},{-1.0895e-8,1.87811e-6,1.08646e-8},{-1.0405e-8,1.40713e-6,1.15351e-8},{-7.0143e-9,9.76986e-7,8.23012e-9},{-6.5815e-9,9.73096e-7,7.37948e-9},{-1.0956e-8,2.02911e-6,1.05282e-8},{9.6443e-9,2.14395e-6,9.1834e-9},{-9.7127e-9,1.09974e-6,1.14434e-8},{-9.3212e-9,1.84887e-6,9.69177e-9},{-1.102e-8,2.28826e-6,9.88925e-9},{-1.1023e-8,2.06177e-6,1.0507e-8},{-1.1009e-8,2.21107e-6,1.00858e-8},{-1.0052e-8,7.19101e-7,1.26135e-8},{-1.1205e-8,1.59485e-6,1.19419e-8},{-1.0989e-8,1.98647e-6,1.06728e-8},{-8.1623e-9,9.50883e-7,9.76647e-9},{-7.8977e-9,9.61479e-7,9.36597e-9},{-1.0822e-8,1.52129e-6,1.1715e-8},{-9.3009e-9,2.00521e-6,9.24296e-9},{-4.2603e-9,1.03226e-6,3.27097e-9},{-6.097e-9,1.03532e-6,6.344e-9},{-6.2969e-9,1.00614e-6,6.79505e-9},{-7.7641e-9,9.59571e-7,9.20838e-9},{-1.0416e-8,7.84236e-7,1.29276e-8}};
        this.adjM = new double[206][206];
        this.garbage_production = new double[]{421456.20,4618.37,40328.62,10267.64,6054.39,12617.38,5237.12,4892.46,11682.76,8108.45,7039.16,12327.33,26770.87,5010.74,8555.13,4609.10,5111.39,3988.39,14070.61,14343.59,119805.75,19561.32,4147.45,18887.91,10201.53,8107.61,6250.03,16045.27,4836.13,6307.23,4056.93,6973.76,5520.20,19984.11,8029.20,9128.13,14495.34,24822.35,10501.02,8511.10,16835.81,25171.38,3399.31,9079.82,7454.33,21032.18,4472.56,7215.61,6201.28,6119.69,51330.69,4445.92,15210.71,6734.93,15135.70,2793.67,3637.41,4976.93,9159.88,21280.52,9544.94,24765.51,8079.11,14040.02,5842.87,50333.33,9278.74,5987.36,6045.85,8719.04,3054.00,6051.64,11312.84,9453.26,8867.39,5051.98,32099.15,9986.36,27737.28,11916.22,5641.20,21873.89,16721.48,5193.34,12028.95,12322.73,5130.85,34858.49,12588.02,82707.62,1259.73,14886.78,7083.38,10695.23,9435.95,2755.95,5084.76,7126.47,6041.74,50918.85,29322.16,26006.27,8264.66,23361.72,7493.42,10543.17,5522.79,5866.35,4096.67,23156.53,2795.28,5124.32,6425.70,7346.90,35345.02,4735.35,8529.37,7744.97,8204.27,8258.16,8342.36,3092.94,9674.67,4317.68,4435.00,15640.78,8605.63,2680.56,13789.02,60292.82,6006.31,17997.80,6725.98,5591.85,7701.58,11773.66,21185.92,17639.47,41796.62,7931.37,44712.79,10010.61,7328.53,11285.26,34601.82,34060.59,12471.84,20311.27,8569.94,17996.19,36791.19,4792.82,14507.71,16659.05,12347.36,23618.15,18237.74,24668.06,7006.08,12956.23,10422.35,4519.41,5779.48,22885.43,22103.19,14204.32,23938.29,13171.29,13841.54,9880.92,21436.48,6069.16,7595.05,10984.90,35240.52,29269.43,7066.70,9149.82,4840.89,17531.07,5802.00,5711.93,25640.05,5779.25,2753.40,4690.38,3137.53,13686.97,5994.54,3524.22,19105.03,10862.11,12096.55,4842.76,7432.78,18157.25,5126.45,10345.50,10415.80,24179.22,15164.39,5119.98,12566.70,4706.77,14186.38,27447.64};
        this.production_sum = 3011744.95;
        this.facility_count = this.use_incinerator_indexes.length;
        this.producent_count = this.use_producent_indexes.length;
        this.number_of_cities = new int[]{206, 206};
//        this.capacity_options = new double[]{250_000, 500_000, 750_000, 1_000_000, 1_500_000, 2_000_000, 2_500_000, 3_000_000, 3_500_000};
        this.incinerator_indexes = new int[]{0,20,65,129,149,145,23,99,101,2,114,170,182,175,59,44,195,202,54,11,205,100,40,192,40,190,176,73,204,197,125,155,81,199,37,89,78,81,76,87};
        this.possible_capacities = new double[][]{{0,8543.8},{120194.25,240194.25},{45666.67},{34707.18},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.},{0,10000.,20000.,30000.,80000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.},{0,10000.,20000.,30000.,80000.},{0,10000.,20000.,30000.,80000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10000.,20000.,30000.,80000.,90000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.},{0,10000.,20000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.}};
//        this.possible_prices = new double[][]{{1400,1800},{1400,1800},{1400},{1400},{0,6648,4081,2969,2375,3171,3070,2980,2904,2825,2764,2709,2651,2605,2563,2517,2481,2448,2410,2382,2353,2322,2297,2274,2252,2228,2207,2187},{0,7137,4570,3462,2880,3495,3407,3332,3266,3202,3153,3110,3065,3030,2996,2960,2934,2908,2881,2861,2842,2819,2801,2784,2766,2752,2740,2730},{0,6648,4092,3002,2524,3338,3265,3200,3147,3093,3057,3022,2983,2955,2938,2916,2902,2894,2878,2869,2860,2846,2837,2828,2819,2806,2797,2788},{0,7137,4570,3460,2864,3455,3356,3269,3193,3115,3056,3004,2952,2916,2882,2843,2814,2786,2754,2730,2705,2680,2661,2643,2625,2604,2590,2576},{0,6605,4038,2928,2332,3147,3045,2957,2880,2801,2741,2688,2632,2589,2550,2507,2472,2442,2409,2383,2357,2328,2313,2299,2286,2272,2264,2256},{0,6592,4032,2938,2389,3193,3099,3023,2957,2887,2833,2785,2733,2697,2670,2639,2617,2595,2569,2550,2530,2507,2490,2476,2463,2446,2435,2423},{0,6648,4081,2969,2375,3171,3070,2980,2904,2825,2764,2710,2653,2609,2568,2523,2488,2454,2418,2388,2361,2330,2305,2285,2265,2244,2231,2219},{0,6648,4081,2969,2375,3173,3074,2987,2912,2836,2776,2723,2671,2638,2608,2574,2548,2523,2494,2471,2450,2426,2409,2393,2378,2358,2347,2335},{0,9941,5080,3479,2759,3292,3204,3169,3143,3123,3110,3097,3075,3061,3046,3026,3012,2997,2978,2964,2951},{0,6634,4067,2955,2360,3163,3061,2973,2895,2819,2759,2706,2649,2605,2564,2520,2485,2453,2416,2387,2366,2344,2327,2312,2296,2275,2264,2251},{0,6648,4081,2969,2389,3213,3134,3066,3010,2949,2909,2873,2830,2799,2770,2736,2710,2686,2657,2635,2614,2592,2579,2567,2554,2538,2526,2515},{0,6764,4574,3675,3260,3697,3640,3588,3541,3488,3447,3409},{0,6768,4579,3681,3268,3702,3644,3592,3544,3490,3450,3411},{0,6194,4127,3285,2957,3604,3557,3513,3472,3424},{0,6570,4228,3374,2938,3522,3459,3415,3383,3343,3313,3286,3251,3226,3202,3172,3150,3129},{0,6718,4162,3077,2606,3391,3312,3244,3184,3120,3080,3045,3005,2975,2949,2920,2900,2882,2858,2846,2836,2823,2814,2806,2797,2785,2776,2768},{0,6549,3989,2903,2387,3283,3211,3146,3089,3028,2983,2944,2907,2881,2855,2825,2806,2788,2767,2753,2739,2722,2714,2708,2702,2693,2688,2683},{0,6801,4620,3712,3312,3728,3669,3613,3564,3508,3466},{0,6956,4785,3978,3850},{0,6500,4048,3163,2763,3429,3362,3306,3264,3217,3194,3175,3147,3129,3110,3085,3068,3052,3030,3013,2997,2978,2964,2949},{0,5660,3660,3058,3598},{0,6757,4616,3856,3814},{0,6380,4114,3361,3064,3669,3614,3565,3520,3468},{0,6366,4244,3495,3731,3670},{0,5272,2982,2235,1902,3039,2997,2966,2957,2948,2949,2947,2935,2930,2924,2909,2902,2892,2878,2869},{0,6648,4088,3050,2550,3511,3475,3440,3405,3363,3332,3303,3268,3240,3216,3186,3163,3141},{0,5986,3819,3116,2843,3598,3552,3510,3468,3420},{0,6718,4614,3696,2602,3389,3312,3247,3198,3145,3106,3070,3032,3009,2987,2962,2951,2939,2922,2912,2900,2885,2874,2863,2852,2838,2828,2817},{0,6648,4106,3041,2577,3372,3297,3231,3182,3131,3090,3057,3019,2991,2968,2944,2930,2917,2898,2887,2878,2863,2852,2843,2833,2820,2810,2801},{0,5909,3665,2914,2602,3435,3407,3378,3349,3312,3284,3259,3226},{0,5926,4040},{0,6423,3858,2746,2150,3041,2940,2851,2775,2696,2635,2581,2524,2480,2438,2394,2360,2327,2291,2263,2234,2204,2180,2158,2141,2123,2110,2098},{0,6535,3968,2878,2301,3228,3155,3094,3041,2983,2939,2899,2855,2821,2793,2764,2745,2726,2701,2686,2671,2652,2640,2630,2620,2605,2596,2592},{0,6535,3970,2883,2321,3251,3181,3119,3063,3004,2958,2918,2874,2846,2823,2794,2772,2753,2732,2715,2702,2686,2674,2661,2654,2644,2642,2638},{0,6634,4088,3046,2602,3381,3303,3234,3177,3125,3087,3050,3014,2987,2965,2936,2920,2908,2892,2883,2873,2859,2849,2839,2829,2816,2806,2797},{0,5224,2986,2270,1923,3050,3022,3006,3010,3001,2999,2992,2978,2970,2961,2944,2934,2924,2908}};
        
        this.possible_prices = new double[][]{{434000000,774000000},{336000000,648000000},{134400000},{133000000},{0,66478500.,81613500.,89064900.,95002200.,253650400.,276275700.,298047000.,319456500.,339028800.,359377200.,379233400.,397590000.,416851200.,435647100.,453124800.,471416600.,489500000.,506097900.,523936600.,541206100.,557284800.,574362500.,591281600.,608085900.,623725200.,639998100.,656247000.},{0,71368.4,91393200.,103850550.,115182600.,279626400.,306662400.,333233000.,359299600.,384201600.,409827600.,435376200.,459682500.,484740800.,509318300.,532758600.,557441000.,581606000.,604980600.,629521200.,653671500.,676504800.,700165000.,723798400.,746747100.,770420000.,794559400.,818853000.},{0,66478.5,81846600.,90054450.,100978800.,267000800.,293855400.,320038000.,346207400.,371161200.,397382700.,423061800.,447459000.,472736000.,499422600.,524842200.,551296400.,578760000.,604436700.,631228400.,657836800.,683023200.,709220000.,735233200.,761067900.,785632400.,811066200.,836316000.},{0,71368.4,91393200.,103792500.,114561600.,276417600.,302005800.,326894000.,351188200.,373800000.,397215000.,420525000.,442801500.,466526400.,489967200.,511803000.,534582100.,557286000.,578358900.,600492200.,622133900.,643284000.,665237500.,687138400.,708677100.,729128400.,751042000.,772671000.},{0,66051.6,80760000.,87842250.,93295200.,251787200.,274063500.,295718000.,316752700.,336079200.,356349500.,376335400.,394873500.,414161600.,433449000.,451261800.,469695200.,488466000.,505827000.,524220400.,542098500.,558837600.,578242500.,597672400.,617166000.,636039600.,656504900.,676815000.},{0,65915.7,80643300.,88133400.,95545800.,255409600.,278953200.,302316000.,325289800.,346479600.,368290000.,389919600.,410008500.,431547200.,453900000.,475012800.,497224300.,518994000.,539511000.,560934000.,581966700.,601682400.,622547500.,643749600.,665018100.,684938800.,706025300.,726879000.},{0,66478500.,81613500.,89064900.,95002200.,253650400.,276275700.,298047000.,319456500.,339028800.,359377200.,379415400.,397978500.,417472000.,436527700.,454055400.,472645900.,490794000.,507727500.,525360000.,542990900.,559149600.,576302500.,593972600.,611579700.,628434800.,647126300.,665562000.},{0,66478500.,81613500.,89064900.,95002200.,253857600.,276624900.,298694000.,320310100.,340270800.,360890400.,381225600.,400695000.,422025600.,443344700.,463370400.,484197900.,504506000.,523754700.,543573800.,563520700.,582122400.,602175000.,622224200.,641965500.,660307200.,680514000.,700488000.},{0,99407250.,101599800.,104374800.,110370600.,263378400.,288383400.,316934000.,345780600.,374732400.,404277900.,433564600.,461235000.,489707200.,517894800.,544635000.,572188800.,599458000.,625354800.,652003000.,678665600.},{0,66342600.,81342000.,88657200.,94381800.,253029600.,275460300.,297271000.,318459900.,338252400.,358703800.,378872200.,397396500.,416851200.,435868100.,453591000.,472153800.,490536000.,507456600.,525074000.,544182300.,562564800.,581800000.,601036800.,619960500.,637126000.,656504900.,675264000.},{0,66478500.,81613500.,89064900.,95545800.,257065600.,282096900.,306585000.,331124200.,353930400.,378211600.,402234000.,424561500.,447897600.,470833700.,492476400.,514920900.,537106000.,557984700.,579717600.,601307400.,622173600.,644862500.,667295200.,689466600.,710656800.,732658900.,754431000.},{0,67642650.,91470900.,110254050.,130395600.,295770400.,327618900.,358846000.,389466000.,418507200.,448169800.,477211000.},{0,67681500.,91587300.,110428650.,130705800.,296184000.,327968100.,359235000.,389892800.,418818000.,448506500.,477573600.},{0,61937850.,82545000.,98553600.,118287600.,288319200.,320167800.,351344000.,381924400.,410901600.},{0,65702250.,84563100.,101231100.,117511200.,281799200.,311319000.,341512000.,372105800.,401121600.,430680900.,460006400.,487624500.,516200000.,544285600.,570945600.,598486700.,625846000.},{0,67177050.,83243700.,92324700.,104238600.,271243200.,298046700.,324437000.,350192700.,374421600.,400410400.,426321000.,450757500.,476048000.,501401400.,525540600.,551051300.,576432000.,600091800.,626104600.,652185700.,677436000.,703397500.,729515800.,755130600.,779839200.,805063200.,830496000.},{0,65488800.,79789800.,87085800.,95468400.,262653600.,288965700.,314605000.,339804300.,363399600.,387797800.,412195000.,436009500.,460937600.,485348300.,508543200.,533107700.,557544000.,581074200.,605613800.,629871100.,653220000.,678497500.,703955200.,729631800.,754121200.,779551900.,804882000.},{0,68011350.,92402400.,111360150.,132491400.,298253600.,330180300.,361304000.,392027900.,420991200.,450524100.},{0,69563700.,95700900.,119335050.,307981600.},{0,65003700.,80953800.,94886100.,110526000.,274348000.,302587200.,330646000.,359014700.,386064000.,415208300.,444431400.,472101000.,500676800.,528671100.,555345000.,583001700.,610324000.,636222300.,662818200.,689376700.,714691200.,740912500.,766849200.},{0,56601750.,73192200.,91742400.,287801600.},{0,67565100.,92324700.,115668000.,305084000.},{0,63800700.,82273500.,100823850.,122556000.,293493600.,325290600.,356518000.,387189000.,416179200.},{0,63664800.,84873600.,104840550.,298460800.,330296400.},{0,52720950.,59648100.,67060350.,76063800.,243094400.,269756100.,296624000.,325289800.,353775600.,383424600.,412557600.,440278500.,468803200.,497003500.,523677600.,551296400.,578500000.,604436700.,631228400.},{0,66478500.,81768900.,91509750.,101988000.,280868000.,312716700.,343970000.,374524700.,403605600.,433202900.,462361200.,490147500.,518476800.,546704700.,573507000.,600945300.,628176000.},{0,59861700.,76374600.,93488850.,113707800.,287801600.,319701600.,350955000.,381497600.,410436000.},{0,67177050.,92286000.,110894400.,104083800.,271140000.,298046700.,324695000.,351758000.,377371200.,403773500.,429762200.,454831500.,481428800.,507779800.,533224800.,560636800.,587814000.,613674600.,640620200.,667062100.,692337600.,718597500.,744315000.,770148000.,794687600.,820067800.,845244000.},{0,66478500.,82118100.,91218600.,103074600.,269794400.,296766000.,323143000.,350049700.,375663600.,401755900.,427950600.,452892000.,478531200.,504480100.,529965000.,556703800.,583416000.,608512800.,635212600.,662002100.,687060000.,713100000.,739271000.,764910000.,789616800.,814815900.,840198000.},{0,59085450.,73308600.,87435000.,104083800.,274762400.,306662400.,337761000.,368406500.,397395600.,426981100.,456204000.,483937500.},{0,59260050.,80798700.},{0,64227600.,77150700.,82370250.,85999200.,243301600.,264633300.,285111000.,305226900.,323505600.,342560400.,361305000.,378574500.,396774400.,414536500.,431004600.,448312600.,465440000.,481105800.,497754400.,513833800.,529034400.,544932500.,561012400.,578048400.,594386800.,611862300.,629469000.},{0,65353050.,79362900.,86328900.,92053200.,258204000.,283959900.,309431000.,334539700.,357967200.,382079100.,405855800.,428248500.,451417600.,474793000.,497599200.,521555700.,545126000.,567220500.,590816600.,614399000.,636453600.,660062500.,683774000.,707278500.,729489600.,752918300.,777717000.},{0,65353050.,79401600.,86503500.,92829000.,260066400.,286288200.,311889000.,336958600.,360450000.,384602400.,408573200.,431158500.,455348800.,479850500.,502954200.,526718000.,550558000.,573741000.,597361600.,621538200.,644527200.,668470000.,691847000.,716709600.,740356400.,766046600.,791298000.},{0,66342600.,81768900.,91393200.,104083800.,270519200.,297232200.,323402000.,349481000.,375042000.,401251500.,427044800.,452115000.,477910400.,504041500.,528568200.,554737300.,581606000.,607425000.,634359000.,660813000.,686128800.,712130000.,738262200.,763862400.,788530400.,813690700.,839034000.},{0,52235.9,59725800.,68108400.,76917600.,244025600.,271968300.,300634000.,331124200.,360140400.,389815400.,418895400.,446682000.,475219200.,503381900.,529965000.,557441000.,584710000.,610686300.}};
        this.garbage_production[20] = 0;
        this.garbage_production[65] = 0;   
        this.garbage_production[129] = 0;   

        this.locations = new int[this.facility_count];
        for(int i = 0; i < this.locations.length; i++) {
            this.locations[i] = this.incinerator_indexes[this.use_incinerator_indexes[i]];
        }
        
        String location = "/adjM_new.csv";
        URL resource = Cec2015.class.getResource(location);
        File fpt = null;
        try {
            fpt = Paths.get(resource.toURI()).toFile();
        } catch (URISyntaxException ex) {
            Logger.getLogger(SpalovnyCR_2.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        BufferedReader br = null;
	String line = "";
	String cvsSplitBy = ",";
        int rowIt = 0;

	try {

		br = new BufferedReader(new FileReader(fpt));
		while ((line = br.readLine()) != null) {

		        // use comma as separator
			String[] row = line.split(cvsSplitBy);
                        
                        for(int columnIt = 0; columnIt < row.length; columnIt++) {
                            this.adjM[rowIt][columnIt] = Double.parseDouble(row[columnIt]);
                        }
                        rowIt++;

		}

	} catch (FileNotFoundException e) {
            Logger.getLogger(Spalovny_projekt.class.getName()).log(Level.SEVERE, null, e);
	} catch (IOException e) {
            Logger.getLogger(Spalovny_projekt.class.getName()).log(Level.SEVERE, null, e);
	} finally {
		if (br != null) {
			try {
				br.close();
			} catch (IOException e) {
                            Logger.getLogger(SpalovnyCR_2.class.getName()).log(Level.SEVERE, null, e);
			}
		}
	}
        
    }
    
    public Spalovny_projekt(int[] use_inc, int[] use_prod) {

        this.use_incinerator_indexes = use_inc.clone();
        
        this.use_producent_indexes = use_prod.clone();
        
        this.existing_fac_production = new double[]{421456.20,4618.37,40328.62,10267.64,6054.39,12617.38,5237.12,4892.46,11682.76,8108.45,7039.16,12327.33,26770.87,5010.74,8555.13,4609.10,5111.39,3988.39,14070.61,14343.59,119805.75,19561.32,4147.45,18887.91,10201.53,8107.61,6250.03,16045.27,4836.13,6307.23,4056.93,6973.76,5520.20,19984.11,8029.20,9128.13,14495.34,24822.35,10501.02,8511.10,16835.81,25171.38,3399.31,9079.82,7454.33,21032.18,4472.56,7215.61,6201.28,6119.69,51330.69,4445.92,15210.71,6734.93,15135.70,2793.67,3637.41,4976.93,9159.88,21280.52,9544.94,24765.51,8079.11,14040.02,5842.87,50333.33,9278.74,5987.36,6045.85,8719.04,3054.00,6051.64,11312.84,9453.26,8867.39,5051.98,32099.15,9986.36,27737.28,11916.22,5641.20,21873.89,16721.48,5193.34,12028.95,12322.73,5130.85,34858.49,12588.02,82707.62,1259.73,14886.78,7083.38,10695.23,9435.95,2755.95,5084.76,7126.47,6041.74,50918.85,29322.16,26006.27,8264.66,23361.72,7493.42,10543.17,5522.79,5866.35,4096.67,23156.53,2795.28,5124.32,6425.70,7346.90,35345.02,4735.35,8529.37,7744.97,8204.27,8258.16,8342.36,3092.94,9674.67,4317.68,4435.00,15640.78,8605.63,2680.56,13789.02,60292.82,6006.31,17997.80,6725.98,5591.85,7701.58,11773.66,21185.92,17639.47,41796.62,7931.37,44712.79,10010.61,7328.53,11285.26,34601.82,34060.59,12471.84,20311.27,8569.94,17996.19,36791.19,4792.82,14507.71,16659.05,12347.36,23618.15,18237.74,24668.06,7006.08,12956.23,10422.35,4519.41,5779.48,22885.43,22103.19,14204.32,23938.29,13171.29,13841.54,9880.92,21436.48,6069.16,7595.05,10984.90,35240.52,29269.43,7066.70,9149.82,4840.89,17531.07,5802.00,5711.93,25640.05,5779.25,2753.40,4690.38,3137.53,13686.97,5994.54,3524.22,19105.03,10862.11,12096.55,4842.76,7432.78,18157.25,5126.45,10345.50,10415.80,24179.22,15164.39,5119.98,12566.70,4706.77,14186.38,27447.64};
        this.penalization_koeficients = new double[][]{{1.e9,1.e9,1.e9},{1.e9,1.e9,1.e9},{1.e9,1.e9,1.e9},{1.e9,1.e9,1.e9},{-4.6332e-9,1.15063e-6,3.40002e-9},{-6.8857e-9,1.28464e-6,6.75326e-9},{-7.6378e-9,8.61982e-7,9.3877e-9},{-5.8807e-9,1.27062e-6,5.14842e-9},{-4.5162e-9,1.0308e-6,3.79009e-9},{-4.8986e-9,9.93745e-7,4.76961e-9},{-4.6098e-9,1.12093e-6,3.51782e-9},{-4.8482e-9,1.02995e-6,4.31959e-9},{-1.0353e-8,5.90684e-7,1.31726e-8},{-4.5722e-9,1.06072e-6,3.74732e-9},{-5.7585e-9,1.09545e-6,5.53137e-9},{-9.5885e-9,1.81632e-6,9.98701e-9},{-1.091e-8,1.95017e-6,1.06918e-8},{-1.0895e-8,1.87811e-6,1.08646e-8},{-1.0405e-8,1.40713e-6,1.15351e-8},{-7.0143e-9,9.76986e-7,8.23012e-9},{-6.5815e-9,9.73096e-7,7.37948e-9},{-1.0956e-8,2.02911e-6,1.05282e-8},{9.6443e-9,2.14395e-6,9.1834e-9},{-9.7127e-9,1.09974e-6,1.14434e-8},{-9.3212e-9,1.84887e-6,9.69177e-9},{-1.102e-8,2.28826e-6,9.88925e-9},{-1.1023e-8,2.06177e-6,1.0507e-8},{-1.1009e-8,2.21107e-6,1.00858e-8},{-1.0052e-8,7.19101e-7,1.26135e-8},{-1.1205e-8,1.59485e-6,1.19419e-8},{-1.0989e-8,1.98647e-6,1.06728e-8},{-8.1623e-9,9.50883e-7,9.76647e-9},{-7.8977e-9,9.61479e-7,9.36597e-9},{-1.0822e-8,1.52129e-6,1.1715e-8},{-9.3009e-9,2.00521e-6,9.24296e-9},{-4.2603e-9,1.03226e-6,3.27097e-9},{-6.097e-9,1.03532e-6,6.344e-9},{-6.2969e-9,1.00614e-6,6.79505e-9},{-7.7641e-9,9.59571e-7,9.20838e-9},{-1.0416e-8,7.84236e-7,1.29276e-8}};
        this.adjM = new double[206][206];
        this.garbage_production = new double[]{421456.20,4618.37,40328.62,10267.64,6054.39,12617.38,5237.12,4892.46,11682.76,8108.45,7039.16,12327.33,26770.87,5010.74,8555.13,4609.10,5111.39,3988.39,14070.61,14343.59,119805.75,19561.32,4147.45,18887.91,10201.53,8107.61,6250.03,16045.27,4836.13,6307.23,4056.93,6973.76,5520.20,19984.11,8029.20,9128.13,14495.34,24822.35,10501.02,8511.10,16835.81,25171.38,3399.31,9079.82,7454.33,21032.18,4472.56,7215.61,6201.28,6119.69,51330.69,4445.92,15210.71,6734.93,15135.70,2793.67,3637.41,4976.93,9159.88,21280.52,9544.94,24765.51,8079.11,14040.02,5842.87,50333.33,9278.74,5987.36,6045.85,8719.04,3054.00,6051.64,11312.84,9453.26,8867.39,5051.98,32099.15,9986.36,27737.28,11916.22,5641.20,21873.89,16721.48,5193.34,12028.95,12322.73,5130.85,34858.49,12588.02,82707.62,1259.73,14886.78,7083.38,10695.23,9435.95,2755.95,5084.76,7126.47,6041.74,50918.85,29322.16,26006.27,8264.66,23361.72,7493.42,10543.17,5522.79,5866.35,4096.67,23156.53,2795.28,5124.32,6425.70,7346.90,35345.02,4735.35,8529.37,7744.97,8204.27,8258.16,8342.36,3092.94,9674.67,4317.68,4435.00,15640.78,8605.63,2680.56,13789.02,60292.82,6006.31,17997.80,6725.98,5591.85,7701.58,11773.66,21185.92,17639.47,41796.62,7931.37,44712.79,10010.61,7328.53,11285.26,34601.82,34060.59,12471.84,20311.27,8569.94,17996.19,36791.19,4792.82,14507.71,16659.05,12347.36,23618.15,18237.74,24668.06,7006.08,12956.23,10422.35,4519.41,5779.48,22885.43,22103.19,14204.32,23938.29,13171.29,13841.54,9880.92,21436.48,6069.16,7595.05,10984.90,35240.52,29269.43,7066.70,9149.82,4840.89,17531.07,5802.00,5711.93,25640.05,5779.25,2753.40,4690.38,3137.53,13686.97,5994.54,3524.22,19105.03,10862.11,12096.55,4842.76,7432.78,18157.25,5126.45,10345.50,10415.80,24179.22,15164.39,5119.98,12566.70,4706.77,14186.38,27447.64};
        this.production_sum = 3011744.95;
        this.facility_count = this.use_incinerator_indexes.length;
        this.producent_count = this.use_producent_indexes.length;
        this.number_of_cities = new int[]{206, 206};
//        this.capacity_options = new double[]{250_000, 500_000, 750_000, 1_000_000, 1_500_000, 2_000_000, 2_500_000, 3_000_000, 3_500_000};
        this.incinerator_indexes = new int[]{0,20,65,129,149,145,23,99,101,2,114,170,182,175,59,44,195,202,54,11,205,100,40,192,40,190,176,73,204,197,125,155,81,199,37,89,78,81,76,87};
        this.possible_capacities = new double[][]{{0,8543.8},{120194.25,240194.25},{45666.67},{34707.18},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.},{0,10000.,20000.,30000.,80000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.},{0,10000.,20000.,30000.,80000.},{0,10000.,20000.,30000.,80000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10000.,20000.,30000.,80000.,90000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.},{0,10000.,20000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.}};
        this.possible_prices = new double[][]{{434000000,774000000},{336000000,648000000},{134400000},{133000000},{0,66478500.,81613500.,89064900.,95002200.,253650400.,276275700.,298047000.,319456500.,339028800.,359377200.,379233400.,397590000.,416851200.,435647100.,453124800.,471416600.,489500000.,506097900.,523936600.,541206100.,557284800.,574362500.,591281600.,608085900.,623725200.,639998100.,656247000.},{0,71368.4,91393200.,103850550.,115182600.,279626400.,306662400.,333233000.,359299600.,384201600.,409827600.,435376200.,459682500.,484740800.,509318300.,532758600.,557441000.,581606000.,604980600.,629521200.,653671500.,676504800.,700165000.,723798400.,746747100.,770420000.,794559400.,818853000.},{0,66478.5,81846600.,90054450.,100978800.,267000800.,293855400.,320038000.,346207400.,371161200.,397382700.,423061800.,447459000.,472736000.,499422600.,524842200.,551296400.,578760000.,604436700.,631228400.,657836800.,683023200.,709220000.,735233200.,761067900.,785632400.,811066200.,836316000.},{0,71368.4,91393200.,103792500.,114561600.,276417600.,302005800.,326894000.,351188200.,373800000.,397215000.,420525000.,442801500.,466526400.,489967200.,511803000.,534582100.,557286000.,578358900.,600492200.,622133900.,643284000.,665237500.,687138400.,708677100.,729128400.,751042000.,772671000.},{0,66051.6,80760000.,87842250.,93295200.,251787200.,274063500.,295718000.,316752700.,336079200.,356349500.,376335400.,394873500.,414161600.,433449000.,451261800.,469695200.,488466000.,505827000.,524220400.,542098500.,558837600.,578242500.,597672400.,617166000.,636039600.,656504900.,676815000.},{0,65915.7,80643300.,88133400.,95545800.,255409600.,278953200.,302316000.,325289800.,346479600.,368290000.,389919600.,410008500.,431547200.,453900000.,475012800.,497224300.,518994000.,539511000.,560934000.,581966700.,601682400.,622547500.,643749600.,665018100.,684938800.,706025300.,726879000.},{0,66478500.,81613500.,89064900.,95002200.,253650400.,276275700.,298047000.,319456500.,339028800.,359377200.,379415400.,397978500.,417472000.,436527700.,454055400.,472645900.,490794000.,507727500.,525360000.,542990900.,559149600.,576302500.,593972600.,611579700.,628434800.,647126300.,665562000.},{0,66478500.,81613500.,89064900.,95002200.,253857600.,276624900.,298694000.,320310100.,340270800.,360890400.,381225600.,400695000.,422025600.,443344700.,463370400.,484197900.,504506000.,523754700.,543573800.,563520700.,582122400.,602175000.,622224200.,641965500.,660307200.,680514000.,700488000.},{0,99407250.,101599800.,104374800.,110370600.,263378400.,288383400.,316934000.,345780600.,374732400.,404277900.,433564600.,461235000.,489707200.,517894800.,544635000.,572188800.,599458000.,625354800.,652003000.,678665600.},{0,66342600.,81342000.,88657200.,94381800.,253029600.,275460300.,297271000.,318459900.,338252400.,358703800.,378872200.,397396500.,416851200.,435868100.,453591000.,472153800.,490536000.,507456600.,525074000.,544182300.,562564800.,581800000.,601036800.,619960500.,637126000.,656504900.,675264000.},{0,66478500.,81613500.,89064900.,95545800.,257065600.,282096900.,306585000.,331124200.,353930400.,378211600.,402234000.,424561500.,447897600.,470833700.,492476400.,514920900.,537106000.,557984700.,579717600.,601307400.,622173600.,644862500.,667295200.,689466600.,710656800.,732658900.,754431000.},{0,67642650.,91470900.,110254050.,130395600.,295770400.,327618900.,358846000.,389466000.,418507200.,448169800.,477211000.},{0,67681500.,91587300.,110428650.,130705800.,296184000.,327968100.,359235000.,389892800.,418818000.,448506500.,477573600.},{0,61937850.,82545000.,98553600.,118287600.,288319200.,320167800.,351344000.,381924400.,410901600.},{0,65702250.,84563100.,101231100.,117511200.,281799200.,311319000.,341512000.,372105800.,401121600.,430680900.,460006400.,487624500.,516200000.,544285600.,570945600.,598486700.,625846000.},{0,67177050.,83243700.,92324700.,104238600.,271243200.,298046700.,324437000.,350192700.,374421600.,400410400.,426321000.,450757500.,476048000.,501401400.,525540600.,551051300.,576432000.,600091800.,626104600.,652185700.,677436000.,703397500.,729515800.,755130600.,779839200.,805063200.,830496000.},{0,65488800.,79789800.,87085800.,95468400.,262653600.,288965700.,314605000.,339804300.,363399600.,387797800.,412195000.,436009500.,460937600.,485348300.,508543200.,533107700.,557544000.,581074200.,605613800.,629871100.,653220000.,678497500.,703955200.,729631800.,754121200.,779551900.,804882000.},{0,68011350.,92402400.,111360150.,132491400.,298253600.,330180300.,361304000.,392027900.,420991200.,450524100.},{0,69563700.,95700900.,119335050.,307981600.},{0,65003700.,80953800.,94886100.,110526000.,274348000.,302587200.,330646000.,359014700.,386064000.,415208300.,444431400.,472101000.,500676800.,528671100.,555345000.,583001700.,610324000.,636222300.,662818200.,689376700.,714691200.,740912500.,766849200.},{0,56601750.,73192200.,91742400.,287801600.},{0,67565100.,92324700.,115668000.,305084000.},{0,63800700.,82273500.,100823850.,122556000.,293493600.,325290600.,356518000.,387189000.,416179200.},{0,63664800.,84873600.,104840550.,298460800.,330296400.},{0,52720950.,59648100.,67060350.,76063800.,243094400.,269756100.,296624000.,325289800.,353775600.,383424600.,412557600.,440278500.,468803200.,497003500.,523677600.,551296400.,578500000.,604436700.,631228400.},{0,66478500.,81768900.,91509750.,101988000.,280868000.,312716700.,343970000.,374524700.,403605600.,433202900.,462361200.,490147500.,518476800.,546704700.,573507000.,600945300.,628176000.},{0,59861700.,76374600.,93488850.,113707800.,287801600.,319701600.,350955000.,381497600.,410436000.},{0,67177050.,92286000.,110894400.,104083800.,271140000.,298046700.,324695000.,351758000.,377371200.,403773500.,429762200.,454831500.,481428800.,507779800.,533224800.,560636800.,587814000.,613674600.,640620200.,667062100.,692337600.,718597500.,744315000.,770148000.,794687600.,820067800.,845244000.},{0,66478500.,82118100.,91218600.,103074600.,269794400.,296766000.,323143000.,350049700.,375663600.,401755900.,427950600.,452892000.,478531200.,504480100.,529965000.,556703800.,583416000.,608512800.,635212600.,662002100.,687060000.,713100000.,739271000.,764910000.,789616800.,814815900.,840198000.},{0,59085450.,73308600.,87435000.,104083800.,274762400.,306662400.,337761000.,368406500.,397395600.,426981100.,456204000.,483937500.},{0,59260050.,80798700.},{0,64227600.,77150700.,82370250.,85999200.,243301600.,264633300.,285111000.,305226900.,323505600.,342560400.,361305000.,378574500.,396774400.,414536500.,431004600.,448312600.,465440000.,481105800.,497754400.,513833800.,529034400.,544932500.,561012400.,578048400.,594386800.,611862300.,629469000.},{0,65353050.,79362900.,86328900.,92053200.,258204000.,283959900.,309431000.,334539700.,357967200.,382079100.,405855800.,428248500.,451417600.,474793000.,497599200.,521555700.,545126000.,567220500.,590816600.,614399000.,636453600.,660062500.,683774000.,707278500.,729489600.,752918300.,777717000.},{0,65353050.,79401600.,86503500.,92829000.,260066400.,286288200.,311889000.,336958600.,360450000.,384602400.,408573200.,431158500.,455348800.,479850500.,502954200.,526718000.,550558000.,573741000.,597361600.,621538200.,644527200.,668470000.,691847000.,716709600.,740356400.,766046600.,791298000.},{0,66342600.,81768900.,91393200.,104083800.,270519200.,297232200.,323402000.,349481000.,375042000.,401251500.,427044800.,452115000.,477910400.,504041500.,528568200.,554737300.,581606000.,607425000.,634359000.,660813000.,686128800.,712130000.,738262200.,763862400.,788530400.,813690700.,839034000.},{0,52235.9,59725800.,68108400.,76917600.,244025600.,271968300.,300634000.,331124200.,360140400.,389815400.,418895400.,446682000.,475219200.,503381900.,529965000.,557441000.,584710000.,610686300.}};
//        this.possible_prices = new double[][]{{1400,1800},{1400,1800},{1400},{1400},{0,6648,4081,2969,2375,3171,3070,2980,2904,2825,2764,2709,2651,2605,2563,2517,2481,2448,2410,2382,2353,2322,2297,2274,2252,2228,2207,2187},{0,7137,4570,3462,2880,3495,3407,3332,3266,3202,3153,3110,3065,3030,2996,2960,2934,2908,2881,2861,2842,2819,2801,2784,2766,2752,2740,2730},{0,6648,4092,3002,2524,3338,3265,3200,3147,3093,3057,3022,2983,2955,2938,2916,2902,2894,2878,2869,2860,2846,2837,2828,2819,2806,2797,2788},{0,7137,4570,3460,2864,3455,3356,3269,3193,3115,3056,3004,2952,2916,2882,2843,2814,2786,2754,2730,2705,2680,2661,2643,2625,2604,2590,2576},{0,6605,4038,2928,2332,3147,3045,2957,2880,2801,2741,2688,2632,2589,2550,2507,2472,2442,2409,2383,2357,2328,2313,2299,2286,2272,2264,2256},{0,6592,4032,2938,2389,3193,3099,3023,2957,2887,2833,2785,2733,2697,2670,2639,2617,2595,2569,2550,2530,2507,2490,2476,2463,2446,2435,2423},{0,6648,4081,2969,2375,3171,3070,2980,2904,2825,2764,2710,2653,2609,2568,2523,2488,2454,2418,2388,2361,2330,2305,2285,2265,2244,2231,2219},{0,6648,4081,2969,2375,3173,3074,2987,2912,2836,2776,2723,2671,2638,2608,2574,2548,2523,2494,2471,2450,2426,2409,2393,2378,2358,2347,2335},{0,9941,5080,3479,2759,3292,3204,3169,3143,3123,3110,3097,3075,3061,3046,3026,3012,2997,2978,2964,2951},{0,6634,4067,2955,2360,3163,3061,2973,2895,2819,2759,2706,2649,2605,2564,2520,2485,2453,2416,2387,2366,2344,2327,2312,2296,2275,2264,2251},{0,6648,4081,2969,2389,3213,3134,3066,3010,2949,2909,2873,2830,2799,2770,2736,2710,2686,2657,2635,2614,2592,2579,2567,2554,2538,2526,2515},{0,6764,4574,3675,3260,3697,3640,3588,3541,3488,3447,3409},{0,6768,4579,3681,3268,3702,3644,3592,3544,3490,3450,3411},{0,6194,4127,3285,2957,3604,3557,3513,3472,3424},{0,6570,4228,3374,2938,3522,3459,3415,3383,3343,3313,3286,3251,3226,3202,3172,3150,3129},{0,6718,4162,3077,2606,3391,3312,3244,3184,3120,3080,3045,3005,2975,2949,2920,2900,2882,2858,2846,2836,2823,2814,2806,2797,2785,2776,2768},{0,6549,3989,2903,2387,3283,3211,3146,3089,3028,2983,2944,2907,2881,2855,2825,2806,2788,2767,2753,2739,2722,2714,2708,2702,2693,2688,2683},{0,6801,4620,3712,3312,3728,3669,3613,3564,3508,3466},{0,6956,4785,3978,3850},{0,6500,4048,3163,2763,3429,3362,3306,3264,3217,3194,3175,3147,3129,3110,3085,3068,3052,3030,3013,2997,2978,2964,2949},{0,5660,3660,3058,3598},{0,6757,4616,3856,3814},{0,6380,4114,3361,3064,3669,3614,3565,3520,3468},{0,6366,4244,3495,3731,3670},{0,5272,2982,2235,1902,3039,2997,2966,2957,2948,2949,2947,2935,2930,2924,2909,2902,2892,2878,2869},{0,6648,4088,3050,2550,3511,3475,3440,3405,3363,3332,3303,3268,3240,3216,3186,3163,3141},{0,5986,3819,3116,2843,3598,3552,3510,3468,3420},{0,6718,4614,3696,2602,3389,3312,3247,3198,3145,3106,3070,3032,3009,2987,2962,2951,2939,2922,2912,2900,2885,2874,2863,2852,2838,2828,2817},{0,6648,4106,3041,2577,3372,3297,3231,3182,3131,3090,3057,3019,2991,2968,2944,2930,2917,2898,2887,2878,2863,2852,2843,2833,2820,2810,2801},{0,5909,3665,2914,2602,3435,3407,3378,3349,3312,3284,3259,3226},{0,5926,4040},{0,6423,3858,2746,2150,3041,2940,2851,2775,2696,2635,2581,2524,2480,2438,2394,2360,2327,2291,2263,2234,2204,2180,2158,2141,2123,2110,2098},{0,6535,3968,2878,2301,3228,3155,3094,3041,2983,2939,2899,2855,2821,2793,2764,2745,2726,2701,2686,2671,2652,2640,2630,2620,2605,2596,2592},{0,6535,3970,2883,2321,3251,3181,3119,3063,3004,2958,2918,2874,2846,2823,2794,2772,2753,2732,2715,2702,2686,2674,2661,2654,2644,2642,2638},{0,6634,4088,3046,2602,3381,3303,3234,3177,3125,3087,3050,3014,2987,2965,2936,2920,2908,2892,2883,2873,2859,2849,2839,2829,2816,2806,2797},{0,5224,2986,2270,1923,3050,3022,3006,3010,3001,2999,2992,2978,2970,2961,2944,2934,2924,2908}};
        this.garbage_production[20] = 0;
        this.garbage_production[65] = 0;   
        this.garbage_production[129] = 0;   
        
        this.locations = new int[this.facility_count];
        for(int i = 0; i < this.locations.length; i++) {
            this.locations[i] = this.incinerator_indexes[this.use_incinerator_indexes[i]];
        }
        
        String location = "/adjM_new.csv";
        URL resource = Cec2015.class.getResource(location);
        File fpt = null;
        try {
            fpt = Paths.get(resource.toURI()).toFile();
        } catch (URISyntaxException ex) {
            Logger.getLogger(SpalovnyCR_2.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        BufferedReader br = null;
	String line = "";
	String cvsSplitBy = ",";
        int rowIt = 0;

	try {

		br = new BufferedReader(new FileReader(fpt));
		while ((line = br.readLine()) != null) {

		        // use comma as separator
			String[] row = line.split(cvsSplitBy);
                        
                        for(int columnIt = 0; columnIt < row.length; columnIt++) {
                            this.adjM[rowIt][columnIt] = Double.parseDouble(row[columnIt]);
                        }
                        rowIt++;

		}

	} catch (FileNotFoundException e) {
            Logger.getLogger(Spalovny_projekt.class.getName()).log(Level.SEVERE, null, e);
	} catch (IOException e) {
            Logger.getLogger(Spalovny_projekt.class.getName()).log(Level.SEVERE, null, e);
	} finally {
		if (br != null) {
			try {
				br.close();
			} catch (IOException e) {
                            Logger.getLogger(SpalovnyCR_2.class.getName()).log(Level.SEVERE, null, e);
			}
		}
	}
        
    }

    @Override
    public String name() {
        return "Projekt_Spaloven_CR";
    }
    
    /**
     * Method evaluates the quality of a solution
     * 
     * @param vector
     * @return 
     */
    @Override
    public double fitness(double[] vector) {
        
        if(vector.length != (this.facility_count+this.producent_count)) {
            return Math.pow(10, 30);
        }
        
        double fitness = 0;
        
        //Locations of facilities
//        int[] locations = this.incinerator_indexes.clone();
//        int sum = 0;
        List<List<Integer>> facility_nodes = new ArrayList<>();
        for(int i = 0; i < facility_count; i++) {
            facility_nodes.add(new ArrayList<>());
//            locations[i] = (((int) (vector[i] * number_of_cities[i])) % number_of_cities[i]) + sum;
        }
        
        //Capacities of facilities
        double capacities[] = new double[this.facility_count];
        double costs[] = new double[this.facility_count];
        double capacity_sum = 0;
        for(int i = 0; i < this.facility_count; i++){
            capacities[i] = possible_capacities[this.use_incinerator_indexes[i]][((int) (vector[i] * possible_capacities[this.use_incinerator_indexes[i]].length)) % possible_capacities[this.use_incinerator_indexes[i]].length];
            if(this.use_incinerator_indexes[i] == 0) {
                switch(((int) (vector[i] * possible_capacities[this.use_incinerator_indexes[i]].length)) % possible_capacities[this.use_incinerator_indexes[i]].length) {
                    case 0:
                        this.garbage_production[0] = 111456.2;
                        this.existing_fac_production[0] = 310000;
                        break;
                    default:
                        this.garbage_production[0] = 0;
                        this.existing_fac_production[0] = 421456.20;
                }
            }
            costs[i] = possible_prices[this.use_incinerator_indexes[i]][((int) (vector[i] * possible_prices[this.use_incinerator_indexes[i]].length)) % possible_prices[this.use_incinerator_indexes[i]].length];
            capacity_sum += capacities[i];
        }
        
        double prod = 0;
        for(int i = 0; i < this.use_producent_indexes.length; i++) {
            prod += this.garbage_production[this.use_producent_indexes[i]];
        }
        this.production_sum = prod;
        
        //Capacity is not enough
        if(capacity_sum < production_sum){
            return Math.pow(10, 30);
        }
        
        //Where to go from nodes
        int facility_index;
        for(int i = facility_count; i < vector.length; i++) {
            if(this.garbage_production[this.use_producent_indexes[i - facility_count]] == 0){
                facility_index = ((int) (vector[i] * facility_count)) % facility_count;
                switch(this.use_producent_indexes[i - facility_count]) {
                    case 0: case 20: case 65: case 129:
                        for(int j = 0; j < this.locations.length; j++) {
                            if(this.locations[j] == this.use_producent_indexes[i - facility_count]) {
                                facility_index = j;
                                break;
                            }
                        }
                        break;
                    default:
                        facility_index = ((int) (vector[i] * facility_count)) % facility_count;
                }
            }
            else{
                facility_index = ((int) (vector[i] * facility_count)) % facility_count;
            }
            facility_nodes.get(facility_index).add(this.use_producent_indexes[i - facility_count]);
        }
        
        //Chceck capacity of single facilities and if not over, add remaining capacity to fitness
        double garbage_sum;
        double a,b,c,x,y,z;
        for(int i = 0; i < facility_count; i++) {
            garbage_sum = 0;
            for(Integer node_index : facility_nodes.get(i)){
                garbage_sum += garbage_production[node_index];
            }
            if(garbage_sum > capacities[i]){
                fitness += (garbage_sum - capacities[i])*overused_penalty;
//                return Math.pow(10, 30);
            }
            else {
                
                a = this.penalization_koeficients[this.use_incinerator_indexes[i]][0];
                b = this.penalization_koeficients[this.use_incinerator_indexes[i]][1];
                c = this.penalization_koeficients[this.use_incinerator_indexes[i]][2];
                
                switch(this.use_incinerator_indexes[i]) {
                    case 0:
                        x = capacities[i] + existing_fac_production[0];
                        garbage_sum += existing_fac_production[0];
                        break;
                    case 1:
                        x = capacities[i] + existing_fac_production[20];
                        garbage_sum += existing_fac_production[20];
                        break;
                    case 2:
                        x = capacities[i] + existing_fac_production[65];
                        garbage_sum += existing_fac_production[65];
                        break;
                    case 3:
                        x = capacities[i] + existing_fac_production[129];
                        garbage_sum += existing_fac_production[129];
                        break;
                    default:
                        x = capacities[i];  
                        
                }
                
                if(x != 0) {
                    x = x/1000.0;
                    y = (x - garbage_sum/1000.0)/x;
                    z = 1.0/(a + (b/x) + (c/y));

                    fitness += z;     //parameter based penalty
                }    
//                fitness += (capacities[i] - garbage_sum)*unused_penalty;  //Constant penalty
            }
        }
        
        //Compute the distances and update the fitness
//        Vertex[] vertices;
        double pathe_length;
        double transport_cost=0, capacity_cost=0,tmp;
        for(int i = 0; i < facility_count; i++) {
            
//            vertices = Dijsktra.getShortestPathsFromAdjacencyMatrix(adjM, this.locations[i]);
            for(Integer node_index : facility_nodes.get(i)) {
                pathe_length = adjM[node_index.intValue()][this.locations[i]];
//                pathe_length = vertices[node_index].minDistance;
                if(pathe_length == Double.POSITIVE_INFINITY){
                    return Math.pow(10, 30);
                }
//                fitness += (path_penalty * pathe_length * garbage_production[node_index] + garbage_production[node_index] * costs[i]);
                    fitness += (path_penalty * pathe_length * garbage_production[node_index]);
                    transport_cost += (path_penalty * pathe_length * garbage_production[node_index]);
                    
            }
            if(capacities[i] > 0) {
                fitness += (costs[i]);
                capacity_cost += (costs[i]);
            }
            
        }
        
        return fitness;
    }
    
    /**
     * Method returns the String output for Mathematica
     * 
     * @param vector
     * @return 
     */
    public Map<String, List> getOutput(double[] vector) {
        
        if(vector.length != (this.facility_count+this.producent_count)) {
            return null;
        }
        
        Map<String, List> map = new HashMap<>();
        List<Integer> facility_list = new ArrayList<>();
        double[] capacity_add_existing = new double[4];
        
        double fitness = 0;
        
        //Locations of facilities
//        int[] locations = this.incinerator_indexes.clone();
//        int sum = 0;
        List<List<Integer>> facility_nodes = new ArrayList<>();
        for(int i = 0; i < facility_count; i++) {
            facility_nodes.add(new ArrayList<>());
            facility_list.add(this.locations[i]);
        }
        
        map.put("facilities", facility_list);
        
        List<Double> facility_capacities = new ArrayList<>();
        
        //Capacities of facilities
        double capacities[] = new double[facility_count];
        double costs[] = new double[facility_count];
        double capacity_sum = 0;
        for(int i = 0; i < facility_count; i++){
            capacities[i] = possible_capacities[this.use_incinerator_indexes[i]][((int) (vector[i] * possible_capacities[this.use_incinerator_indexes[i]].length)) % possible_capacities[this.use_incinerator_indexes[i]].length];
            if(this.use_incinerator_indexes[i] == 0) {
                switch(((int) (vector[i] * possible_capacities[this.use_incinerator_indexes[i]].length)) % possible_capacities[this.use_incinerator_indexes[i]].length) {
                    case 0:
                        this.garbage_production[0] = 111456.2;
                        capacity_add_existing[0] = 310000;
                        this.existing_fac_production[0] = 310000;
                        break;
                    default:
                        this.garbage_production[0] = 0;
                        capacity_add_existing[0] = 421456.2;
                        this.existing_fac_production[0] = 421456.2;
                }
            }
            facility_capacities.add(capacities[i]);
            costs[i] = possible_prices[this.use_incinerator_indexes[i]][((int) (vector[i] * possible_prices[this.use_incinerator_indexes[i]].length)) % possible_prices[this.use_incinerator_indexes[i]].length];
            capacity_sum += capacities[i];
        }
        
        map.put("capacities", facility_capacities);
        
        double prod = 0;
        for(int i = 0; i < this.use_producent_indexes.length; i++) {
            prod += this.garbage_production[this.use_producent_indexes[i]];
        }
        this.production_sum = prod;
        
        //Capacity is not enough
        if(capacity_sum < production_sum){
            return null;
        }
        
        //Where to go from nodes
        int facility_index;
        for(int i = facility_count; i < vector.length; i++) {
            if(this.garbage_production[this.use_producent_indexes[i - facility_count]] == 0){
                facility_index = ((int) (vector[i] * facility_count)) % facility_count;
                switch(this.use_producent_indexes[i - facility_count]) {
                    case 0:
                        for(int j = 0; j < this.locations.length; j++) {
                            if(this.locations[j] == this.use_producent_indexes[i - facility_count]) {
                                facility_index = j;
                                break;
                            }
                        }
                        break;
                    case 20:
                        for(int j = 0; j < this.locations.length; j++) {
                            if(this.locations[j] == this.use_producent_indexes[i - facility_count]) {
                                facility_index = j;
                                break;
                            }
                        }
                        capacity_add_existing[1] = 119805.75;
                        break;
                    case 65:
                        for(int j = 0; j < this.locations.length; j++) {
                            if(this.locations[j] == this.use_producent_indexes[i - facility_count]) {
                                facility_index = j;
                                break;
                            }
                        }
                        capacity_add_existing[2] = 50333.33;
                        break;
                    case 129:
                        for(int j = 0; j < this.locations.length; j++) {
                            if(this.locations[j] == this.use_producent_indexes[i - facility_count]) {
                                facility_index = j;
                                break;
                            }
                        }
                        capacity_add_existing[3] = 60292.82;
                        break;
                    default:
                        facility_index = ((int) (vector[i] * facility_count)) % facility_count;
                }
            }
            else{
                facility_index = ((int) (vector[i] * facility_count)) % facility_count;
            }
            facility_nodes.get(facility_index).add(this.use_producent_indexes[i - facility_count]);
        }
        
        for(int i = 0; i < facility_nodes.size(); i++) {
            map.put("facility[[" + (i+1) + "]]", facility_nodes.get(i));
        }
        
        facility_capacities = new ArrayList<>();
        //Chceck capacity of single facilities and if not over, add remaining capacity to fitness
        double garbage_sum;
        double a,b,c,x,y,z;
        for(int i = 0; i < facility_count; i++) {
            garbage_sum = 0;
            for(Integer node_index : facility_nodes.get(i)){
                garbage_sum += garbage_production[node_index];
            }
            facility_capacities.add(garbage_sum);
            if(garbage_sum > capacities[i]){
//                return null;
                fitness += (garbage_sum - capacities[i])*overused_penalty;
            }
            else {
                a = this.penalization_koeficients[this.use_incinerator_indexes[i]][0];
                b = this.penalization_koeficients[this.use_incinerator_indexes[i]][1];
                c = this.penalization_koeficients[this.use_incinerator_indexes[i]][2];
                
                switch(this.use_incinerator_indexes[i]) {
                    case 0:
                        x = capacities[i] + existing_fac_production[0];
                        garbage_sum += existing_fac_production[0];
                        break;
                    case 1:
                        x = capacities[i] + existing_fac_production[20];
                        garbage_sum += existing_fac_production[20];
                        break;
                    case 2:
                        x = capacities[i] + existing_fac_production[65];
                        garbage_sum += existing_fac_production[65];
                        break;
                    case 3:
                        x = capacities[i] + existing_fac_production[129];
                        garbage_sum += existing_fac_production[129];
                        break;
                    default:
                        x = capacities[i];   
                        
                }
                
                if(x != 0) {
                    x = x/1000.0;
                    y = (x - garbage_sum/1000.0)/x;
                    z = 1.0/(a + (b/x) + (c/y));

                    fitness += z;     //parameter based penalty
                } 
//                
//                fitness += (capacities[i] - garbage_sum)*unused_penalty;
            }
        }
        
        map.put("usedCapacities", facility_capacities);
        
        for(int i = 0; i < this.locations.length; i++) {
            
            switch(this.locations[i]) {
                
                case 0:
                    map.get("capacities").set(i, capacities[i] + capacity_add_existing[0]);
                    map.get("usedCapacities").set(i, facility_capacities.get(i) + capacity_add_existing[0]);
                    break;
                case 20:
                    map.get("capacities").set(i, capacities[i] + capacity_add_existing[1]);
                    map.get("usedCapacities").set(i, facility_capacities.get(i) + capacity_add_existing[1]);
                    break;
                case 65:
                    map.get("capacities").set(i, capacities[i] + capacity_add_existing[2]);
                    map.get("usedCapacities").set(i, facility_capacities.get(i) + capacity_add_existing[2]);
                    break;
                case 129:
                    map.get("capacities").set(i, capacities[i] + capacity_add_existing[3]);
                    map.get("usedCapacities").set(i, facility_capacities.get(i) + capacity_add_existing[3]);
                    break;
                default:
                    
                
            }
            
        }
        
        //Compute the distances and update the fitness
//        List<List<Vertex>> paths;
        List<List<Integer>> paths;
        List pp;       
//        Dijsktra.Vertex[] vertices;
        double path_length;
        for(int i = 0; i < facility_count; i++) {
            
            paths = new ArrayList<>();
            
//            vertices = Dijsktra.getShortestPathsFromAdjacencyMatrix(adjM, this.locations[i]);
            for(Integer node_index : facility_nodes.get(i)) {
                path_length = this.adjM[node_index][this.locations[i]];
//                path_length = vertices[node_index].minDistance;
                if(path_length == Double.POSITIVE_INFINITY){
                    return null;
                }
                fitness += (path_penalty * path_length * garbage_production[node_index]);

//                paths.add(Dijsktra.getShortestPathTo(vertices[node_index]));
                pp = new ArrayList<>();
                if(this.locations[i] != node_index) {
                    pp.add(this.locations[i]);
                    pp.add(node_index);
                }
                else {
                    pp.add(node_index);
                }
                paths.add(pp);
            }
            
            map.put("span[[" + (i+1) + "]]", paths);
            
            if(capacities[i] > 0) {
                fitness += (costs[i]);
            }
            
        }
        
        return map;
    }
    
    

    @Override
    public double fitness(Individual individual) {
        
        
        return fitness(individual.vector);
    }

    @Override
    public void constrain(Individual individual) {
        IndividualUtil.randIfOutOfBounds(individual, 0, 1);
    }

    @Override
    public double[] generateTrial(int dim) {
        double[] vector = new double[dim];
        Random rnd = new UniformRandom();
//        for (int i = 0; i < 39; i++) vector[i] = rnd.nextDouble(0.9, 0.95);
        for (int i = 0; i < dim; i++) vector[i] = rnd.nextDouble(0, 1);
        return vector;
    }

    @Override
    public double fixedAccLevel() {
        return 10^-7;
    }

    @Override
    public double optimum() {
        return 0;
    }

    @Override
    public double max(int dim) {
        return 1;
    }

    @Override
    public double min(int dim) {
        return 0;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        
        double[] vector;
        
//        /**
//         * BEZ PENALIZACE
//         */
//        
//        /**
//         * Olomoucky kraj
//         */
//        int[] use_prod = new int[]{93,94,95,96,97,98,99,100,101,102,103,104,105};
//        int[] use_inc = new int[]{7,8,21};
//        
//        /**
//         * JM+Zlin
//         */
//        int[] use_prod = new int[]{18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,193,194,195,196,197,198,199,200,201,202,203,204,205};
//        int[] use_inc = new int[]{1,6,34,16,17,20,28,29,33};
//        vector = new double[]{0.4036730012846769, 0.15838087013229774, 0.22823838510752437, 0.36959098027352155, 0.3748237560006429, 0.14699859174648638, 0.12404628482615802, 0.18758959359271146, 0.4297477573624919, 0.3760009042235222, 0.004861597961388117, 0.9469514520747778, 0.9671375657533261, 0.19961549572693643, 0.1654575733187331, 0.19837026638113875, 0.10526048894677033, 0.06599881796072203, 0.9540287244369507, 0.21221051351420656, 0.020353631219681527, 0.029190192624070854, 0.10536023179831905, 0.07181441383681948, 0.061387944748818014, 0.044920064797005554, 0.9831167496411671, 0.6464693953473785, 0.05219641125530364, 0.04480406888731904, 0.5229102781909313, 0.4203966397038277, 0.40227870918739744, 0.6645004246259606, 0.9004251823924716, 0.45153415539555664, 0.9880843552041397, 0.622209101721571, 0.693166417596892, 0.519748177886236, 0.6475113077121761, 0.6703056977009375, 0.87224172119128};
//
//         * Zlin
//         */
//        int[] use_prod = new int[]{193,194,195,196,197,198,199,200,201,202,203,204,205};
//        int[] use_inc = new int[]{16,17,20,28,29,33};
//        vector = new double[]{0.06420297128342523, 0.19054302576405058, 0.16187186030750958, 0.22561268602730664, 0.26331605914668416, 0.3241069728189228, 0.2748627743245621, 0.37409329371980143, 0.7680359008630782, 0.6364230870848853, 0.7107665356908834, 0.736891726524969, 0.9209397625668654, 0.864589483327081, 0.5638989667802038, 0.5056544030660124, 0.4724035347562329, 0.6275730804079516, 0.366792778283244};
//        
//        /**
//         * JM kraj + Olomoucky kraj + Zlinsky
//         */
//        int[] use_prod = new int[]{93,94,95,96,97,98,99,100,101,102,103,104,105,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,193,194,195,196,197,198,199,200,201,202,203,204,205};
//        int[] use_inc = new int[]{7,8,21,1,6,34,16,17,20,28,29,33};
//        vector = new double[]{0.162614753845035, 0.1638928222884118, 0.31207851250336055, 0.209319539581151, 0.26956707327573537, 0.1859469395703251, 0.4621094513792374, 0.39820844967699714, 0.23821909244095088, 0.16555589181437463, 0.26475180672755866, 0.056077493472217965, 0.6400849933618377, 0.09272070290578407, 0.18297447415661083, 0.8978904628767685, 0.5723992733201032, 0.5759064323753497, 0.7153223340993992, 0.14611428683299163, 0.5336333123055623, 0.02298657095695461, 0.06560154130672327, 0.06379881233193718, 0.1949226516729759, 0.3265742994125555, 0.1731050211361691, 0.221124304343188, 0.3741389100572066, 0.3962605525304276, 0.3463665345914127, 0.34157233985378377, 0.3164819270766177, 0.3102275090805318, 0.3524980476531325, 0.3982055053061638, 0.261157007826123, 0.28930850723158336, 0.2744054065183416, 0.27808973568311546, 0.26295008233193073, 0.29961482686486046, 0.3533527267375757, 0.5505543869411302, 0.2646694830413812, 0.30421732167427584, 0.6024440977265251, 0.5633498305569797, 0.5172115723261459, 0.7328066158631195, 0.8533335141953566, 0.830555984152448, 0.8729281662789397, 0.3966372138571387, 0.7779712021242792, 0.631330618903087, 0.7065072488435384, 0.77704401928237, 0.7328818298658849}; 
//        
//        /**
//         * JM kraj + Olomoucky kraj + Zlinsky
//         */
//        int[] use_prod = new int[]{93,94,95,96,97,98,99,100,101,102,103,104,105,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,193,194,195,196,197,198,199,200,201,202,203,204,205};
//        int[] use_inc = new int[]{7,8,21,1,6,34,16,17,20,28,29,33};
//        
//        /**
//         * CR
//         */
//
//        vector = new double[]{0.24747989939199289, 0.13659719098646717, 0.806304225919573, 0.8560957790249523, 0.4715911222534472, 0.37634981639122017, 0.18476425110404884, 0.05441650270315222, 0.19602047929186023, 0.5324509118699504, 0.2100548813164097, 0.21194249202047818, 0.5099850679223406, 0.43389419719192546, 0.4620637221695689, 0.4983470864368982, 0.3136080382804217, 0.5292553510517727, 0.28863096893308626, 0.20060052589285352, 0.14462175351484818, 0.4311901591596607, 0.2941412306937663, 0.32273695817203013, 0.3167947926908774, 0.9426816259740644, 0.5610506763858887, 0.3394873047724444, 0.3225920362314154, 0.31650398192051676, 0.3460896583132624, 0.20708914614427765, 0.033430956779683475, 0.3848705428241117, 0.1127532920274637, 0.21005702219104355, 0.2664243356766506, 0.12760246024173827, 0.28868034733484615, 0.23463813899338967, 0.2419101981028407, 0.4939789734679244, 0.3217056628422527, 0.24650899978053714, 0.6336493304758218, 0.24438834772804016, 0.22646933293971833, 0.7845767521161741, 0.4979853901787407, 0.4951035591491075, 0.23289787861197114, 0.7981396201878237, 0.13785121801376862, 0.23103389623312412, 0.24924706762083304, 0.2488580060172515, 0.4772596727384354, 0.49627635255276575, 0.42328180169826485, 0.593130676436438, 0.9203492817540554, 0.16118090218827208, 0.16417627097096196, 0.1673329377898245, 0.15702210803715977, 0.6487567652413393, 0.03002830197307582, 0.16417727073742594, 0.15334820613620367, 0.0336900279667075, 0.04549807120253446, 0.04366822139543236, 0.04607531568560111, 0.044715216063016205, 0.04491304808828911, 0.8257569099149351, 0.4197305069704284, 0.31129409113419676, 0.03807137417634687, 0.6121354763579095, 0.2770852887279187, 0.3973415413199831, 0.3864350646715758, 0.5615852381820239, 0.32749904407529873, 0.7899607068747401, 0.4677796770962214, 0.36710460831631936, 0.3509250087300351, 0.36383732611329345, 0.4519690264539948, 0.36395254752942735, 0.12245079226508106, 0.25819302605119426, 0.45141226353244124, 0.36076357435843387, 0.45243222831631597, 0.13881891490931178, 0.25097588241770147, 0.06968198379480721, 0.14465917411362084, 0.36717849841756944, 0.6591724775615717, 0.05164587466506254, 0.3512985609384507, 0.6152648519339253, 0.28825350316246595, 0.13670497526057931, 0.3640333011452868, 0.668245953113803, 0.060700023047227394, 0.8996126098816803, 0.9089457861088022, 0.9813918730417213, 0.9027729743766653, 0.4368806524402463, 0.911150074913181, 0.9528972100463535, 0.9491952109506523, 0.8864240201683884, 0.9224162985117486, 0.918616635895942, 0.4378794309769904, 0.983792973260585, 0.9883536292041117, 0.4496873842472355, 0.44043323866544737, 0.8774448662297291, 0.9047997194587056, 0.9744642685376524, 0.6991314716434518, 0.9719300029380652, 0.9891802102427791, 0.22476548756430503, 0.6836677743680978, 0.5334915751677213, 0.22011868249411046, 0.5257483144857136, 0.5491704096405619, 0.7147320884197284, 0.72792329567221, 0.7455806690763092, 0.18244171079713947, 0.44906778780279616, 0.5318820272706317, 0.5402444630271996, 0.26350700969170326, 0.5822466756782103, 0.2648229677627945, 0.5945338008654204, 0.45855669743740385, 0.57937784700786, 0.26794149421198343, 0.045020413129264275, 0.6338532958215002, 0.5787921170442105, 0.14177547028300502, 0.5814626044038774, 0.6917682077503644, 0.26351202862574713, 0.27064920359494204, 0.7506805825721476, 0.789868486814796, 0.4921745827619293, 0.7696832197021047, 0.37757958634180705, 0.08454989271485412, 0.7650038929922099, 0.3954325309577518, 0.555640072271573, 0.7656550645520188, 0.7978464852013294, 0.08545387105530167, 0.754788449803684, 0.7624180345745011, 0.3897483929163554, 0.1114823801348334, 0.2974431850101849, 0.32863577596797067, 0.13104229681103058, 0.044438756989463854, 0.1045325994077829, 0.7950778237625368, 0.481278079775929, 0.36423393838242735, 0.13902953683091426, 0.11323930218002726, 0.3303006304246944, 0.12419766572605442, 0.6656231416599043, 0.2113311074239111, 0.07196173916021538, 0.6542325318254932, 0.2673935634407099, 0.27210394628714574, 0.4979983286068121, 0.07908013967575449, 0.11599300452805528, 0.47799183945227564, 0.3270155734511901, 0.13828128537097575, 0.7808804014412557, 0.29044835865002394, 0.37091213702000747, 0.12208965941777183, 0.2908828150165654, 0.3657060414556174, 0.3264867608911737, 0.3487106417863344, 0.38695185965786477, 0.6512002563090931, 0.2818794345860786, 0.11236032071405236, 0.34372162220677344, 0.11164341801263591, 0.33432360641742703, 0.6637082261588658, 0.2752698198265562, 0.5881414135831168, 0.5933190558045368, 0.32039954184518127, 0.5811059323866924, 0.30850924910273786, 0.6298307489641521, 0.6341850410152756, 0.5935950210824799, 0.3037867113424909, 0.14007962483027567, 0.5809387252222317, 0.3063216896944569, 0.6401913147551137, 0.3191457847364119, 0.31354799388529486, 0.22054127333201057, 0.735718544165801, 0.20052752195042664, 0.5213156585587303, 0.7254296612670798, 0.43092046951190904, 0.8475491533247281, 0.8302860632576015, 0.7060812496779469, 0.7113088058648781, 0.5160781994919212, 0.7183697401639909, 0.524130251847233};
//        Spalovny_projekt sp = new Spalovny_projekt();
//        
//        Spalovny_projekt sp = new Spalovny_projekt(use_inc, use_prod);
      
//        /**
//         * S PENALIZACI
//         */
//        
//        /**
//         * Olomoucky kraj
//         */
//        int[] use_prod = new int[]{93,94,95,96,97,98,99,100,101,102,103,104,105};
//        int[] use_inc = new int[]{7,8,21};
//        
//        /**
//         * JM+Zlin
//         */
//        int[] use_prod = new int[]{18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,193,194,195,196,197,198,199,200,201,202,203,204,205};
//        int[] use_inc = new int[]{1,6,34,16,17,20,28,29,33};
//        vector = new double[]{0.015776405811592686, 0.06949531275311019, 0.24955896137909, 0.39802436746274117, 0.04390591263894917, 0.21177702329388445, 0.2900454681723181, 0.023330568857895168, 0.5457282685867064, 0.07190076272893986, 0.04953345839477867, 0.7280047570281443, 0.10108057934376988, 0.6122859119283329, 0.39945241706467116, 0.5668912965495538, 0.9238422411960326, 0.765650151887353, 0.7270590568290101, 0.5564696399325386, 0.6443554937346778, 0.7652496222696008, 0.05561530036827796, 0.6436054096741848, 0.07060317166828883, 0.6596491771324242, 0.7708690401218505, 0.6871938013590742, 0.9269111218503505, 0.5823293709631167, 0.6748073818143457, 0.5755228522800242, 0.09867099900533957, 0.38927186550196813, 0.7129857025407675, 0.6409545672858666, 0.9555145738952159, 0.915870670294258, 0.6740785743223165, 0.6156739351597892, 0.6867297537631821, 0.3935536821023453, 0.9797326475298334};
//
//         * Zlin
//         */
//        int[] use_prod = new int[]{193,194,195,196,197,198,199,200,201,202,203,204,205};
//        int[] use_inc = new int[]{16,17,20,28,29,33};
//        vector = new double[]{0.011014890706938082, 0.26709595059461766, 0.1465633164380175, 0.2415586663332829, 0.2770335065113306, 0.2886897800836469, 0.6157653498274325, 0.528507814753295, 0.7015853169103055, 0.8557472426887041, 0.6077146956877723, 0.3465377567289869, 0.928247031017182, 0.6822798557999529, 0.8034607946015655, 0.663384326965561, 0.5037704557538335, 0.326022735598035, 0.3875712101953233};
//        
//        /**
//         * JM kraj + Olomoucky kraj + Zlinsky
//         */
//        int[] use_prod = new int[]{93,94,95,96,97,98,99,100,101,102,103,104,105,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,193,194,195,196,197,198,199,200,201,202,203,204,205};
//        int[] use_inc = new int[]{7,8,21,1,6,34,16,17,20,28,29,33};
//        vector = new double[]{0.02493980636692131, 0.37942003248077044, 0.07334887580325003, 0.42234777644462196, 0.22614985052582673, 0.04717150282699034, 0.014958651149099868, 0.3879670719287148, 0.28281432394707523, 0.24748128488922827, 0.19989050571402406, 0.5144402192601957, 0.598658846072771, 0.6601971208537474, 0.7882588624317222, 0.7563241192661915, 0.08636283740075454, 0.8126724327819161, 0.11302635537915126, 0.26567526860750174, 0.3867418203449953, 0.7520972786762039, 0.16276739357329653, 0.9676447717256126, 0.13916553545100974, 0.7497329217018982, 0.7962130868319229, 0.5366152613081285, 0.3795841698738228, 0.36044249367827835, 0.8346652224450565, 0.38823568128109376, 0.26830783679396436, 0.695466063902533, 0.9631531298489139, 0.41614855296336667, 0.6995077064132477, 0.1611856836832415, 0.2946260246466567, 0.3475837402002603, 0.3324626945437761, 0.3251004267513238, 0.7094526057617948, 0.0838516697772606, 0.9751886474852272, 0.680977682357305, 0.6658154626381532, 0.11017396238327484, 0.350528964599675, 0.15454129745738543, 0.6669265861526585, 0.8591443667258241, 0.7471125991713053, 0.29253666351677277, 0.15258732496299698, 0.6766060086025395, 0.6625238605196841, 0.9678756212389866, 0.9844821940038849};
//          /**
//         * 4 kraje
//         */
//        int[] use_prod = new int[]{71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,193,194,195,196,197,198,199,200,201,202,203,204,205};
//        int[] use_inc = new int[]{27,32,35,36,37,38,39,7,8,21,1,6,34,16,17,20,28,29,33};
//        vector = new double[]{0.09781373628315337, 0.13073767159957006, 0.6127523428168383, 0.03249177410073113, 0.2819523656555141, 0.2007044867528751, 0.25629306027865456, 0.3174956426740432, 0.6691410409157791, 0.34216074075086256, 0.41052622700498825, 0.20787381265697458, 0.24684656074687156, 0.059157204783408524, 0.09921087999950767, 0.1577837373337088, 0.24341247123650286, 0.0349360467185166, 0.04952476257006665, 0.11015146630496617, 0.3096834258680349, 0.10873923419450404, 0.22855001506609182, 0.12506353584855312, 0.21339148192617274, 0.27552992714135893, 0.2856850559341426, 0.1030371797097131, 0.13390861228278086, 0.2636792555444422, 0.893165666506883, 0.08429486584755401, 0.3507344128286036, 0.14119030375717806, 0.5196711285854415, 0.4401867793572722, 0.2352032980278638, 0.11435753891251008, 0.8014239269325099, 0.14049462286293782, 0.32386614994785795, 0.44218387694301, 0.40383610415197724, 0.36913348953886777, 0.5010651587545225, 0.387314586914714, 0.22160759602078983, 0.4205037438474226, 0.43163707682913605, 0.13995035944933037, 0.3922494199763857, 0.42653247220998164, 0.054726859366821035, 0.45779161745918373, 0.43747237985239523, 0.31752338778328604, 0.5360101946079738, 0.49130806389157483, 0.5881507025535551, 0.5881419968394571, 0.46485617707336674, 0.4290808872617543, 0.4193585250032003, 0.26306478341597944, 0.06843381418329048, 0.6163460855125928, 0.40289464118857155, 0.6223588736242609, 0.4090949149384683, 0.43494388961823255, 0.4689708559785723, 0.4270333299818607, 0.46500455758973835, 0.630140632028199, 0.5953123596424702, 0.8735073171152814, 0.621241559120774, 0.8431008003403646, 0.1281820125070907, 0.7961156292697362, 0.14079317388507678, 0.21680747107667403, 0.12617494198745322, 0.3259573697576493, 0.37385513674666543, 0.15036662123852457, 0.45000369714620003, 0.8316790675379158};
//        /**
//         * 5 kraju
//         */
//        int[] use_prod = new int[]{106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,193,194,195,196,197,198,199,200,201,202,203,204,205};
//        int[] use_inc = new int[]{10,27,32,35,36,37,38,39,7,8,21,1,6,34,16,17,20,28,29,33};
//        vector = new double[]{0.027654526309586314, 0.12410845806839871, 0.15306045755034686, 0.6715395711344049, 0.020766762894151386, 0.20812483581008495, 0.23813881759424937, 0.3009803901829723, 0.34529019611449663, 0.5761270455110936, 0.41045948860592063, 0.4269067663367883, 0.11333780220392564, 0.17936646859451927, 0.054867765896425946, 0.044711129481874785, 0.21281809353057668, 0.26145940884777663, 0.14623673294565043, 0.0019315221678859254, 0.18902908057235973, 0.3518628041507479, 0.18970365454759291, 0.49864173797355527, 0.6250169833136864, 0.5158816016095192, 0.511925743964834, 0.4645342948869835, 0.25056439184413515, 0.5317405798231551, 0.5452724892214458, 0.6454090661789228, 0.42980050302157713, 0.8558865197292872, 0.3856823833537816, 0.14784036789145658, 0.1597066438987981, 0.15311540910905247, 0.8692693815924362, 0.38737162903344485, 0.3323374692697625, 0.4653703798243092, 0.1391921524885676, 0.17503853252678436, 0.3345150897954656, 0.3476022393864431, 0.1666995448960052, 0.3591074170836931, 0.16756326971699412, 0.2907146245593648, 0.10423547745150505, 0.805033372631807, 0.42478768967474667, 0.1908481855878535, 0.2802537219477613, 0.16439623478613508, 0.4990134180953718, 0.8942614033993465, 0.3941292101559847, 0.19988521133816467, 0.4063369668330046, 0.1548112932987159, 0.2752250893074805, 0.4577413451120706, 0.4429968953049047, 0.48748281683075056, 0.3545895479531129, 0.3521628246579449, 0.5316940641792461, 0.34310028378695845, 0.43264987285742795, 0.2518245309085423, 0.5730855725330082, 0.4758185199310765, 0.9479611199492562, 0.48616746248007586, 0.5576681320854164, 0.15920311780653587, 0.835502625812101, 0.4275522114413887, 0.6088073804884742, 0.47792024219256773, 0.6070578898522139, 0.5167938378463718, 0.8697860844453308, 0.4604971715339534, 0.3179928489190208, 0.26798354439292793, 0.40839643857968255, 0.5610813128834619, 0.6345413003724905, 0.4079199341983713, 0.8255710302151865, 0.19654578561241853, 0.1962379212687391, 0.42582179070747816, 0.30396670979096413, 0.8067553268801038, 0.9045920865036128, 0.800213269738635, 0.35407808374689753, 0.43939000667494726, 0.8647157753343371, 0.8529405441992877};
//        /**
//         * 6 kraju
//         */
//        int[] use_prod = new int[]{178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,193,194,195,196,197,198,199,200,201,202,203,204,205};
//        int[] use_inc = new int[]{12,23,25,10,27,32,35,36,37,38,39,7,8,21,1,6,34,16,17,20,28,29,33};
//        vector = new double[]{0.2594204419917776, 0.12787218811303258, 0.16433993010026055, 0.1896397686343226, 0.11729218240573014, 0.10915460635472385, 0.5419930980728855, 0.221229024163206, 0.1932854134996613, 0.16483660080482282, 0.24866460893817757, 0.2732983985299457, 0.47744152132499035, 0.016823765847919614, 0.14598957083338288, 0.17950791441773922, 0.05890760878140457, 0.06523191149292754, 0.04592859324251721, 0.2104707486339038, 0.2249014496680966, 0.24079652450435973, 0.023736707881129717, 0.4938119261487814, 0.6941819499921249, 0.5313502371852669, 0.14908043461007525, 0.03424708395657803, 0.5486711928937578, 0.5274906373173712, 0.8839807947389937, 0.9021823578293819, 0.022008446894970196, 0.0731629221320352, 0.018526623819539068, 0.15081042127693267, 0.5198494986751687, 0.034107977959400015, 0.13492395886294495, 0.48038037274741185, 0.5641534567138735, 0.07637770239466121, 0.1660151863730595, 0.5287384403099645, 0.5045215019929441, 0.2957586255728407, 0.543050777114563, 0.2505725855644309, 0.16339680130514445, 0.4938062240019007, 0.5495844578151715, 0.41855589961896755, 0.4660290477907861, 0.28539112232460856, 0.30051854153561686, 0.28908286071130607, 0.22678048823652877, 0.29418807452442, 0.3686857204256098, 0.3976854700512837, 0.27141348374809326, 0.27004151469214166, 0.40389897945191405, 0.3599034586684011, 0.5519637936922323, 0.4735586022849672, 0.4916994682194164, 0.3010940139710509, 0.2676835510218876, 0.326056613245844, 0.3880842316850846, 0.6345058443084844, 0.4871555972000598, 0.433807235484158, 0.2936544794626939, 0.3781855017603498, 0.1573603552294498, 0.17110368390460842, 0.24852755871637477, 0.27104403353017276, 0.5543366034605139, 0.3459903596014576, 0.5389286810672527, 0.1650980630686839, 0.5320956906580752, 0.46166720555011276, 0.28218777453927835, 0.48864574540085065, 0.653432050029772, 0.8299026223242019, 0.9728679505389195, 0.5050410694419137, 0.5483903404722422, 0.274909701578756, 0.6202185975296104, 0.6475738716865408, 0.8310430945130616, 0.9271568479290945, 0.5293513015798195, 0.2985712822769804, 0.5464702953116298, 0.6656892529159977, 0.6640191908272385, 0.48471694374890995, 0.5280844564857193, 0.28403710324507436, 0.2948412443563072, 0.6587691868194538, 0.6694771010340745, 0.26201748424090565, 0.275647036158784, 0.8600148210643987, 0.24407801138326207, 0.8580718897255806, 0.561609910685125, 0.024417609189353706, 0.9510406753017825, 0.24308368952231896, 0.9006542799132904, 0.8703999992644844, 0.8770743610909522, 0.8496723864217861};
//        /**
//         * 7 kraju
//         */
//        int[] use_prod = new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,193,194,195,196,197,198,199,200,201,202,203,204,205};
//        int[] use_inc = new int[]{9,19,12,23,25,10,27,32,35,36,37,38,39,7,8,21,1,6,34,16,17,20,28,29,33};
//        vector = new double[]{0.34710620801257264, 0.025603716501622464, 0.2394036343822386, 0.22754012870452922, 0.1099511974119185, 0.5127820657048137, 0.102584350229994, 0.20481835845423835, 0.01998224938624167, 0.14035173301507864, 0.15040905092650353, 0.27255147747842495, 0.29006389635600505, 0.27729500716271405, 0.6852358209294651, 0.43229211875183676, 0.16538878210024344, 0.17451835241314723, 0.26064523938980544, 0.2930424041930448, 0.08950793639188395, 0.1630217701541979, 0.27411647901978076, 0.03286324593549394, 0.3644409786565737, 0.015558822921888954, 0.012366711339554248, 0.14941639080121288, 0.08409890793221281, 0.7188126536799977, 0.1004281441860162, 0.03899057541789528, 0.02391642859978675, 0.11976939317484818, 0.09656411524349029, 0.027391461528761374, 0.03436361375683894, 0.09689728222108487, 0.039032341529259246, 0.23443079042784187, 0.151314554480278, 0.23551680989266288, 0.5798988208720037, 0.9839175952644009, 4.577688824510262E-4, 0.5505251490611376, 0.22839252128437837, 0.690975376588284, 0.5550824770628695, 0.11689824912154334, 0.10180129503778343, 0.09732867954308, 0.14931522722779, 0.033333473519825615, 0.2051108377320414, 0.9695580620915509, 0.22323125614333214, 0.40541385711186806, 0.0962641019209404, 0.7120308697498601, 0.46635850280592894, 0.5777133546834897, 0.14888087190976418, 0.1431790494635753, 0.8478431156675694, 0.21310013963267044, 0.5408487018704967, 0.14204042545862786, 0.5303689244694648, 0.37543695173746067, 0.13966406867659387, 0.5792011934836598, 0.4678237797285347, 0.5532008352255625, 0.542437842974334, 0.3125462241438862, 0.4763149277336891, 0.45802986832610804, 0.37606057151610106, 0.48620003991303307, 0.5598471135721192, 0.46684437272142565, 0.4148951317301156, 0.2827753969690456, 0.4151899027290929, 0.49783186378518857, 0.5480242524388501, 0.5851263343090758, 0.3003253148436895, 0.4515241923936496, 0.6729973114255337, 0.3920330045606554, 0.2842517268631752, 0.5773425775124587, 0.9181849828778323, 0.37237644205430354, 0.7876824241881148, 0.5454072888933517, 0.7039870654057294, 0.597593554010097, 0.21234910193151957, 0.6135349263133099, 0.7699042243896912, 0.8458308015248672, 0.48062589210196366, 0.2313313214966471, 0.989018622660922, 0.5559163760775523, 0.5551282751480753, 0.6425042122680397, 0.5888391745971129, 0.5641352331715728, 0.5984436957530073, 0.6068948375128504, 0.155734048142122, 0.13068896797659624, 0.09843728339731589, 0.08924930218243204, 0.15781829787912233, 0.847639356492329, 0.5722744915362934, 0.8732296519015147, 0.575079231708933, 0.565256808115056, 0.6922848260224193, 0.5601885802304724, 0.5930055113108972, 0.20103971606428764, 0.590658927600651, 0.8538919268439131, 0.5632633328000638, 0.591505147351777, 0.9000757302762984, 0.8967407498974507, 0.5888278325003342, 0.5688729804909227, 0.842485739436472, 0.9198013446828993, 0.40212476585616663, 0.44605780355618974, 0.9008978979703157};
///**
//         * 10 kraju
//         */
        int[] use_prod = new int[]{178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,39,40,41,42,43,44,45,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,0};
        int[] use_inc = new int[]{12,23,25,10,14,18,2,11,13,26,15,22,24,4,5,31,9,19,3,30,0};
        vector = new double[]{0.24056715096359704, 0.24748481144561452, 0.0663546118986588, 0.542505971740722, 0.563186733601422, 0.24169675010039882, 0.7888460732486589, 0.48559648729524396, 0.5968553194460173, 0.562923838245754, 0.38586273923996195, 0.19621834358064222, 0.09644446536466478, 0.7786123148319811, 0.3033474634955202, 0.3050315071971889, 0.5218642159112421, 0.3271554089681036, 0.9161058766480142, 0.14661804031169595, 0.4274127881771534, 0.16163539036868455, 0.16531276535019235, 0.8067254919871871, 0.18047770307610295, 0.05723558347043279, 0.03602911220599203, 0.06817820151968129, 0.1701811752746124, 0.624851341475703, 0.6472676540298349, 0.046741249717432334, 0.7832307233983484, 0.8545500801359511, 0.046906619458036314, 0.2137396131437534, 0.1673968028707156, 0.6879360808862623, 0.14460802711802517, 0.21051246981634908, 0.2608578673617912, 0.23870550410068517, 0.1874844429922405, 0.02657440462256673, 0.20543616132811493, 0.1904070271259183, 0.194236873935794, 0.0833761497742945, 0.07220206544325358, 0.2700884548271003, 0.26346989337564786, 0.1802907549420017, 0.1581076586306553, 0.26805731693709023, 0.20776085622592072, 0.44737708848077634, 0.15135068808890573, 0.699097961936028, 0.20307314731586557, 0.22651448664824603, 0.18787613813606596, 0.6988649850380988, 0.15325678841952334, 0.27044476016096974, 0.1973129705935786, 0.20726828847814294, 0.44474465520511075, 0.38931503939847895, 0.664655750792309, 0.18201663851882688, 0.9058256969608184, 0.41772941105058214, 0.1801553987113068, 0.4114000452503558, 0.6452523013348856, 0.6615707653215039, 0.3374298859479812, 0.334071092487251, 0.6813658343022938, 0.409447130375458, 0.7676880577266616, 0.360579736166664, 0.673850646704551, 0.3418425113035592, 0.3432666977816219, 0.3425240470108937, 0.4003297387940025, 0.367599741755417, 0.17155425307894592, 0.776694780553736, 0.7360819898229249, 0.5032331113484774, 0.33615444842984893, 0.3550413678071585, 0.5117992332711369, 0.3827641753424119, 0.6627315377875362, 0.40900995340605645, 0.39261256338675854, 0.661490655144614, 0.7379489750416754, 0.6301227493278111, 0.05675405064229966, 0.6407334255747887, 0.16877945718863474, 0.7572441110857697, 0.7215560296111098, 0.65170595216412, 0.0395584392065094, 0.34219753704176054, 0.8045397352022574, 0.6717924012430134, 0.16197004576103105, 0.6466942692578402, 0.6220785229278292, 0.14951523607429174, 0.22338767692305672, 0.1756739530046444, 0.22467639715166815, 0.7474532176977917, 0.7101853218185373, 0.7493968012691636, 0.3674930628100057, 0.7060589747171323, 0.6683135675508555, 0.8178152782716128, 0.7735983599355505, 0.8304516091675505, 0.7764185016976811, 0.028830465257019544, 0.7843391955684138, 0.8056599550956087, 0.8175244716201453, 0.8246809154789403, 0.764038376508907, 0.8223256719514189, 0.09434164406550202, 0.7653291561739757, 0.8420646831163906, 0.7987149845744199, 0.8009662496857263, 0.7664720840162276, 0.7456768944259268, 0.8232439507120619, 0.8315352865997581, 0.8277445020386653, 0.7493016989293212, 0.7287590108205921, 0.8430075524116329, 0.7184539905015643, 0.8022310506299908, 0.8409785528496199, 0.8426308512922964, 0.3655946627337017, 0.4827400595095022, 0.9202974153128574, 0.3706712129215108, 0.3809620281348332};
//
//        /**
//         * CR
//         */
//
//        vector = new double[]{0.39014425095207683, 0.2863494478385407, 0.4508214068588813, 0.4347710928813684, 0.8675328701061108, 0.3807608834358387, 0.20364128775657064, 0.1123017613430535, 0.3659675278761556, 0.2610352892637097, 0.33111104547456505, 0.3768122964329915, 0.37597415339948936, 0.34941013856740166, 0.403473412876895, 0.4191545945801036, 0.376550911676442, 0.5434262730030368, 0.36687755810007433, 0.2748712351264343, 0.20994523263657405, 0.0038739202987934096, 0.004009504650109963, 0.2639135192752444, 0.9903228385485356, 0.1326362813228865, 0.09249477229813854, 0.1554425855200088, 0.4997787654255086, 0.032061923795777963, 0.09736188069973528, 0.378722358242565, 0.20883737228629057, 0.38453300631055487, 0.18745475405984602, 0.628883864935613, 0.1687117469803063, 0.22405295122432506, 0.06767075284165697, 0.16701550354344896, 0.11975728015259479, 0.3413294523208924, 0.7043478062905164, 0.3277453933302736, 0.24286613122362152, 0.5179443652687756, 0.245719713758288, 0.13876393844799506, 0.3247238512468071, 0.22826932053245572, 0.4899875823819875, 0.29653790165692967, 0.782980485759351, 0.7866418703516401, 0.2665367969404777, 0.3281956692994904, 0.2429973717092901, 0.20916240911037734, 0.1383103287374256, 0.17540182624832135, 0.8095909261549677, 0.15073105169767598, 0.8760496478245868, 0.20177093421113612, 0.1612067543945051, 0.7160302484237311, 0.25108586797450494, 0.4358223614146975, 0.15137515850519484, 0.1581836615421157, 0.25071055108630513, 0.15038076214116483, 0.1532989362263183, 0.25059647511687944, 0.16931004310412684, 0.5237193049208886, 0.17870708476553024, 0.3243254815484686, 0.21916280744842198, 0.3931970630913453, 0.48897921560532287, 0.609025675190922, 0.28776097489734326, 0.38546802812111175, 0.38769981721093105, 0.11039134700142988, 0.2075023421817811, 0.4685530394946353, 0.2876418432834653, 0.2644668467904579, 0.2013473150286722, 0.8790702697243042, 0.25291518648445344, 0.3586893879340854, 0.45001392404560075, 0.25815597769420373, 0.36320398104082235, 0.21596946362020186, 0.3512401810731037, 0.3697374533998404, 0.5966486172483462, 0.7780692909044569, 0.2798688682112846, 0.46279377602656135, 0.4656645681510613, 0.7748676805128272, 0.3475634494053686, 0.05458193155957697, 0.1382664745495379, 0.29357960158341584, 0.3286394886817293, 0.8845471387579104, 0.8809928221498475, 0.9420309644498952, 0.9457660000991246, 0.9663430472553453, 0.8289860367180952, 0.5233380850040571, 0.9287630092100112, 0.9258653393462364, 0.938592613334564, 0.5081696892041405, 0.8816098937343334, 0.9769760426948435, 0.9287096238946134, 0.8823216179170776, 0.2526756548441867, 0.426957408829466, 0.9269115898820051, 0.8802372910875536, 0.8377478355955662, 0.9948292150095056, 0.9842442252356915, 0.4060961611350705, 0.45285691334141814, 0.21747034490374717, 0.42671115140807664, 0.5065528408994995, 0.5126711778754773, 0.8139438312995297, 0.9197906790550562, 0.7867313310376611, 0.2574328797074871, 0.8183608269844939, 0.22392398024529092, 0.16770592480933064, 0.5097373773551624, 0.2261438714386333, 0.34735774403222563, 0.5933496156094031, 0.9891007472784149, 0.5140115536806964, 0.36269300141892263, 0.4733554514341004, 0.3700075394710683, 0.2621283395035723, 0.277285988325791, 0.14944541576995551, 0.46061056583972654, 0.14822498709185183, 0.3578929032326884, 0.48893660717937715, 0.3354132067075717, 0.47875389133181107, 0.3992147188110754, 0.3985280312978351, 0.22750988625366844, 0.23981478446866533, 0.36853549867764657, 0.26226424705974155, 0.2615435060863798, 0.7961524020056888, 0.7960838005094787, 0.6141394574916876, 0.37907705294891225, 0.2929548568423517, 0.23636730012280238, 0.7893939103132865, 0.4856517540271836, 0.4726725565547359, 0.7145279517336727, 0.3073924606586947, 0.11468907625879471, 0.2780872091117753, 0.12389611313942306, 0.24678187652568256, 0.6014924054017614, 0.5810929551627084, 0.34213934119676004, 0.1273553639972107, 0.2848269097088064, 0.11629863843062427, 0.10757478317674923, 0.25508454355350396, 0.05955010167297866, 0.32907548161765, 0.3484110681825871, 0.3817888928305089, 0.4909223081817126, 0.2840392473677085, 0.5783535095983741, 0.7792621993942587, 0.29833445599968295, 0.14240252953473745, 0.3541267847203322, 0.08255864143455627, 0.3273512619253965, 0.3637853960178336, 0.11517164669153794, 0.13257242554804993, 0.3072801479320368, 0.622847357378794, 0.14446073946235763, 0.14105403430450658, 0.10079512257187662, 0.6249833126701397, 0.06900627260494871, 0.1468116066202851, 0.5785270331095349, 0.3175754869953521, 0.21168316922412722, 0.22012742984349531, 0.10032869798533697, 0.8344176777951041, 0.1529812095869668, 0.5853706708969582, 0.2556101035107693, 0.22431312465799336, 0.14405264628354303, 0.1428992159112516, 0.4888811781840114, 0.3020812336215427, 0.5944440558019011, 0.8110922861213707, 0.7213187837208203, 0.8755576616724571, 0.449807855493932, 0.9097858541977941, 0.44714599658287346, 0.8988495444881622, 0.8917414444049765, 0.7076689303663309, 0.26920227389453266, 0.1569258126750062, 0.7190516964390382, 0.40535233954987376};

        /**
         * Pro CR
         */
//        Spalovny_projekt sp = new Spalovny_projekt();
        
        /**
         * Pro subset
         */
        Spalovny_projekt sp = new Spalovny_projekt(use_inc, use_prod);


        System.out.println(sp.fitness(vector));
        
        Map<String, List> map = sp.getOutput(vector);
            
        System.out.println("=================================");
        String line;

        if(map == null) {
            return;
        }
        
        if(map != null){
            for(Map.Entry<String,List> entry : map.entrySet()){
                line = "";
                System.out.print(entry.getKey() + " = ");
                line += "{";
//                System.out.print("{");
                for(int pup = 0; pup < entry.getValue().size(); pup++){
//                    System.out.print(entry.getValue().get(pup));
                    line += entry.getValue().get(pup);
                    if(pup != entry.getValue().size()-1){
//                       System.out.print(","); 
                       line += ",";
                    }
                }
//                System.out.println("}");
                line += "};";
                line = line.replace("[", "{");
                line = line.replace("]", "}");
                System.out.println(line);

            }
        }

        System.out.println("=================================");
        
    }
    
}
