
package model.tf.nwf;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.Individual;
import model.tf.Cec2015;
import model.tf.TestFunction;
import util.Dijsktra;
import util.Dijsktra.Vertex;
import util.IndividualUtil;
import util.random.Random;
import util.random.UniformRandom;

/**
 *
 * This class represents the basic solution of incinerator facility locations
 * Locations and capacities based on the projected incinerators.
 * 
 * @author wiki on 31/01/2017
 */
public class Spalovny_projekt implements TestFunction {

    double[][] adjM;
    double[] garbage_production;
    double production_sum;
    int facility_count;
    int[] number_of_cities;
    double[] capacity_options;
    //39 cities
    //cities with incenerators - Praha [0], Brno [20], Liberec [65], Plzen [129]
    //cities of possible incenerators - Melnik [149], Kolin [145], Hodonin [24], Olomouc [99], Prerov [101], Ceske Budejovice [2], Pardubice [114], Litvinov [167], 
    //Jihlava[182], Usti nad Labem[175], Trutnov[59], Ostrov[44], Chropyne[195], Valasske Mezirici[202], Nachod[54], Strakonice[11], Zlin[205], Prostejov[100], Frantiskovy Lazne[40], Zdar nad Sazavou[192]
    //Cheb[40], Trebic[190], Varnsdorf[176], Bruntal[73], Vsetin[204], Otrokovice[197], Klatovy[125], Pribram[155], Detmarovice[81], Uherske Hradiste[199], Znojmo[37], Ostrava[89], Havirov[78], Karvina[81], 
    //Frydek-Mistek[76], Opava[87]
    double[][] possible_capacities;
    double[][] possible_prices;
    int[] incinerator_indexes;
    double unused_penalty = 500;
    double overused_penalty = 100_000;
    double path_penalty = 5;
    
    public Spalovny_projekt() {
        
        this.adjM = new double[206][206];
        this.garbage_production = new double[]{421456.20,4618.37,40328.62,10267.64,6054.39,12617.38,5237.12,4892.46,11682.76,8108.45,7039.16,12327.33,26770.87,5010.74,8555.13,4609.10,5111.39,3988.39,14070.61,14343.59,119805.75,19561.32,4147.45,18887.91,10201.53,8107.61,6250.03,16045.27,4836.13,6307.23,4056.93,6973.76,5520.20,19984.11,8029.20,9128.13,14495.34,24822.35,10501.02,8511.10,16835.81,25171.38,3399.31,9079.82,7454.33,21032.18,4472.56,7215.61,6201.28,6119.69,51330.69,4445.92,15210.71,6734.93,15135.70,2793.67,3637.41,4976.93,9159.88,21280.52,9544.94,24765.51,8079.11,14040.02,5842.87,50333.33,9278.74,5987.36,6045.85,8719.04,3054.00,6051.64,11312.84,9453.26,8867.39,5051.98,32099.15,9986.36,27737.28,11916.22,5641.20,21873.89,16721.48,5193.34,12028.95,12322.73,5130.85,34858.49,12588.02,82707.62,1259.73,14886.78,7083.38,10695.23,9435.95,2755.95,5084.76,7126.47,6041.74,50918.85,29322.16,26006.27,8264.66,23361.72,7493.42,10543.17,5522.79,5866.35,4096.67,23156.53,2795.28,5124.32,6425.70,7346.90,35345.02,4735.35,8529.37,7744.97,8204.27,8258.16,8342.36,3092.94,9674.67,4317.68,4435.00,15640.78,8605.63,2680.56,13789.02,60292.82,6006.31,17997.80,6725.98,5591.85,7701.58,11773.66,21185.92,17639.47,41796.62,7931.37,44712.79,10010.61,7328.53,11285.26,34601.82,34060.59,12471.84,20311.27,8569.94,17996.19,36791.19,4792.82,14507.71,16659.05,12347.36,23618.15,18237.74,24668.06,7006.08,12956.23,10422.35,4519.41,5779.48,22885.43,22103.19,14204.32,23938.29,13171.29,13841.54,9880.92,21436.48,6069.16,7595.05,10984.90,35240.52,29269.43,7066.70,9149.82,4840.89,17531.07,5802.00,5711.93,25640.05,5779.25,2753.40,4690.38,3137.53,13686.97,5994.54,3524.22,19105.03,10862.11,12096.55,4842.76,7432.78,18157.25,5126.45,10345.50,10415.80,24179.22,15164.39,5119.98,12566.70,4706.77,14186.38,27447.64};
        this.production_sum = 3.24217685000*Math.pow(10,6);
        this.facility_count = 39;
        this.number_of_cities = new int[]{206, 206};
        this.capacity_options = new double[]{250_000, 500_000, 750_000, 1_000_000, 1_500_000, 2_000_000, 2_500_000, 3_000_000, 3_500_000};
        this.incinerator_indexes = new int[]{0,20,65,129,149,145,24,99,101,2,114,167,182,175,59,44,195,202,54,11,205,100,40,192,40,190,176,73,204,197,125,155,81,199,37,89,78,81,76,87};
        this.possible_capacities = new double[][]{{0,0,88543.8},{120194.,220194.,320194.},{45666.7},{34707.2},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.},{0,10.,20000.,30000.,80000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.},{0,10.,20000.,30000.,80000.},{0,10.,20000.,30000.,80000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10.,20000.,30000.,80000.,90000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.},{0,10.,20000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.}};
        this.possible_prices = new double[][]{{1000,1400,1800},{1000,1400,1800},{1000},{1000},{0,4431.9,2720.45,1979.22,1583.37,3170.63,3069.73,2980.47,2904.15,2825.24,2764.44,2708.81,2650.6,2605.32,2562.63,2517.36,2481.14,2447.5,2409.99,2381.53,2353.07,2322.02,2297.45,2274.16,2252.17,2227.59,2206.89,2187.49},{0,4757.89,3046.44,2307.79,1919.71,3495.33,3407.36,3332.33,3266.36,3201.68,3152.52,3109.83,3064.55,3029.63,2995.99,2959.77,2933.9,2908.03,2880.86,2861.46,2842.05,2818.77,2800.66,2783.84,2765.73,2751.5,2739.86,2729.51},{0,4431.9,2728.22,2001.21,1682.98,3337.51,3265.06,3200.38,3147.34,3093.01,3056.79,3021.87,2983.06,2954.6,2937.78,2915.79,2901.56,2893.8,2878.27,2869.22,2860.16,2845.93,2836.88,2827.82,2818.77,2805.83,2796.78,2787.72},{0,4757.89,3046.44,2306.5,1909.36,3455.22,3355.62,3268.94,3192.62,3115.,3055.5,3003.75,2952.01,2915.79,2882.16,2843.35,2813.59,2786.43,2754.09,2729.51,2704.93,2680.35,2660.95,2642.84,2624.73,2604.03,2589.8,2575.57},{0,4403.44,2692.,1952.05,1554.92,3147.34,3045.15,2957.18,2879.57,2800.66,2741.15,2688.11,2632.49,2588.51,2549.7,2507.01,2472.08,2442.33,2408.7,2382.82,2356.95,2328.49,2312.97,2298.74,2285.8,2271.57,2263.81,2256.05},{0,4394.38,2688.11,1958.52,1592.43,3192.62,3099.48,3023.16,2957.18,2887.33,2833.,2785.14,2733.39,2697.17,2670.,2638.96,2616.97,2594.97,2569.1,2549.7,2530.29,2507.01,2490.19,2475.96,2463.03,2446.21,2434.57,2422.93},{0,4431.9,2720.45,1979.22,1583.37,3170.63,3069.73,2980.47,2904.15,2825.24,2764.44,2710.11,2653.19,2609.2,2567.81,2522.53,2487.61,2453.97,2417.75,2388.,2360.83,2329.79,2305.21,2284.51,2265.11,2244.41,2231.47,2218.54},{0,4431.9,2720.45,1979.22,1583.37,3173.22,3073.61,2986.94,2911.91,2835.59,2776.08,2723.04,2671.3,2637.66,2607.91,2574.28,2548.41,2522.53,2494.07,2470.79,2450.09,2425.51,2408.7,2393.17,2377.65,2358.24,2346.6,2334.96},{0,6627.15,3386.66,2319.44,1839.51,3292.23,3204.26,3169.34,3143.46,3122.77,3109.83,3096.89,3074.9,3060.67,3046.44,3025.75,3011.52,2997.29,2977.88,2963.65,2950.72},{0,4422.84,2711.4,1970.16,1573.03,3162.87,3060.67,2972.71,2895.09,2818.77,2759.26,2706.23,2649.31,2605.32,2563.93,2519.95,2485.02,2452.68,2416.46,2386.7,2366.01,2344.02,2327.2,2311.68,2296.15,2275.45,2263.81,2250.88},{0,4431.9,2720.45,1979.22,1592.43,3213.32,3134.41,3065.85,3010.22,2949.42,2909.32,2873.1,2830.41,2799.36,2769.61,2735.98,2710.11,2685.53,2657.07,2635.08,2614.38,2592.39,2579.45,2566.52,2553.58,2538.06,2526.41,2514.77},{0,4509.51,3049.03,2450.09,2173.26,3697.13,3640.21,3588.46,3540.6,3487.56,3447.46,3408.65},{0,4512.1,3052.91,2453.97,2178.43,3702.3,3644.09,3592.35,3544.48,3490.15,3450.05,3411.24},{0,4129.19,2751.5,2190.08,1971.46,3603.99,3557.42,3513.44,3472.04,3424.18},{0,4380.15,2818.77,2249.58,1958.52,3522.49,3459.1,3415.12,3382.78,3342.68,3312.93,3285.76,3250.83,3226.25,3201.68,3171.92,3149.93,3129.23},{0,4478.47,2774.79,2051.66,1737.31,3390.54,3311.63,3244.37,3183.57,3120.18,3080.08,3045.15,3005.05,2975.3,2949.42,2919.67,2900.27,2882.16,2857.58,2845.93,2835.59,2822.65,2813.59,2805.83,2796.78,2785.14,2776.08,2768.32},{0,4365.92,2659.66,1935.24,1591.14,3283.17,3210.73,3146.05,3089.13,3028.33,2983.06,2944.25,2906.73,2880.86,2854.99,2825.24,2805.83,2787.72,2767.02,2752.79,2738.57,2721.75,2713.99,2707.52,2702.34,2693.29,2688.11,2682.94},{0,4534.09,3080.08,2474.67,2208.19,3728.17,3668.67,3613.04,3563.89,3508.26,3465.57},{0,4637.58,3190.03,2651.89,3849.77},{0,4333.58,2698.46,2108.58,1842.1,3429.35,3362.08,3306.46,3263.77,3217.2,3193.91,3174.51,3147.34,3129.23,3109.83,3085.25,3068.43,3051.62,3029.63,3012.81,2997.29,2977.88,2963.65,2949.42},{0,3773.45,2439.74,2038.72,3597.52},{0,4504.34,3077.49,2570.4,3813.55},{0,4253.38,2742.45,2240.53,2042.6,3668.67,3614.34,3565.18,3519.9,3468.16},{0,4244.32,2829.12,2329.79,3730.76,3669.96},{0,3514.73,1988.27,1490.23,1267.73,3038.68,2997.29,2966.24,2957.18,2948.13,2949.42,2946.84,2935.19,2930.02,2923.55,2909.32,2901.56,2892.5,2878.27,2869.22},{0,4431.9,2725.63,2033.55,1699.8,3510.85,3474.63,3439.7,3404.77,3363.38,3332.33,3302.58,3267.65,3240.48,3215.91,3186.15,3162.87,3140.88},{0,3990.78,2545.82,2077.53,1895.13,3597.52,3552.24,3509.55,3468.16,3420.3},{0,4478.47,3076.2,2464.32,1734.73,3389.25,3311.63,3246.95,3197.8,3144.76,3105.95,3069.73,3032.21,3008.93,2986.94,2962.36,2950.72,2939.07,2922.26,2911.91,2900.27,2884.74,2874.39,2862.75,2852.4,2838.17,2827.82,2817.48},{0,4431.9,2737.27,2027.08,1717.91,3372.43,3297.4,3231.43,3182.27,3130.53,3090.43,3056.79,3019.28,2990.82,2967.53,2944.25,2930.02,2917.08,2897.68,2887.33,2878.27,2862.75,2852.4,2843.35,2833.,2820.06,2809.71,2800.66},{0,3939.03,2443.62,1943.,1734.73,3434.53,3407.36,3377.61,3349.15,3311.63,3284.47,3258.6,3226.25},{0,3950.67,2693.29},{0,4281.84,2571.69,1830.45,1433.32,3041.27,2940.37,2851.11,2774.79,2695.88,2635.08,2580.75,2523.83,2479.84,2438.45,2394.47,2359.54,2327.2,2290.98,2262.52,2234.06,2204.31,2179.73,2157.74,2140.92,2122.81,2109.87,2098.23},{0,4356.87,2645.43,1918.42,1534.22,3227.55,3155.11,3094.31,3041.27,2983.06,2939.07,2898.97,2854.99,2821.36,2792.9,2764.44,2745.03,2725.63,2701.05,2685.53,2671.3,2651.89,2640.25,2629.9,2619.55,2605.32,2596.27,2592.39},{0,4356.87,2646.72,1922.3,1547.15,3250.83,3180.98,3118.89,3063.26,3003.75,2958.48,2918.38,2874.39,2845.93,2822.65,2794.19,2772.2,2752.79,2732.1,2715.28,2702.34,2685.53,2673.88,2660.95,2654.48,2644.13,2641.54,2637.66},{0,4422.84,2725.63,2030.96,1734.73,3381.49,3302.58,3234.02,3177.1,3125.35,3086.55,3050.32,3014.1,2986.94,2964.95,2936.49,2919.67,2908.03,2892.5,2883.45,2873.1,2858.87,2848.52,2839.47,2829.12,2816.18,2805.83,2796.78}};
        this.garbage_production[20] = 0;
        this.garbage_production[65] = 0;   
        this.garbage_production[129] = 0;   
        
        String location = "/adjM_spalovnyCR.csv";
        URL resource = Cec2015.class.getResource(location);
        File fpt = null;
        try {
            fpt = Paths.get(resource.toURI()).toFile();
        } catch (URISyntaxException ex) {
            Logger.getLogger(SpalovnyCR_2.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        BufferedReader br = null;
	String line = "";
	String cvsSplitBy = ",";
        int rowIt = 0;

	try {

		br = new BufferedReader(new FileReader(fpt));
		while ((line = br.readLine()) != null) {

		        // use comma as separator
			String[] row = line.split(cvsSplitBy);
                        
                        for(int columnIt = 0; columnIt < row.length; columnIt++) {
                            this.adjM[rowIt][columnIt] = Double.parseDouble(row[columnIt]);
                        }
                        rowIt++;

		}

	} catch (FileNotFoundException e) {
            Logger.getLogger(Spalovny_projekt.class.getName()).log(Level.SEVERE, null, e);
	} catch (IOException e) {
            Logger.getLogger(Spalovny_projekt.class.getName()).log(Level.SEVERE, null, e);
	} finally {
		if (br != null) {
			try {
				br.close();
			} catch (IOException e) {
                            Logger.getLogger(SpalovnyCR_2.class.getName()).log(Level.SEVERE, null, e);
			}
		}
	}
        
    }

    @Override
    public String name() {
        return "Projekt_Spaloven_CR";
    }
    
    public Map<String, List> getOutput(double[] vector) {
        
        Map<String, List> map = new HashMap<>();
        List<Integer> facility_list = new ArrayList<>();
        
        double fitness = 0;
        
        //Locations of facilities
        int[] locations = this.incinerator_indexes.clone();
//        int sum = 0;
        List<List<Integer>> facility_nodes = new ArrayList<>();
        for(int i = 0; i < facility_count; i++) {
            facility_nodes.add(new ArrayList<>());
//            locations[i] = (((int) (vector[i] * number_of_cities[i])) % number_of_cities[i]) + sum;
            facility_list.add(locations[i]);
        }
        
        map.put("facilities", facility_list);
        
        List<Double> facility_capacities = new ArrayList<>();
        
        //Capacities of facilities
        double capacities[] = new double[facility_count];
        double costs[] = new double[facility_count];
        double capacity_sum = 0;
        for(int i = 0; i < facility_count; i++){
            capacities[i] = possible_capacities[i][((int) (vector[i] * possible_capacities[i].length)) % possible_capacities[i].length];
            if(i == 0) {
                switch(((int) (vector[i] * possible_capacities[i].length)) % possible_capacities[i].length) {
                    case 0:
                        this.garbage_production[0] = 111456.2;
                        break;
                    case 1:
                        this.garbage_production[0] = 11456.2;
                        break;
                    default:
                        this.garbage_production[0] = 0;
                }
            }
            facility_capacities.add(capacities[i]);
            costs[i] = possible_prices[i][((int) (vector[i] * possible_prices[i].length)) % possible_prices[i].length];
            capacity_sum += capacities[i];
        }
        
        map.put("capacities", facility_capacities);
        
        //Capacity is not enough
        if(capacity_sum < production_sum){
            return null;
        }
        
        //Where to go from nodes
        int facility_index;
        for(int i = facility_count; i < vector.length; i++) {
            if(this.garbage_production[i - facility_count] == 0){
                switch(i-facility_count) {
                    case 0:
                        facility_index = 0;
                        break;
                    case 20:
                        facility_index = 1;
                        break;
                    case 65:
                        facility_index = 2;
                        break;
                    case 129:
                        facility_index = 3;
                        break;
                    default:
                        facility_index = ((int) (vector[i] * facility_count)) % facility_count;
                }
            }
            else{
                facility_index = ((int) (vector[i] * facility_count)) % facility_count;
            }
            facility_nodes.get(facility_index).add(i - facility_count);
        }
        
        for(int i = 0; i < facility_nodes.size(); i++) {
            map.put("facility[[" + (i+1) + "]]", facility_nodes.get(i));
        }
        
        facility_capacities = new ArrayList<>();
        //Chceck capacity of single facilities and if not over, add remaining capacity to fitness
        double garbage_sum;
        for(int i = 0; i < facility_count; i++) {
            garbage_sum = 0;
            for(Integer node_index : facility_nodes.get(i)){
                garbage_sum += garbage_production[node_index];
            }
            facility_capacities.add(garbage_sum);
            if(garbage_sum > capacities[i]){
//                return null;
                fitness += (garbage_sum - capacities[i])*overused_penalty;
            }
            else {
                if(0.1*capacities[i] < (capacities[i] - garbage_sum)) { //90% and more is without penalization
                    fitness += (capacities[i] - garbage_sum)*unused_penalty;
                }
            }
        }
        
        map.put("usedCapacities", facility_capacities);
        
        //Compute the distances and update the fitness
        List<List<Vertex>> paths;
        Dijsktra.Vertex[] vertices;
        double path_length;
        for(int i = 0; i < facility_count; i++) {
            
            paths = new ArrayList<>();
            
            vertices = Dijsktra.getShortestPathsFromAdjacencyMatrix(adjM, locations[i]);
            for(Integer node_index : facility_nodes.get(i)) {
                path_length = vertices[node_index].minDistance;
                if(path_length == Double.POSITIVE_INFINITY){
                    return null;
                }
                fitness += (path_penalty * path_length * garbage_production[node_index] + garbage_production[node_index] * costs[i]);
                paths.add(Dijsktra.getShortestPathTo(vertices[node_index]));
            }
            
            map.put("span[[" + (i+1) + "]]", paths);
            
        }
        
        return map;
    }
    
    @Override
    public double fitness(double[] vector) {
        
        double fitness = 0;
        
        //Locations of facilities
        int[] locations = this.incinerator_indexes.clone();
//        int sum = 0;
        List<List<Integer>> facility_nodes = new ArrayList<>();
        for(int i = 0; i < facility_count; i++) {
            facility_nodes.add(new ArrayList<>());
//            locations[i] = (((int) (vector[i] * number_of_cities[i])) % number_of_cities[i]) + sum;
        }
        
        //Capacities of facilities
        double capacities[] = new double[facility_count];
        double costs[] = new double[facility_count];
        double capacity_sum = 0;
        for(int i = 0; i < facility_count; i++){
            capacities[i] = possible_capacities[i][((int) (vector[i] * possible_capacities[i].length)) % possible_capacities[i].length];
            if(i == 0) {
                switch(((int) (vector[i] * possible_capacities[i].length)) % possible_capacities[i].length) {
                    case 0:
                        this.garbage_production[0] = 111456.2;
                        break;
                    case 1:
                        this.garbage_production[0] = 11456.2;
                        break;
                    default:
                        this.garbage_production[0] = 0;
                }
            }
            costs[i] = possible_prices[i][((int) (vector[i] * possible_prices[i].length)) % possible_prices[i].length];
            capacity_sum += capacities[i];
        }
        
        //Capacity is not enough
        if(capacity_sum < production_sum){
            return Math.pow(10, 30);
        }
        
        //Where to go from nodes
        int facility_index;
        for(int i = facility_count; i < vector.length; i++) {
            if(this.garbage_production[i - facility_count] == 0){
                switch(i-facility_count) {
                    case 0:
                        facility_index = 0;
                        break;
                    case 20:
                        facility_index = 1;
                        break;
                    case 65:
                        facility_index = 2;
                        break;
                    case 129:
                        facility_index = 3;
                        break;
                    default:
                        facility_index = ((int) (vector[i] * facility_count)) % facility_count;
                }
            }
            else{
                facility_index = ((int) (vector[i] * facility_count)) % facility_count;
            }
            facility_nodes.get(facility_index).add(i - facility_count);
        }
        
        //Chceck capacity of single facilities and if not over, add remaining capacity to fitness
        double garbage_sum;
        for(int i = 0; i < facility_count; i++) {
            garbage_sum = 0;
            for(Integer node_index : facility_nodes.get(i)){
                garbage_sum += garbage_production[node_index];
            }
            if(garbage_sum > capacities[i]){
                fitness += (garbage_sum - capacities[i])*overused_penalty; 
//                return Math.pow(10, 30);
            }
            else {
                
                if(0.1*capacities[i] < (capacities[i] - garbage_sum)) { //90% and more is without penalization
                    fitness += (capacities[i] - garbage_sum)*unused_penalty;
                }

            }
        }
        
        //Compute the distances and update the fitness
        Vertex[] vertices;
        double pathe_length;
        for(int i = 0; i < facility_count; i++) {
            
            vertices = Dijsktra.getShortestPathsFromAdjacencyMatrix(adjM, locations[i]);
            for(Integer node_index : facility_nodes.get(i)) {
                pathe_length = vertices[node_index].minDistance;
                if(pathe_length == Double.POSITIVE_INFINITY){
                    return Math.pow(10, 30);
                }
                fitness += (path_penalty * pathe_length * garbage_production[node_index] + garbage_production[node_index] * costs[i]);
            }
            
        }
        
        return fitness;
    }

    @Override
    public double fitness(Individual individual) {
        
        
        return fitness(individual.vector);
    }

    @Override
    public void constrain(Individual individual) {
        IndividualUtil.randIfOutOfBounds(individual, 0, 1);
    }

    @Override
    public double[] generateTrial(int dim) {
        double[] vector = new double[dim];
        Random rnd = new UniformRandom();
//        for (int i = 0; i < 39; i++) vector[i] = rnd.nextDouble(0.9, 0.95);
        for (int i = 0; i < dim; i++) vector[i] = rnd.nextDouble(0, 1);
        return vector;
    }

    @Override
    public double fixedAccLevel() {
        return 10^-7;
    }

    @Override
    public double optimum() {
        return 0;
    }

    @Override
    public double max(int dim) {
        return 1;
    }

    @Override
    public double min(int dim) {
        return 0;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        
        Spalovny_projekt sp = new Spalovny_projekt();
        double[] vector = new double[206+39];
        vector = new double[]{0.7092773270578469, 0.03168693506452129, 0.27650258787460413, 0.7382766311860336, 0.7487010479894802, 0.4378301762448542, 0.373646671281762, 0.19143661423023162, 0.35778793397293607, 0.4285237580177736, 0.26703166897284936, 0.2877786449294619, 0.40008222337870236, 0.38077324539497215, 0.2840939799568581, 0.5223196817331013, 0.36948294790945857, 0.5029920016859868, 0.18198250231857105, 0.25277242091095675, 0.18497060450837957, 0.8863767915030638, 0.742927844556582, 0.36976896448096075, 0.6994546311348135, 0.7705124544792121, 0.7347899693762701, 0.7734204201454314, 0.21036650827398423, 0.43130480405274674, 0.32393713514575284, 0.24809795170258442, 0.3301511358265695, 0.18707366922659935, 0.8132399282894287, 0.2039545519640235, 0.08913620065342662, 0.13848722086141693, 0.20885905501280727, 0.7271605404887127, 0.5106893554301637, 0.23593875057696082, 0.25050888405067906, 0.6629861510739499, 0.2521825746615571, 0.2394405974512381, 0.8175133519036292, 0.4889665173856524, 0.49969291496259693, 0.2505239857097381, 0.5058161551315716, 0.24252336115796513, 0.2467877125199385, 0.24930878915907173, 0.23525526177027184, 0.5071987913018504, 0.5019695687797335, 0.0382673276817091, 0.029001128792864928, 0.4892106668343222, 0.1655744280041192, 0.030055866949794827, 0.1628209283990819, 0.15521689369628308, 0.03761430445623873, 0.04463961950567166, 0.1688867100650927, 0.15673801807195303, 0.8859978890854291, 0.049219088945025274, 0.660546149560471, 0.0416094275765051, 0.035237908842218446, 0.045481027774763705, 0.8551545835830239, 0.41950180532923104, 0.042323758672166215, 0.044609356921133055, 0.6267800551711515, 0.6300562185079758, 0.400203522531011, 0.6263311092191559, 0.5807645484089561, 0.38910441894777215, 0.5642708006211317, 0.4806876928780698, 0.26261835743445205, 0.3803640534055704, 0.3686471447857004, 0.27103769641216363, 0.4794736778051732, 0.057115355961618014, 0.3776563734584917, 0.36154530837225707, 0.3742573743103389, 0.4851959859932636, 0.2656793383560093, 0.473163341873055, 0.36450564986322664, 0.37032033567853123, 0.6734034765509695, 0.6683702443874036, 0.6728471523415694, 0.07157751217147523, 0.702792544318919, 0.6782568993701252, 0.38290071562049494, 0.06405197498696114, 0.052373557034739754, 0.06352101278732349, 0.902741559629616, 0.9068745275188121, 0.7159897751350358, 0.9525074856521646, 0.736606298292126, 0.9851699328820164, 0.9112799188312923, 0.8368319491179531, 0.9101090823706208, 0.9554034230455857, 0.981869645961394, 0.9803337652787149, 0.9136491967450437, 0.7013991641591105, 0.4510785471361176, 0.7209196630921201, 0.9026722377406458, 0.926539957674026, 0.8206013497012488, 0.7069490811776553, 0.9739276190015436, 0.7061676761482958, 0.20854619275648367, 0.7004585888813293, 0.5590102546593337, 0.22195352534646887, 0.19037366225101687, 0.19656684756438986, 0.20587441083155383, 0.5632332846783449, 0.20582916944198312, 0.1900075751035304, 0.18900072175441138, 0.20098709665069087, 0.1904865135373534, 0.47648439260661735, 0.601864852957704, 0.28143731045525866, 0.13743352313915058, 0.1943729564763194, 0.28160996784628406, 0.6082529803452696, 0.543513011522699, 0.1399031042152026, 0.6138157173732504, 0.28110763107957293, 0.6000428002596826, 0.6148847482233595, 0.2684351972904626, 0.2786388822618411, 0.08027089387547048, 0.5029460053123782, 0.4968870282994707, 0.09758633631799785, 0.8137110928454873, 0.10087619418919869, 0.7808806160509651, 0.7722010521578491, 0.7539869202636227, 0.0943678586984843, 0.8127996605164985, 0.7892093431477086, 0.09367831822775863, 0.5117042696957022, 0.4037981936736117, 0.009024178153257852, 0.007950946711876128, 0.10806978041363796, 0.14064146271606953, 0.11094400885003347, 0.024716609594770456, 0.8018625205680205, 0.8058276346664428, 0.11379312676509182, 0.13274068748371856, 0.02232267508003649, 0.12883825930409148, 0.005973890256891389, 0.1211235963447468, 0.3417278576104219, 0.05163699951806083, 0.10528255669931097, 0.15219095017512296, 0.14724215479749364, 0.7977866550388293, 0.11043594881370367, 0.5028411628241971, 0.8014522209753233, 0.10660351840971533, 0.01987300463671688, 0.0018784627753288818, 0.2911222554966465, 0.3496515340782455, 0.2849314837353819, 0.38973967857353015, 0.34137265911931564, 0.2973986510745366, 0.2955342769513558, 0.34527046311414356, 0.28813301356384574, 0.08396265372213826, 0.1243547608472394, 0.6787944357701845, 0.12181234915921196, 0.34780907769234537, 0.6917054231937065, 0.2895021193233194, 0.6085203379678547, 0.3289439661649925, 0.3154394200220533, 0.6046664767353134, 0.32107037029447727, 0.8915942923066553, 0.647590547970271, 0.5902702454600923, 0.31921703672081764, 0.31063902313503244, 0.3309372492171409, 0.3244122190688593, 0.32276719666310005, 0.6593798896513703, 0.5928536161787639, 0.7283155841649186, 0.20632782795591964, 0.4349601404545243, 0.7415335368263494, 0.7603053699590079, 0.4552273288122013, 0.7489212134533122, 0.5178038711588071, 0.7187362232162217, 0.4475200422028115, 0.5220020686112865, 0.7349242179609915, 0.516950515622276};
        System.out.println(sp.fitness(vector));
        
        Map<String, List> map = sp.getOutput(vector);
            
        System.out.println("=================================");
        String line;

        if(map == null) {
            return;
        }
        
        if(map != null){
            for(Map.Entry<String,List> entry : map.entrySet()){
                line = "";
                System.out.print(entry.getKey() + " = ");
                line += "{";
//                System.out.print("{");
                for(int pup = 0; pup < entry.getValue().size(); pup++){
//                    System.out.print(entry.getValue().get(pup));
                    line += entry.getValue().get(pup);
                    if(pup != entry.getValue().size()-1){
//                       System.out.print(","); 
                       line += ",";
                    }
                }
//                System.out.println("}");
                line += "};";
                line = line.replace("[", "{");
                line = line.replace("]", "}");
                System.out.println(line);

            }
        }

        System.out.println("=================================");
        
    }
    
}
