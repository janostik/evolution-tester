package model.tf.nwf;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.Individual;
import model.tf.Cec2015;
import model.tf.TestFunction;
import util.IndividualUtil;
import util.random.Random;
import util.random.UniformRandom;

/**
 *
 * 
 * 1. Solution is processing of garbage in the nearest facility with enough capacity.
 * 2. The incinerator with the least used capacity is removed and its producents assigned to the second nearest.
 * 3. Step 2 is repeated until the fitness is improving.
 * 
 * @author wiki on 27/11/2019
 */
public class Spalovny_iterative implements TestFunction {

    double[][] adjM;
    double[] garbage_production;
    double[] existing_fac_production;
    double production_sum;
    int facility_count;
    int producent_count;
    int[] number_of_cities;
    double[] capacity_options;
    //40 cities
    //cities with incenerators - Praha [0], Brno [20], Liberec [65], Plzen [129]
    //cities of possible incenerators - Melnik [149], Kolin [145], Hodonin [23], Olomouc [99], 
//    Prerov [101], Ceske Budejovice [2], Pardubice [114], Most [170], 
    //Jihlava[182], Usti nad Labem[175], Trutnov[59], Ostrov[44], Chropyne[195], 
//    Valasske Mezirici[202], Nachod[54], Strakonice[11], Zlin[205], Prostejov[100], 
//    Frantiskovy Lazne[40], Zdar nad Sazavou[192]
    //Cheb[40], Trebic[190], Varnsdorf[176], Bruntal[73], Vsetin[204], Otrokovice[197], 
//    Klatovy[125], Pribram[155], Detmarovice[81], Uherske Hradiste[199], Znojmo[37], 
//    Ostrava[89], Havirov[78], Karvina[81], 
    //Frydek-Mistek[76], Opava[87]
    double[][] possible_capacities;
    double[][] possible_prices;
    double[][] penalization_koeficients;
    int[] incinerator_indexes;
    double unused_penalty = 500;
    double overused_penalty = Math.pow(10, 12);
    double path_penalty = 5;
    
    
    int[] use_incinerator_indexes;
    int[] use_producent_indexes;
    int[] locations;
    
    int[] indexes;
    int[] bestIndexes;
    int repeats = 10000;
    
    double best_fitness;
    Map<String, List> best_map;
    
    public Spalovny_iterative() {

        this.best_fitness = -1;
        
        this.use_incinerator_indexes = new int[40];
        for(int i = 0; i < this.use_incinerator_indexes.length; i++) {
            this.use_incinerator_indexes[i]=i;
        }
        
        this.use_producent_indexes = new int[206];
        for(int i = 0; i < this.use_producent_indexes.length; i++) {
            this.use_producent_indexes[i]=i;
        }
        
        this.existing_fac_production = new double[]{421456.20,4618.37,40328.62,10267.64,6054.39,12617.38,5237.12,4892.46,11682.76,8108.45,7039.16,12327.33,26770.87,5010.74,8555.13,4609.10,5111.39,3988.39,14070.61,14343.59,119805.75,19561.32,4147.45,18887.91,10201.53,8107.61,6250.03,16045.27,4836.13,6307.23,4056.93,6973.76,5520.20,19984.11,8029.20,9128.13,14495.34,24822.35,10501.02,8511.10,16835.81,25171.38,3399.31,9079.82,7454.33,21032.18,4472.56,7215.61,6201.28,6119.69,51330.69,4445.92,15210.71,6734.93,15135.70,2793.67,3637.41,4976.93,9159.88,21280.52,9544.94,24765.51,8079.11,14040.02,5842.87,50333.33,9278.74,5987.36,6045.85,8719.04,3054.00,6051.64,11312.84,9453.26,8867.39,5051.98,32099.15,9986.36,27737.28,11916.22,5641.20,21873.89,16721.48,5193.34,12028.95,12322.73,5130.85,34858.49,12588.02,82707.62,1259.73,14886.78,7083.38,10695.23,9435.95,2755.95,5084.76,7126.47,6041.74,50918.85,29322.16,26006.27,8264.66,23361.72,7493.42,10543.17,5522.79,5866.35,4096.67,23156.53,2795.28,5124.32,6425.70,7346.90,35345.02,4735.35,8529.37,7744.97,8204.27,8258.16,8342.36,3092.94,9674.67,4317.68,4435.00,15640.78,8605.63,2680.56,13789.02,60292.82,6006.31,17997.80,6725.98,5591.85,7701.58,11773.66,21185.92,17639.47,41796.62,7931.37,44712.79,10010.61,7328.53,11285.26,34601.82,34060.59,12471.84,20311.27,8569.94,17996.19,36791.19,4792.82,14507.71,16659.05,12347.36,23618.15,18237.74,24668.06,7006.08,12956.23,10422.35,4519.41,5779.48,22885.43,22103.19,14204.32,23938.29,13171.29,13841.54,9880.92,21436.48,6069.16,7595.05,10984.90,35240.52,29269.43,7066.70,9149.82,4840.89,17531.07,5802.00,5711.93,25640.05,5779.25,2753.40,4690.38,3137.53,13686.97,5994.54,3524.22,19105.03,10862.11,12096.55,4842.76,7432.78,18157.25,5126.45,10345.50,10415.80,24179.22,15164.39,5119.98,12566.70,4706.77,14186.38,27447.64};
        this.penalization_koeficients = new double[][]{{1.e9,1.e9,1.e9},{1.e9,1.e9,1.e9},{1.e9,1.e9,1.e9},{1.e9,1.e9,1.e9},{-4.6332e-9,1.15063e-6,3.40002e-9},{-6.8857e-9,1.28464e-6,6.75326e-9},{-7.6378e-9,8.61982e-7,9.3877e-9},{-5.8807e-9,1.27062e-6,5.14842e-9},{-4.5162e-9,1.0308e-6,3.79009e-9},{-4.8986e-9,9.93745e-7,4.76961e-9},{-4.6098e-9,1.12093e-6,3.51782e-9},{-4.8482e-9,1.02995e-6,4.31959e-9},{-1.0353e-8,5.90684e-7,1.31726e-8},{-4.5722e-9,1.06072e-6,3.74732e-9},{-5.7585e-9,1.09545e-6,5.53137e-9},{-9.5885e-9,1.81632e-6,9.98701e-9},{-1.091e-8,1.95017e-6,1.06918e-8},{-1.0895e-8,1.87811e-6,1.08646e-8},{-1.0405e-8,1.40713e-6,1.15351e-8},{-7.0143e-9,9.76986e-7,8.23012e-9},{-6.5815e-9,9.73096e-7,7.37948e-9},{-1.0956e-8,2.02911e-6,1.05282e-8},{9.6443e-9,2.14395e-6,9.1834e-9},{-9.7127e-9,1.09974e-6,1.14434e-8},{-9.3212e-9,1.84887e-6,9.69177e-9},{-1.102e-8,2.28826e-6,9.88925e-9},{-1.1023e-8,2.06177e-6,1.0507e-8},{-1.1009e-8,2.21107e-6,1.00858e-8},{-1.0052e-8,7.19101e-7,1.26135e-8},{-1.1205e-8,1.59485e-6,1.19419e-8},{-1.0989e-8,1.98647e-6,1.06728e-8},{-8.1623e-9,9.50883e-7,9.76647e-9},{-7.8977e-9,9.61479e-7,9.36597e-9},{-1.0822e-8,1.52129e-6,1.1715e-8},{-9.3009e-9,2.00521e-6,9.24296e-9},{-4.2603e-9,1.03226e-6,3.27097e-9},{-6.097e-9,1.03532e-6,6.344e-9},{-6.2969e-9,1.00614e-6,6.79505e-9},{-7.7641e-9,9.59571e-7,9.20838e-9},{-1.0416e-8,7.84236e-7,1.29276e-8}};
        this.adjM = new double[206][206];
        this.garbage_production = new double[]{421456.20,4618.37,40328.62,10267.64,6054.39,12617.38,5237.12,4892.46,11682.76,8108.45,7039.16,12327.33,26770.87,5010.74,8555.13,4609.10,5111.39,3988.39,14070.61,14343.59,119805.75,19561.32,4147.45,18887.91,10201.53,8107.61,6250.03,16045.27,4836.13,6307.23,4056.93,6973.76,5520.20,19984.11,8029.20,9128.13,14495.34,24822.35,10501.02,8511.10,16835.81,25171.38,3399.31,9079.82,7454.33,21032.18,4472.56,7215.61,6201.28,6119.69,51330.69,4445.92,15210.71,6734.93,15135.70,2793.67,3637.41,4976.93,9159.88,21280.52,9544.94,24765.51,8079.11,14040.02,5842.87,50333.33,9278.74,5987.36,6045.85,8719.04,3054.00,6051.64,11312.84,9453.26,8867.39,5051.98,32099.15,9986.36,27737.28,11916.22,5641.20,21873.89,16721.48,5193.34,12028.95,12322.73,5130.85,34858.49,12588.02,82707.62,1259.73,14886.78,7083.38,10695.23,9435.95,2755.95,5084.76,7126.47,6041.74,50918.85,29322.16,26006.27,8264.66,23361.72,7493.42,10543.17,5522.79,5866.35,4096.67,23156.53,2795.28,5124.32,6425.70,7346.90,35345.02,4735.35,8529.37,7744.97,8204.27,8258.16,8342.36,3092.94,9674.67,4317.68,4435.00,15640.78,8605.63,2680.56,13789.02,60292.82,6006.31,17997.80,6725.98,5591.85,7701.58,11773.66,21185.92,17639.47,41796.62,7931.37,44712.79,10010.61,7328.53,11285.26,34601.82,34060.59,12471.84,20311.27,8569.94,17996.19,36791.19,4792.82,14507.71,16659.05,12347.36,23618.15,18237.74,24668.06,7006.08,12956.23,10422.35,4519.41,5779.48,22885.43,22103.19,14204.32,23938.29,13171.29,13841.54,9880.92,21436.48,6069.16,7595.05,10984.90,35240.52,29269.43,7066.70,9149.82,4840.89,17531.07,5802.00,5711.93,25640.05,5779.25,2753.40,4690.38,3137.53,13686.97,5994.54,3524.22,19105.03,10862.11,12096.55,4842.76,7432.78,18157.25,5126.45,10345.50,10415.80,24179.22,15164.39,5119.98,12566.70,4706.77,14186.38,27447.64};
        this.production_sum = 3011744.95;
        this.facility_count = this.use_incinerator_indexes.length;
        this.producent_count = this.use_producent_indexes.length;
        this.number_of_cities = new int[]{206, 206};
//        this.capacity_options = new double[]{250_000, 500_000, 750_000, 1_000_000, 1_500_000, 2_000_000, 2_500_000, 3_000_000, 3_500_000};
        this.incinerator_indexes = new int[]{0,20,65,129,149,145,23,99,101,2,114,170,182,175,59,44,195,202,54,11,205,100,40,192,40,190,176,73,204,197,125,155,81,199,37,89,78,81,76,87};
        this.possible_capacities = new double[][]{{310000,430000},{240000,360000},{96000},{95000},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.},{0,10000.,20000.,30000.,80000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.},{0,10000.,20000.,30000.,80000.},{0,10000.,20000.,30000.,80000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10000.,20000.,30000.,80000.,90000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.},{0,10000.,20000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.}};
//        this.possible_prices = new double[][]{{1400,1800},{1400,1800},{1400},{1400},{0,6648,4081,2969,2375,3171,3070,2980,2904,2825,2764,2709,2651,2605,2563,2517,2481,2448,2410,2382,2353,2322,2297,2274,2252,2228,2207,2187},{0,7137,4570,3462,2880,3495,3407,3332,3266,3202,3153,3110,3065,3030,2996,2960,2934,2908,2881,2861,2842,2819,2801,2784,2766,2752,2740,2730},{0,6648,4092,3002,2524,3338,3265,3200,3147,3093,3057,3022,2983,2955,2938,2916,2902,2894,2878,2869,2860,2846,2837,2828,2819,2806,2797,2788},{0,7137,4570,3460,2864,3455,3356,3269,3193,3115,3056,3004,2952,2916,2882,2843,2814,2786,2754,2730,2705,2680,2661,2643,2625,2604,2590,2576},{0,6605,4038,2928,2332,3147,3045,2957,2880,2801,2741,2688,2632,2589,2550,2507,2472,2442,2409,2383,2357,2328,2313,2299,2286,2272,2264,2256},{0,6592,4032,2938,2389,3193,3099,3023,2957,2887,2833,2785,2733,2697,2670,2639,2617,2595,2569,2550,2530,2507,2490,2476,2463,2446,2435,2423},{0,6648,4081,2969,2375,3171,3070,2980,2904,2825,2764,2710,2653,2609,2568,2523,2488,2454,2418,2388,2361,2330,2305,2285,2265,2244,2231,2219},{0,6648,4081,2969,2375,3173,3074,2987,2912,2836,2776,2723,2671,2638,2608,2574,2548,2523,2494,2471,2450,2426,2409,2393,2378,2358,2347,2335},{0,9941,5080,3479,2759,3292,3204,3169,3143,3123,3110,3097,3075,3061,3046,3026,3012,2997,2978,2964,2951},{0,6634,4067,2955,2360,3163,3061,2973,2895,2819,2759,2706,2649,2605,2564,2520,2485,2453,2416,2387,2366,2344,2327,2312,2296,2275,2264,2251},{0,6648,4081,2969,2389,3213,3134,3066,3010,2949,2909,2873,2830,2799,2770,2736,2710,2686,2657,2635,2614,2592,2579,2567,2554,2538,2526,2515},{0,6764,4574,3675,3260,3697,3640,3588,3541,3488,3447,3409},{0,6768,4579,3681,3268,3702,3644,3592,3544,3490,3450,3411},{0,6194,4127,3285,2957,3604,3557,3513,3472,3424},{0,6570,4228,3374,2938,3522,3459,3415,3383,3343,3313,3286,3251,3226,3202,3172,3150,3129},{0,6718,4162,3077,2606,3391,3312,3244,3184,3120,3080,3045,3005,2975,2949,2920,2900,2882,2858,2846,2836,2823,2814,2806,2797,2785,2776,2768},{0,6549,3989,2903,2387,3283,3211,3146,3089,3028,2983,2944,2907,2881,2855,2825,2806,2788,2767,2753,2739,2722,2714,2708,2702,2693,2688,2683},{0,6801,4620,3712,3312,3728,3669,3613,3564,3508,3466},{0,6956,4785,3978,3850},{0,6500,4048,3163,2763,3429,3362,3306,3264,3217,3194,3175,3147,3129,3110,3085,3068,3052,3030,3013,2997,2978,2964,2949},{0,5660,3660,3058,3598},{0,6757,4616,3856,3814},{0,6380,4114,3361,3064,3669,3614,3565,3520,3468},{0,6366,4244,3495,3731,3670},{0,5272,2982,2235,1902,3039,2997,2966,2957,2948,2949,2947,2935,2930,2924,2909,2902,2892,2878,2869},{0,6648,4088,3050,2550,3511,3475,3440,3405,3363,3332,3303,3268,3240,3216,3186,3163,3141},{0,5986,3819,3116,2843,3598,3552,3510,3468,3420},{0,6718,4614,3696,2602,3389,3312,3247,3198,3145,3106,3070,3032,3009,2987,2962,2951,2939,2922,2912,2900,2885,2874,2863,2852,2838,2828,2817},{0,6648,4106,3041,2577,3372,3297,3231,3182,3131,3090,3057,3019,2991,2968,2944,2930,2917,2898,2887,2878,2863,2852,2843,2833,2820,2810,2801},{0,5909,3665,2914,2602,3435,3407,3378,3349,3312,3284,3259,3226},{0,5926,4040},{0,6423,3858,2746,2150,3041,2940,2851,2775,2696,2635,2581,2524,2480,2438,2394,2360,2327,2291,2263,2234,2204,2180,2158,2141,2123,2110,2098},{0,6535,3968,2878,2301,3228,3155,3094,3041,2983,2939,2899,2855,2821,2793,2764,2745,2726,2701,2686,2671,2652,2640,2630,2620,2605,2596,2592},{0,6535,3970,2883,2321,3251,3181,3119,3063,3004,2958,2918,2874,2846,2823,2794,2772,2753,2732,2715,2702,2686,2674,2661,2654,2644,2642,2638},{0,6634,4088,3046,2602,3381,3303,3234,3177,3125,3087,3050,3014,2987,2965,2936,2920,2908,2892,2883,2873,2859,2849,2839,2829,2816,2806,2797},{0,5224,2986,2270,1923,3050,3022,3006,3010,3001,2999,2992,2978,2970,2961,2944,2934,2924,2908}};
        
        this.possible_prices = new double[][]{{434000000,774000000},{336000000,648000000},{134400000},{133000000},{0,66478500.,81613500.,89064900.,95002200.,253650400.,276275700.,298047000.,319456500.,339028800.,359377200.,379233400.,397590000.,416851200.,435647100.,453124800.,471416600.,489500000.,506097900.,523936600.,541206100.,557284800.,574362500.,591281600.,608085900.,623725200.,639998100.,656247000.},{0,71368350.,91393200.,103850550.,115182600.,279626400.,306662400.,333233000.,359299600.,384201600.,409827600.,435376200.,459682500.,484740800.,509318300.,532758600.,557441000.,581606000.,604980600.,629521200.,653671500.,676504800.,700165000.,723798400.,746747100.,770420000.,794559400.,818853000.},{0,66478500.,81846600.,90054450.,100978800.,267000800.,293855400.,320038000.,346207400.,371161200.,397382700.,423061800.,447459000.,472736000.,499422600.,524842200.,551296400.,578760000.,604436700.,631228400.,657836800.,683023200.,709220000.,735233200.,761067900.,785632400.,811066200.,836316000.},{0,71368350.,91393200.,103792500.,114561600.,276417600.,302005800.,326894000.,351188200.,373800000.,397215000.,420525000.,442801500.,466526400.,489967200.,511803000.,534582100.,557286000.,578358900.,600492200.,622133900.,643284000.,665237500.,687138400.,708677100.,729128400.,751042000.,772671000.},{0,66051600.,80760000.,87842250.,93295200.,251787200.,274063500.,295718000.,316752700.,336079200.,356349500.,376335400.,394873500.,414161600.,433449000.,451261800.,469695200.,488466000.,505827000.,524220400.,542098500.,558837600.,578242500.,597672400.,617166000.,636039600.,656504900.,676815000.},{0,65915700.,80643300.,88133400.,95545800.,255409600.,278953200.,302316000.,325289800.,346479600.,368290000.,389919600.,410008500.,431547200.,453900000.,475012800.,497224300.,518994000.,539511000.,560934000.,581966700.,601682400.,622547500.,643749600.,665018100.,684938800.,706025300.,726879000.},{0,66478500.,81613500.,89064900.,95002200.,253650400.,276275700.,298047000.,319456500.,339028800.,359377200.,379415400.,397978500.,417472000.,436527700.,454055400.,472645900.,490794000.,507727500.,525360000.,542990900.,559149600.,576302500.,593972600.,611579700.,628434800.,647126300.,665562000.},{0,66478500.,81613500.,89064900.,95002200.,253857600.,276624900.,298694000.,320310100.,340270800.,360890400.,381225600.,400695000.,422025600.,443344700.,463370400.,484197900.,504506000.,523754700.,543573800.,563520700.,582122400.,602175000.,622224200.,641965500.,660307200.,680514000.,700488000.},{0,99407250.,101599800.,104374800.,110370600.,263378400.,288383400.,316934000.,345780600.,374732400.,404277900.,433564600.,461235000.,489707200.,517894800.,544635000.,572188800.,599458000.,625354800.,652003000.,678665600.},{0,66342600.,81342000.,88657200.,94381800.,253029600.,275460300.,297271000.,318459900.,338252400.,358703800.,378872200.,397396500.,416851200.,435868100.,453591000.,472153800.,490536000.,507456600.,525074000.,544182300.,562564800.,581800000.,601036800.,619960500.,637126000.,656504900.,675264000.},{0,66478500.,81613500.,89064900.,95545800.,257065600.,282096900.,306585000.,331124200.,353930400.,378211600.,402234000.,424561500.,447897600.,470833700.,492476400.,514920900.,537106000.,557984700.,579717600.,601307400.,622173600.,644862500.,667295200.,689466600.,710656800.,732658900.,754431000.},{0,67642650.,91470900.,110254050.,130395600.,295770400.,327618900.,358846000.,389466000.,418507200.,448169800.,477211000.},{0,67681500.,91587300.,110428650.,130705800.,296184000.,327968100.,359235000.,389892800.,418818000.,448506500.,477573600.},{0,61937850.,82545000.,98553600.,118287600.,288319200.,320167800.,351344000.,381924400.,410901600.},{0,65702250.,84563100.,101231100.,117511200.,281799200.,311319000.,341512000.,372105800.,401121600.,430680900.,460006400.,487624500.,516200000.,544285600.,570945600.,598486700.,625846000.},{0,67177050.,83243700.,92324700.,104238600.,271243200.,298046700.,324437000.,350192700.,374421600.,400410400.,426321000.,450757500.,476048000.,501401400.,525540600.,551051300.,576432000.,600091800.,626104600.,652185700.,677436000.,703397500.,729515800.,755130600.,779839200.,805063200.,830496000.},{0,65488800.,79789800.,87085800.,95468400.,262653600.,288965700.,314605000.,339804300.,363399600.,387797800.,412195000.,436009500.,460937600.,485348300.,508543200.,533107700.,557544000.,581074200.,605613800.,629871100.,653220000.,678497500.,703955200.,729631800.,754121200.,779551900.,804882000.},{0,68011350.,92402400.,111360150.,132491400.,298253600.,330180300.,361304000.,392027900.,420991200.,450524100.},{0,69563700.,95700900.,119335050.,307981600.},{0,65003700.,80953800.,94886100.,110526000.,274348000.,302587200.,330646000.,359014700.,386064000.,415208300.,444431400.,472101000.,500676800.,528671100.,555345000.,583001700.,610324000.,636222300.,662818200.,689376700.,714691200.,740912500.,766849200.},{0,56601750.,73192200.,91742400.,287801600.},{0,67565100.,92324700.,115668000.,305084000.},{0,63800700.,82273500.,100823850.,122556000.,293493600.,325290600.,356518000.,387189000.,416179200.},{0,63664800.,84873600.,104840550.,298460800.,330296400.},{0,52720950.,59648100.,67060350.,76063800.,243094400.,269756100.,296624000.,325289800.,353775600.,383424600.,412557600.,440278500.,468803200.,497003500.,523677600.,551296400.,578500000.,604436700.,631228400.},{0,66478500.,81768900.,91509750.,101988000.,280868000.,312716700.,343970000.,374524700.,403605600.,433202900.,462361200.,490147500.,518476800.,546704700.,573507000.,600945300.,628176000.},{0,59861700.,76374600.,93488850.,113707800.,287801600.,319701600.,350955000.,381497600.,410436000.},{0,67177050.,92286000.,110894400.,104083800.,271140000.,298046700.,324695000.,351758000.,377371200.,403773500.,429762200.,454831500.,481428800.,507779800.,533224800.,560636800.,587814000.,613674600.,640620200.,667062100.,692337600.,718597500.,744315000.,770148000.,794687600.,820067800.,845244000.},{0,66478500.,82118100.,91218600.,103074600.,269794400.,296766000.,323143000.,350049700.,375663600.,401755900.,427950600.,452892000.,478531200.,504480100.,529965000.,556703800.,583416000.,608512800.,635212600.,662002100.,687060000.,713100000.,739271000.,764910000.,789616800.,814815900.,840198000.},{0,59085450.,73308600.,87435000.,104083800.,274762400.,306662400.,337761000.,368406500.,397395600.,426981100.,456204000.,483937500.},{0,59260050.,80798700.},{0,64227600.,77150700.,82370250.,85999200.,243301600.,264633300.,285111000.,305226900.,323505600.,342560400.,361305000.,378574500.,396774400.,414536500.,431004600.,448312600.,465440000.,481105800.,497754400.,513833800.,529034400.,544932500.,561012400.,578048400.,594386800.,611862300.,629469000.},{0,65353050.,79362900.,86328900.,92053200.,258204000.,283959900.,309431000.,334539700.,357967200.,382079100.,405855800.,428248500.,451417600.,474793000.,497599200.,521555700.,545126000.,567220500.,590816600.,614399000.,636453600.,660062500.,683774000.,707278500.,729489600.,752918300.,777717000.},{0,65353050.,79401600.,86503500.,92829000.,260066400.,286288200.,311889000.,336958600.,360450000.,384602400.,408573200.,431158500.,455348800.,479850500.,502954200.,526718000.,550558000.,573741000.,597361600.,621538200.,644527200.,668470000.,691847000.,716709600.,740356400.,766046600.,791298000.},{0,66342600.,81768900.,91393200.,104083800.,270519200.,297232200.,323402000.,349481000.,375042000.,401251500.,427044800.,452115000.,477910400.,504041500.,528568200.,554737300.,581606000.,607425000.,634359000.,660813000.,686128800.,712130000.,738262200.,763862400.,788530400.,813690700.,839034000.},{0,52235850.,59725800.,68108400.,76917600.,244025600.,271968300.,300634000.,331124200.,360140400.,389815400.,418895400.,446682000.,475219200.,503381900.,529965000.,557441000.,584710000.,610686300.}};

        this.locations = new int[this.facility_count];
        for(int i = 0; i < this.locations.length; i++) {
            this.locations[i] = this.incinerator_indexes[this.use_incinerator_indexes[i]];
        }
        
        String location = "/adjM_new.csv";
        URL resource = Cec2015.class.getResource(location);
        File fpt = null;
        try {
            fpt = Paths.get(resource.toURI()).toFile();
        } catch (URISyntaxException ex) {
            Logger.getLogger(SpalovnyCR_2.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        BufferedReader br = null;
	String line = "";
	String cvsSplitBy = ",";
        int rowIt = 0;

	try {

		br = new BufferedReader(new FileReader(fpt));
		while ((line = br.readLine()) != null) {

		        // use comma as separator
			String[] row = line.split(cvsSplitBy);
                        
                        for(int columnIt = 0; columnIt < row.length; columnIt++) {
                            this.adjM[rowIt][columnIt] = Double.parseDouble(row[columnIt]);
                        }
                        rowIt++;

		}

	} catch (FileNotFoundException e) {
            Logger.getLogger(Spalovny_iterative.class.getName()).log(Level.SEVERE, null, e);
	} catch (IOException e) {
            Logger.getLogger(Spalovny_iterative.class.getName()).log(Level.SEVERE, null, e);
	} finally {
		if (br != null) {
			try {
				br.close();
			} catch (IOException e) {
                            Logger.getLogger(SpalovnyCR_2.class.getName()).log(Level.SEVERE, null, e);
			}
		}
	}
        
    }
    
    public Spalovny_iterative(int[] use_inc, int[] use_prod) {

        this.best_fitness = -1;
        
        this.use_incinerator_indexes = use_inc.clone();
        
        this.use_producent_indexes = use_prod.clone();
        
        this.existing_fac_production = new double[]{421456.20,4618.37,40328.62,10267.64,6054.39,12617.38,5237.12,4892.46,11682.76,8108.45,7039.16,12327.33,26770.87,5010.74,8555.13,4609.10,5111.39,3988.39,14070.61,14343.59,119805.75,19561.32,4147.45,18887.91,10201.53,8107.61,6250.03,16045.27,4836.13,6307.23,4056.93,6973.76,5520.20,19984.11,8029.20,9128.13,14495.34,24822.35,10501.02,8511.10,16835.81,25171.38,3399.31,9079.82,7454.33,21032.18,4472.56,7215.61,6201.28,6119.69,51330.69,4445.92,15210.71,6734.93,15135.70,2793.67,3637.41,4976.93,9159.88,21280.52,9544.94,24765.51,8079.11,14040.02,5842.87,50333.33,9278.74,5987.36,6045.85,8719.04,3054.00,6051.64,11312.84,9453.26,8867.39,5051.98,32099.15,9986.36,27737.28,11916.22,5641.20,21873.89,16721.48,5193.34,12028.95,12322.73,5130.85,34858.49,12588.02,82707.62,1259.73,14886.78,7083.38,10695.23,9435.95,2755.95,5084.76,7126.47,6041.74,50918.85,29322.16,26006.27,8264.66,23361.72,7493.42,10543.17,5522.79,5866.35,4096.67,23156.53,2795.28,5124.32,6425.70,7346.90,35345.02,4735.35,8529.37,7744.97,8204.27,8258.16,8342.36,3092.94,9674.67,4317.68,4435.00,15640.78,8605.63,2680.56,13789.02,60292.82,6006.31,17997.80,6725.98,5591.85,7701.58,11773.66,21185.92,17639.47,41796.62,7931.37,44712.79,10010.61,7328.53,11285.26,34601.82,34060.59,12471.84,20311.27,8569.94,17996.19,36791.19,4792.82,14507.71,16659.05,12347.36,23618.15,18237.74,24668.06,7006.08,12956.23,10422.35,4519.41,5779.48,22885.43,22103.19,14204.32,23938.29,13171.29,13841.54,9880.92,21436.48,6069.16,7595.05,10984.90,35240.52,29269.43,7066.70,9149.82,4840.89,17531.07,5802.00,5711.93,25640.05,5779.25,2753.40,4690.38,3137.53,13686.97,5994.54,3524.22,19105.03,10862.11,12096.55,4842.76,7432.78,18157.25,5126.45,10345.50,10415.80,24179.22,15164.39,5119.98,12566.70,4706.77,14186.38,27447.64};
        this.penalization_koeficients = new double[][]{{1.e9,1.e9,1.e9},{1.e9,1.e9,1.e9},{1.e9,1.e9,1.e9},{1.e9,1.e9,1.e9},{-4.6332e-9,1.15063e-6,3.40002e-9},{-6.8857e-9,1.28464e-6,6.75326e-9},{-7.6378e-9,8.61982e-7,9.3877e-9},{-5.8807e-9,1.27062e-6,5.14842e-9},{-4.5162e-9,1.0308e-6,3.79009e-9},{-4.8986e-9,9.93745e-7,4.76961e-9},{-4.6098e-9,1.12093e-6,3.51782e-9},{-4.8482e-9,1.02995e-6,4.31959e-9},{-1.0353e-8,5.90684e-7,1.31726e-8},{-4.5722e-9,1.06072e-6,3.74732e-9},{-5.7585e-9,1.09545e-6,5.53137e-9},{-9.5885e-9,1.81632e-6,9.98701e-9},{-1.091e-8,1.95017e-6,1.06918e-8},{-1.0895e-8,1.87811e-6,1.08646e-8},{-1.0405e-8,1.40713e-6,1.15351e-8},{-7.0143e-9,9.76986e-7,8.23012e-9},{-6.5815e-9,9.73096e-7,7.37948e-9},{-1.0956e-8,2.02911e-6,1.05282e-8},{9.6443e-9,2.14395e-6,9.1834e-9},{-9.7127e-9,1.09974e-6,1.14434e-8},{-9.3212e-9,1.84887e-6,9.69177e-9},{-1.102e-8,2.28826e-6,9.88925e-9},{-1.1023e-8,2.06177e-6,1.0507e-8},{-1.1009e-8,2.21107e-6,1.00858e-8},{-1.0052e-8,7.19101e-7,1.26135e-8},{-1.1205e-8,1.59485e-6,1.19419e-8},{-1.0989e-8,1.98647e-6,1.06728e-8},{-8.1623e-9,9.50883e-7,9.76647e-9},{-7.8977e-9,9.61479e-7,9.36597e-9},{-1.0822e-8,1.52129e-6,1.1715e-8},{-9.3009e-9,2.00521e-6,9.24296e-9},{-4.2603e-9,1.03226e-6,3.27097e-9},{-6.097e-9,1.03532e-6,6.344e-9},{-6.2969e-9,1.00614e-6,6.79505e-9},{-7.7641e-9,9.59571e-7,9.20838e-9},{-1.0416e-8,7.84236e-7,1.29276e-8}};
        this.adjM = new double[206][206];
        this.garbage_production = new double[]{421456.20,4618.37,40328.62,10267.64,6054.39,12617.38,5237.12,4892.46,11682.76,8108.45,7039.16,12327.33,26770.87,5010.74,8555.13,4609.10,5111.39,3988.39,14070.61,14343.59,119805.75,19561.32,4147.45,18887.91,10201.53,8107.61,6250.03,16045.27,4836.13,6307.23,4056.93,6973.76,5520.20,19984.11,8029.20,9128.13,14495.34,24822.35,10501.02,8511.10,16835.81,25171.38,3399.31,9079.82,7454.33,21032.18,4472.56,7215.61,6201.28,6119.69,51330.69,4445.92,15210.71,6734.93,15135.70,2793.67,3637.41,4976.93,9159.88,21280.52,9544.94,24765.51,8079.11,14040.02,5842.87,50333.33,9278.74,5987.36,6045.85,8719.04,3054.00,6051.64,11312.84,9453.26,8867.39,5051.98,32099.15,9986.36,27737.28,11916.22,5641.20,21873.89,16721.48,5193.34,12028.95,12322.73,5130.85,34858.49,12588.02,82707.62,1259.73,14886.78,7083.38,10695.23,9435.95,2755.95,5084.76,7126.47,6041.74,50918.85,29322.16,26006.27,8264.66,23361.72,7493.42,10543.17,5522.79,5866.35,4096.67,23156.53,2795.28,5124.32,6425.70,7346.90,35345.02,4735.35,8529.37,7744.97,8204.27,8258.16,8342.36,3092.94,9674.67,4317.68,4435.00,15640.78,8605.63,2680.56,13789.02,60292.82,6006.31,17997.80,6725.98,5591.85,7701.58,11773.66,21185.92,17639.47,41796.62,7931.37,44712.79,10010.61,7328.53,11285.26,34601.82,34060.59,12471.84,20311.27,8569.94,17996.19,36791.19,4792.82,14507.71,16659.05,12347.36,23618.15,18237.74,24668.06,7006.08,12956.23,10422.35,4519.41,5779.48,22885.43,22103.19,14204.32,23938.29,13171.29,13841.54,9880.92,21436.48,6069.16,7595.05,10984.90,35240.52,29269.43,7066.70,9149.82,4840.89,17531.07,5802.00,5711.93,25640.05,5779.25,2753.40,4690.38,3137.53,13686.97,5994.54,3524.22,19105.03,10862.11,12096.55,4842.76,7432.78,18157.25,5126.45,10345.50,10415.80,24179.22,15164.39,5119.98,12566.70,4706.77,14186.38,27447.64};
        this.production_sum = 3011744.95;
        this.facility_count = this.use_incinerator_indexes.length;
        this.producent_count = this.use_producent_indexes.length;
        this.number_of_cities = new int[]{206, 206};
//        this.capacity_options = new double[]{250_000, 500_000, 750_000, 1_000_000, 1_500_000, 2_000_000, 2_500_000, 3_000_000, 3_500_000};
        this.incinerator_indexes = new int[]{0,20,65,129,149,145,23,99,101,2,114,170,182,175,59,44,195,202,54,11,205,100,40,192,40,190,176,73,204,197,125,155,81,199,37,89,78,81,76,87};
        this.possible_capacities = new double[][]{{310000,430000},{240000,360000},{96000},{95000},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.},{0,10000.,20000.,30000.,80000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.},{0,10000.,20000.,30000.,80000.},{0,10000.,20000.,30000.,80000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10000.,20000.,30000.,80000.,90000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.},{0,10000.,20000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.,220000.,230000.,240000.,250000.,260000.,270000.,280000.,290000.,300000.},{0,10000.,20000.,30000.,40000.,80000.,90000.,100000.,110000.,120000.,130000.,140000.,150000.,160000.,170000.,180000.,190000.,200000.,210000.}};
        this.possible_prices = new double[][]{{434000000,774000000},{336000000,648000000},{134400000},{133000000},{0,66478500.,81613500.,89064900.,95002200.,253650400.,276275700.,298047000.,319456500.,339028800.,359377200.,379233400.,397590000.,416851200.,435647100.,453124800.,471416600.,489500000.,506097900.,523936600.,541206100.,557284800.,574362500.,591281600.,608085900.,623725200.,639998100.,656247000.},{0,71368350.,91393200.,103850550.,115182600.,279626400.,306662400.,333233000.,359299600.,384201600.,409827600.,435376200.,459682500.,484740800.,509318300.,532758600.,557441000.,581606000.,604980600.,629521200.,653671500.,676504800.,700165000.,723798400.,746747100.,770420000.,794559400.,818853000.},{0,66478500.,81846600.,90054450.,100978800.,267000800.,293855400.,320038000.,346207400.,371161200.,397382700.,423061800.,447459000.,472736000.,499422600.,524842200.,551296400.,578760000.,604436700.,631228400.,657836800.,683023200.,709220000.,735233200.,761067900.,785632400.,811066200.,836316000.},{0,71368350.,91393200.,103792500.,114561600.,276417600.,302005800.,326894000.,351188200.,373800000.,397215000.,420525000.,442801500.,466526400.,489967200.,511803000.,534582100.,557286000.,578358900.,600492200.,622133900.,643284000.,665237500.,687138400.,708677100.,729128400.,751042000.,772671000.},{0,66051600.,80760000.,87842250.,93295200.,251787200.,274063500.,295718000.,316752700.,336079200.,356349500.,376335400.,394873500.,414161600.,433449000.,451261800.,469695200.,488466000.,505827000.,524220400.,542098500.,558837600.,578242500.,597672400.,617166000.,636039600.,656504900.,676815000.},{0,65915700.,80643300.,88133400.,95545800.,255409600.,278953200.,302316000.,325289800.,346479600.,368290000.,389919600.,410008500.,431547200.,453900000.,475012800.,497224300.,518994000.,539511000.,560934000.,581966700.,601682400.,622547500.,643749600.,665018100.,684938800.,706025300.,726879000.},{0,66478500.,81613500.,89064900.,95002200.,253650400.,276275700.,298047000.,319456500.,339028800.,359377200.,379415400.,397978500.,417472000.,436527700.,454055400.,472645900.,490794000.,507727500.,525360000.,542990900.,559149600.,576302500.,593972600.,611579700.,628434800.,647126300.,665562000.},{0,66478500.,81613500.,89064900.,95002200.,253857600.,276624900.,298694000.,320310100.,340270800.,360890400.,381225600.,400695000.,422025600.,443344700.,463370400.,484197900.,504506000.,523754700.,543573800.,563520700.,582122400.,602175000.,622224200.,641965500.,660307200.,680514000.,700488000.},{0,99407250.,101599800.,104374800.,110370600.,263378400.,288383400.,316934000.,345780600.,374732400.,404277900.,433564600.,461235000.,489707200.,517894800.,544635000.,572188800.,599458000.,625354800.,652003000.,678665600.},{0,66342600.,81342000.,88657200.,94381800.,253029600.,275460300.,297271000.,318459900.,338252400.,358703800.,378872200.,397396500.,416851200.,435868100.,453591000.,472153800.,490536000.,507456600.,525074000.,544182300.,562564800.,581800000.,601036800.,619960500.,637126000.,656504900.,675264000.},{0,66478500.,81613500.,89064900.,95545800.,257065600.,282096900.,306585000.,331124200.,353930400.,378211600.,402234000.,424561500.,447897600.,470833700.,492476400.,514920900.,537106000.,557984700.,579717600.,601307400.,622173600.,644862500.,667295200.,689466600.,710656800.,732658900.,754431000.},{0,67642650.,91470900.,110254050.,130395600.,295770400.,327618900.,358846000.,389466000.,418507200.,448169800.,477211000.},{0,67681500.,91587300.,110428650.,130705800.,296184000.,327968100.,359235000.,389892800.,418818000.,448506500.,477573600.},{0,61937850.,82545000.,98553600.,118287600.,288319200.,320167800.,351344000.,381924400.,410901600.},{0,65702250.,84563100.,101231100.,117511200.,281799200.,311319000.,341512000.,372105800.,401121600.,430680900.,460006400.,487624500.,516200000.,544285600.,570945600.,598486700.,625846000.},{0,67177050.,83243700.,92324700.,104238600.,271243200.,298046700.,324437000.,350192700.,374421600.,400410400.,426321000.,450757500.,476048000.,501401400.,525540600.,551051300.,576432000.,600091800.,626104600.,652185700.,677436000.,703397500.,729515800.,755130600.,779839200.,805063200.,830496000.},{0,65488800.,79789800.,87085800.,95468400.,262653600.,288965700.,314605000.,339804300.,363399600.,387797800.,412195000.,436009500.,460937600.,485348300.,508543200.,533107700.,557544000.,581074200.,605613800.,629871100.,653220000.,678497500.,703955200.,729631800.,754121200.,779551900.,804882000.},{0,68011350.,92402400.,111360150.,132491400.,298253600.,330180300.,361304000.,392027900.,420991200.,450524100.},{0,69563700.,95700900.,119335050.,307981600.},{0,65003700.,80953800.,94886100.,110526000.,274348000.,302587200.,330646000.,359014700.,386064000.,415208300.,444431400.,472101000.,500676800.,528671100.,555345000.,583001700.,610324000.,636222300.,662818200.,689376700.,714691200.,740912500.,766849200.},{0,56601750.,73192200.,91742400.,287801600.},{0,67565100.,92324700.,115668000.,305084000.},{0,63800700.,82273500.,100823850.,122556000.,293493600.,325290600.,356518000.,387189000.,416179200.},{0,63664800.,84873600.,104840550.,298460800.,330296400.},{0,52720950.,59648100.,67060350.,76063800.,243094400.,269756100.,296624000.,325289800.,353775600.,383424600.,412557600.,440278500.,468803200.,497003500.,523677600.,551296400.,578500000.,604436700.,631228400.},{0,66478500.,81768900.,91509750.,101988000.,280868000.,312716700.,343970000.,374524700.,403605600.,433202900.,462361200.,490147500.,518476800.,546704700.,573507000.,600945300.,628176000.},{0,59861700.,76374600.,93488850.,113707800.,287801600.,319701600.,350955000.,381497600.,410436000.},{0,67177050.,92286000.,110894400.,104083800.,271140000.,298046700.,324695000.,351758000.,377371200.,403773500.,429762200.,454831500.,481428800.,507779800.,533224800.,560636800.,587814000.,613674600.,640620200.,667062100.,692337600.,718597500.,744315000.,770148000.,794687600.,820067800.,845244000.},{0,66478500.,82118100.,91218600.,103074600.,269794400.,296766000.,323143000.,350049700.,375663600.,401755900.,427950600.,452892000.,478531200.,504480100.,529965000.,556703800.,583416000.,608512800.,635212600.,662002100.,687060000.,713100000.,739271000.,764910000.,789616800.,814815900.,840198000.},{0,59085450.,73308600.,87435000.,104083800.,274762400.,306662400.,337761000.,368406500.,397395600.,426981100.,456204000.,483937500.},{0,59260050.,80798700.},{0,64227600.,77150700.,82370250.,85999200.,243301600.,264633300.,285111000.,305226900.,323505600.,342560400.,361305000.,378574500.,396774400.,414536500.,431004600.,448312600.,465440000.,481105800.,497754400.,513833800.,529034400.,544932500.,561012400.,578048400.,594386800.,611862300.,629469000.},{0,65353050.,79362900.,86328900.,92053200.,258204000.,283959900.,309431000.,334539700.,357967200.,382079100.,405855800.,428248500.,451417600.,474793000.,497599200.,521555700.,545126000.,567220500.,590816600.,614399000.,636453600.,660062500.,683774000.,707278500.,729489600.,752918300.,777717000.},{0,65353050.,79401600.,86503500.,92829000.,260066400.,286288200.,311889000.,336958600.,360450000.,384602400.,408573200.,431158500.,455348800.,479850500.,502954200.,526718000.,550558000.,573741000.,597361600.,621538200.,644527200.,668470000.,691847000.,716709600.,740356400.,766046600.,791298000.},{0,66342600.,81768900.,91393200.,104083800.,270519200.,297232200.,323402000.,349481000.,375042000.,401251500.,427044800.,452115000.,477910400.,504041500.,528568200.,554737300.,581606000.,607425000.,634359000.,660813000.,686128800.,712130000.,738262200.,763862400.,788530400.,813690700.,839034000.},{0,52235850.,59725800.,68108400.,76917600.,244025600.,271968300.,300634000.,331124200.,360140400.,389815400.,418895400.,446682000.,475219200.,503381900.,529965000.,557441000.,584710000.,610686300.}};
//        this.possible_prices = new double[][]{{1400,1800},{1400,1800},{1400},{1400},{0,6648,4081,2969,2375,3171,3070,2980,2904,2825,2764,2709,2651,2605,2563,2517,2481,2448,2410,2382,2353,2322,2297,2274,2252,2228,2207,2187},{0,7137,4570,3462,2880,3495,3407,3332,3266,3202,3153,3110,3065,3030,2996,2960,2934,2908,2881,2861,2842,2819,2801,2784,2766,2752,2740,2730},{0,6648,4092,3002,2524,3338,3265,3200,3147,3093,3057,3022,2983,2955,2938,2916,2902,2894,2878,2869,2860,2846,2837,2828,2819,2806,2797,2788},{0,7137,4570,3460,2864,3455,3356,3269,3193,3115,3056,3004,2952,2916,2882,2843,2814,2786,2754,2730,2705,2680,2661,2643,2625,2604,2590,2576},{0,6605,4038,2928,2332,3147,3045,2957,2880,2801,2741,2688,2632,2589,2550,2507,2472,2442,2409,2383,2357,2328,2313,2299,2286,2272,2264,2256},{0,6592,4032,2938,2389,3193,3099,3023,2957,2887,2833,2785,2733,2697,2670,2639,2617,2595,2569,2550,2530,2507,2490,2476,2463,2446,2435,2423},{0,6648,4081,2969,2375,3171,3070,2980,2904,2825,2764,2710,2653,2609,2568,2523,2488,2454,2418,2388,2361,2330,2305,2285,2265,2244,2231,2219},{0,6648,4081,2969,2375,3173,3074,2987,2912,2836,2776,2723,2671,2638,2608,2574,2548,2523,2494,2471,2450,2426,2409,2393,2378,2358,2347,2335},{0,9941,5080,3479,2759,3292,3204,3169,3143,3123,3110,3097,3075,3061,3046,3026,3012,2997,2978,2964,2951},{0,6634,4067,2955,2360,3163,3061,2973,2895,2819,2759,2706,2649,2605,2564,2520,2485,2453,2416,2387,2366,2344,2327,2312,2296,2275,2264,2251},{0,6648,4081,2969,2389,3213,3134,3066,3010,2949,2909,2873,2830,2799,2770,2736,2710,2686,2657,2635,2614,2592,2579,2567,2554,2538,2526,2515},{0,6764,4574,3675,3260,3697,3640,3588,3541,3488,3447,3409},{0,6768,4579,3681,3268,3702,3644,3592,3544,3490,3450,3411},{0,6194,4127,3285,2957,3604,3557,3513,3472,3424},{0,6570,4228,3374,2938,3522,3459,3415,3383,3343,3313,3286,3251,3226,3202,3172,3150,3129},{0,6718,4162,3077,2606,3391,3312,3244,3184,3120,3080,3045,3005,2975,2949,2920,2900,2882,2858,2846,2836,2823,2814,2806,2797,2785,2776,2768},{0,6549,3989,2903,2387,3283,3211,3146,3089,3028,2983,2944,2907,2881,2855,2825,2806,2788,2767,2753,2739,2722,2714,2708,2702,2693,2688,2683},{0,6801,4620,3712,3312,3728,3669,3613,3564,3508,3466},{0,6956,4785,3978,3850},{0,6500,4048,3163,2763,3429,3362,3306,3264,3217,3194,3175,3147,3129,3110,3085,3068,3052,3030,3013,2997,2978,2964,2949},{0,5660,3660,3058,3598},{0,6757,4616,3856,3814},{0,6380,4114,3361,3064,3669,3614,3565,3520,3468},{0,6366,4244,3495,3731,3670},{0,5272,2982,2235,1902,3039,2997,2966,2957,2948,2949,2947,2935,2930,2924,2909,2902,2892,2878,2869},{0,6648,4088,3050,2550,3511,3475,3440,3405,3363,3332,3303,3268,3240,3216,3186,3163,3141},{0,5986,3819,3116,2843,3598,3552,3510,3468,3420},{0,6718,4614,3696,2602,3389,3312,3247,3198,3145,3106,3070,3032,3009,2987,2962,2951,2939,2922,2912,2900,2885,2874,2863,2852,2838,2828,2817},{0,6648,4106,3041,2577,3372,3297,3231,3182,3131,3090,3057,3019,2991,2968,2944,2930,2917,2898,2887,2878,2863,2852,2843,2833,2820,2810,2801},{0,5909,3665,2914,2602,3435,3407,3378,3349,3312,3284,3259,3226},{0,5926,4040},{0,6423,3858,2746,2150,3041,2940,2851,2775,2696,2635,2581,2524,2480,2438,2394,2360,2327,2291,2263,2234,2204,2180,2158,2141,2123,2110,2098},{0,6535,3968,2878,2301,3228,3155,3094,3041,2983,2939,2899,2855,2821,2793,2764,2745,2726,2701,2686,2671,2652,2640,2630,2620,2605,2596,2592},{0,6535,3970,2883,2321,3251,3181,3119,3063,3004,2958,2918,2874,2846,2823,2794,2772,2753,2732,2715,2702,2686,2674,2661,2654,2644,2642,2638},{0,6634,4088,3046,2602,3381,3303,3234,3177,3125,3087,3050,3014,2987,2965,2936,2920,2908,2892,2883,2873,2859,2849,2839,2829,2816,2806,2797},{0,5224,2986,2270,1923,3050,3022,3006,3010,3001,2999,2992,2978,2970,2961,2944,2934,2924,2908}};

        
        this.locations = new int[this.facility_count];
        for(int i = 0; i < this.locations.length; i++) {
            this.locations[i] = this.incinerator_indexes[this.use_incinerator_indexes[i]];
        }
        
        String location = "/adjM_new.csv";
        URL resource = Cec2015.class.getResource(location);
        File fpt = null;
        try {
            fpt = Paths.get(resource.toURI()).toFile();
        } catch (URISyntaxException ex) {
            Logger.getLogger(SpalovnyCR_2.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        BufferedReader br = null;
	String line = "";
	String cvsSplitBy = ",";
        int rowIt = 0;

	try {

		br = new BufferedReader(new FileReader(fpt));
		while ((line = br.readLine()) != null) {

		        // use comma as separator
			String[] row = line.split(cvsSplitBy);
                        
                        for(int columnIt = 0; columnIt < row.length; columnIt++) {
                            this.adjM[rowIt][columnIt] = Double.parseDouble(row[columnIt]);
                        }
                        rowIt++;

		}

	} catch (FileNotFoundException e) {
            Logger.getLogger(Spalovny_iterative.class.getName()).log(Level.SEVERE, null, e);
	} catch (IOException e) {
            Logger.getLogger(Spalovny_iterative.class.getName()).log(Level.SEVERE, null, e);
	} finally {
		if (br != null) {
			try {
				br.close();
			} catch (IOException e) {
                            Logger.getLogger(SpalovnyCR_2.class.getName()).log(Level.SEVERE, null, e);
			}
		}
	}
        
    }

    @Override
    public String name() {
        return "Projekt_Spaloven_CR";
    }
    
    public static int[] RandomizeArray(int[] array){
        Random rgen = new UniformRandom();  // Random number generator			

        for (int i=0; i<array.length; i++) {
            int randomPosition = rgen.nextInt(array.length);
            int temp = array[i];
            array[i] = array[randomPosition];
            array[randomPosition] = temp;
        }

        return array;
    }
    
    /**
     * Sorting in descending order based on the production.
     * @return 
     */
    public int[] sortProducents() {
        
        int[] sorted_indexes = new int[this.use_producent_indexes.length];
        double maxBound = Double.MAX_VALUE, maxActual;
        int ind = -1;
        
        for(int i = 0; i < sorted_indexes.length; i++) {
            
            maxActual = 0;
            for(int j = 0; j < sorted_indexes.length; j++) {
                if(this.garbage_production[this.use_producent_indexes[j]] >= maxActual && this.garbage_production[this.use_producent_indexes[j]] < maxBound) {
                    ind = j;
                    maxActual = this.garbage_production[this.use_producent_indexes[j]];
                }
            }
            sorted_indexes[i] = ind;
            maxBound = maxActual;
            
        }
        
        return sorted_indexes;
        
    }
    
    /**
     * Method evaluates the quality of a solution
     * 
     * @param vector
     * @return 
     */
    @Override
    public double fitness(double[] vector) {
    
        double fit;
        
        int[] prod_indexes = this.sortProducents();
        
        fit = this.fitnessSingle(prod_indexes);
        
        return fit;
    }

    
    public Map<String, List> getBest_map() {
        return best_map;
    }
    
    /**
     * Method evaluates the quality of a solution
     * 
     * @param prod_indexes
     * @return 
     */
    public double fitnessSingle(int[] prod_indexes) {
        
        /**
         * Map creation
         */
        Map<String, List> map = new HashMap<>();
        List<Integer> facility_list = new ArrayList<>();
        List<Double> separate_costs = new ArrayList<>();
        
        double fitness = 0;
        
        //Locations of facilities
        List<List<Integer>> facility_nodes = new ArrayList<>();
        boolean[] facility_existence = new boolean[this.facility_count];
        for(int i = 0; i < this.facility_count; i++) {
            
            facility_nodes.add(new ArrayList<>());
            facility_list.add(this.locations[i]);
            facility_existence[i] = true;
            
        }
        
        map.put("facilities", facility_list);
        List<Double> facility_capacities = new ArrayList<>();

        indexes = prod_indexes;
        
        //Garbage sum in all nodes to be 0
        int facility_index;
        double dist, dist_min, cost_min, transport_cost = 0, incineration_cost = 0, single_transport_cost = 0, cost = 0;
        double[] garbage_sum = new double[this.facility_count];
        for(int i = 0; i < this.facility_count; i++) {
            garbage_sum[i] = 0;
        }
        
        double garb, capac;
        
        //Allocation of producents to the nearest option
        for(int i = 0; i < this.use_producent_indexes.length; i++) {
            
            cost_min = -1;
            dist_min = -1;
            facility_index = -1;
            
            //Go through all facilities
            for(int j = 0; j < this.facility_count; j++) {

                dist = adjM[this.locations[j]][this.use_producent_indexes[indexes[i]]];
                
                garb = (garbage_sum[j] + garbage_production[this.use_producent_indexes[indexes[i]]]);
                capac = this.possible_capacities[this.use_incinerator_indexes[j]][this.possible_capacities[this.use_incinerator_indexes[j]].length-1];
                
                //Incineration cost calculation
                if(garb <= capac) {
                    
                    //Closest facility
                    if(dist_min == -1 || dist < dist_min) {
                        facility_index = j;
                        dist_min = dist;
                    }
                   
                }

            }
            
            if(facility_index == -1)
                return Math.pow(10, 30);
            
            facility_nodes.get(facility_index).add(this.use_producent_indexes[indexes[i]]);           
            transport_cost += (path_penalty * dist_min * garbage_production[this.use_producent_indexes[indexes[i]]]);
            garbage_sum[facility_index] += garbage_production[this.use_producent_indexes[indexes[i]]];

        }
        fitness = transport_cost;

        //Final fitness computation
        double capacities[] = new double[this.facility_count];
        double costs[] = new double[this.facility_count];
        double capacity_sum = 0, overused, capacity_cost=0;
        double a,b,c,x,y,z;
        
        for(int i = 0; i < this.facility_count; i++){

            for(int j = 0; j < this.possible_capacities[this.use_incinerator_indexes[i]].length; j++) {
                
                capacities[i] = this.possible_capacities[this.use_incinerator_indexes[i]][j];
                costs[i] = this.possible_prices[this.use_incinerator_indexes[i]][j];
                
                if(this.possible_capacities[this.use_incinerator_indexes[i]][j] >= garbage_sum[i]) {

                    a = this.penalization_koeficients[this.use_incinerator_indexes[i]][0];
                    b = this.penalization_koeficients[this.use_incinerator_indexes[i]][1];
                    c = this.penalization_koeficients[this.use_incinerator_indexes[i]][2];
                    x = capacities[i]; 
                    if(x != 0) {
                        x = x/1000.0;
                        y = (x - garbage_sum[i]/1000.0)/x;
                        z = 1.0/(a + (b/x) + (c/y));

                        fitness += z;     //parameter based penalty
                    } 

                    break;
                }
                else
                {
                    if(j == this.possible_capacities[this.use_incinerator_indexes[i]].length-1) {
                        overused = (garbage_sum[i] - (this.possible_capacities[this.use_incinerator_indexes[i]][j]))*overused_penalty;
                        fitness += overused;
                    }
                }
                
            }

            capacity_sum += capacities[i];
            capacity_cost += costs[i];
        }
        fitness += capacity_cost;
        
        /**
         * While there is a chance to improve -> improve
         */
        boolean improved = true;
        
        
        
        while(improved) {
        
            double newFitness = -1, bestFitness = fitness;
            double newTransport_cost = -1, bestTransport_cost = transport_cost;
            //Creating a copy
            List<List<Integer>> newFacility_nodes = null;
            List<List<Integer>> bestFacility_nodes = null;
            List<Integer> reasign;
            double[] newGarbage_sum = null;
            double[] bestGarbage_sum = garbage_sum.clone();
            boolean[] newFacilityExistence, bestFacilityExistence = facility_existence.clone();
            double bestCapacities[] = capacities.clone();
            
            improved = false;

            //Removes one facility at a time and computes a newFitness
            for(int i = 0; i < this.facility_count; i++) {

                newFacilityExistence = facility_existence.clone();

                //Not one of the existing facilities
                if(this.possible_capacities[this.use_incinerator_indexes[i]][0] == 0 && facility_existence[i]) {

                    /**
                     * TODO - find problem THERE
                     */
                    
                    newFacilityExistence[i] = false; 

                    newFacility_nodes = new ArrayList<>();
                    for(int f = 0; f < facility_nodes.size(); f++) {
                        newFacility_nodes.add(new ArrayList(facility_nodes.get(f)));
                    }
                    
                    newGarbage_sum = garbage_sum.clone();
                    
                    reasign = newFacility_nodes.get(i);
                    newFacility_nodes.set(i, new ArrayList<>());
                    newFitness = transport_cost;
                    newTransport_cost = transport_cost;

                    //Reasignment
                    for(Integer p : reasign) {
                        //Update of transportation cost
                        dist = adjM[this.locations[i]][p];
                        newTransport_cost -= (path_penalty * dist * garbage_production[p]);
                        newFitness -= (path_penalty * dist * garbage_production[p]);
                        newGarbage_sum[i] -= garbage_production[p];

                        //New allocation
                        dist_min = -1;
                        facility_index = -1;

                        //Go through all facilities
                        for(int j = 0; j < this.facility_count; j++) {

                            if(!facility_existence[j] || j == i)
                                continue;

                            dist = adjM[this.locations[j]][p];

                            garb = (newGarbage_sum[j] + garbage_production[p]);
                            capac = this.possible_capacities[this.use_incinerator_indexes[j]][this.possible_capacities[this.use_incinerator_indexes[j]].length-1];

                            //Incineration cost calculation
                            if(garb <= capac) {

                                //Closest facility
                                if(dist_min == -1 || dist < dist_min) {
                                    facility_index = j;
                                    dist_min = dist;
                                }

                            }

                        }

                        if(facility_index == -1) {
                            newFitness = Math.pow(10, 30);
                            break;
                        }

                        newFacility_nodes.get(facility_index).add(p);   
                        newTransport_cost += (path_penalty * dist_min * garbage_production[p]);
                        newFitness += (path_penalty * dist_min * garbage_production[p]);
                        newGarbage_sum[facility_index] += garbage_production[p];

                    }
                    
                    /**
                     * TODO - End of problematic area
                     */

                    //All is reasigned

                    double newCapacities[] = new double[this.facility_count];
                    double newCosts[] = new double[this.facility_count];
                    capacity_sum = 0;
                    capacity_cost = 0;

                    for(int k = 0; k < this.facility_count; k++){

                        if(newGarbage_sum[k] < 0.001) {
                            newGarbage_sum[k] = 0;
                            continue;
                        }
                        
                        for(int j = 0; j < this.possible_capacities[this.use_incinerator_indexes[k]].length; j++) {

                            newCapacities[k] = this.possible_capacities[this.use_incinerator_indexes[k]][j];
                            newCosts[k] = this.possible_prices[this.use_incinerator_indexes[k]][j];

                            if(this.possible_capacities[this.use_incinerator_indexes[k]][j] >= newGarbage_sum[k]) {

                                a = this.penalization_koeficients[this.use_incinerator_indexes[k]][0];
                                b = this.penalization_koeficients[this.use_incinerator_indexes[k]][1];
                                c = this.penalization_koeficients[this.use_incinerator_indexes[k]][2];
                                x = newCapacities[k]; 
                                if(x != 0) {
                                    x = x/1000.0;
                                    y = (x - newGarbage_sum[k]/1000.0)/x;
                                    z = 1.0/(a + (b/x) + (c/y));

                                    newFitness += z;     //parameter based penalty
                                } 

                                break;
                            }
                            else
                            {
                                if(j == this.possible_capacities[this.use_incinerator_indexes[k]].length-1) {
                                    overused = (newGarbage_sum[k] - (this.possible_capacities[this.use_incinerator_indexes[k]][j]))*overused_penalty;
                                    newFitness += overused;
                                }
                            }

                        }

                        capacity_sum += newCapacities[k];
                        capacity_cost += newCosts[k];
                    }
                    newFitness += capacity_cost;

                    if(newFitness <= bestFitness) {
                        //
                        bestFitness = newFitness;
                        bestFacilityExistence = newFacilityExistence.clone();
                        bestGarbage_sum = newGarbage_sum.clone();
                        bestFacility_nodes = new ArrayList<>();
                        for(int f = 0; f < newFacility_nodes.size(); f++) {
                            bestFacility_nodes.add(new ArrayList(newFacility_nodes.get(f)));
                        }
                        bestCapacities = newCapacities.clone();
                        improved = true;
                        bestTransport_cost = newTransport_cost;

                    }

                }

            }

            if(improved) {
                //Best option is given as a result
                fitness = bestFitness;
                facility_existence = bestFacilityExistence.clone();
                garbage_sum = bestGarbage_sum.clone();
                facility_nodes = new ArrayList<>();
                for(int i = 0; i < bestFacility_nodes.size(); i++) {
                    facility_nodes.add(new ArrayList(bestFacility_nodes.get(i)));
                }
                capacities = bestCapacities.clone();
                transport_cost = bestTransport_cost;
            }
        }
        
        for(int i = 0; i < facility_nodes.size(); i++) {
            map.put("facility[[" + (i+1) + "]]", facility_nodes.get(i));
            facility_capacities.add(garbage_sum[i]);
        }

        map.put("usedCapacities", facility_capacities);
        
        facility_capacities = new ArrayList<>();
        
        for(int i = 0; i < this.facility_count; i++) {
            facility_capacities.add(capacities[i]);
        }
        
        map.put("capacities", facility_capacities);
        
        List<List<Integer>> paths;
        List pp;       
        for(int i = 0; i < this.facility_count; i++) {
            
            paths = new ArrayList<>();

            for(Integer node_index : facility_nodes.get(i)) {
                pp = new ArrayList<>();
                if(this.locations[i] != node_index) {
                    pp.add(this.locations[i]);
                    pp.add(node_index);
                }
                else {
                    pp.add(node_index);
                }
                paths.add(pp);
            }
            
            map.put("span[[" + (i+1) + "]]", paths);
            
        }

        separate_costs.add(transport_cost/25.3294);
        separate_costs.add((fitness - transport_cost)/25.3294);
        separate_costs.add(fitness/25.3294);

        map.put("Transport/Capacity/All", separate_costs);
        
        this.best_map = map;
        
        return fitness/25.3294;
    }
    
    /**
     * Method returns the String output for Mathematica
     * 
     * @param vector
     * @return 
     */
    public Map<String, List> getOutput() {
        
        Map<String, List> map = new HashMap<>();
        List<Integer> facility_list = new ArrayList<>();
        List<Double> separate_costs = new ArrayList<>();
        
        double fitness = 0;
        int[] facility_existence = new int[this.facility_count];
        
        //Locations of facilities
        List<List<Integer>> facility_nodes = new ArrayList<>();
        for(int i = 0; i < this.facility_count; i++) {
            
            facility_nodes.add(new ArrayList<>());
            facility_list.add(this.locations[i]);
            facility_existence[i] = 1;
            
        }
        
        map.put("facilities", facility_list);
        
        //Where to go from production nodes
        List<Double> facility_capacities = new ArrayList<>();

        //Garbage sum in all nodes to be 0
        int facility_index;
        double dist, dist_min, cost_min, transport_cost = 0, incineration_cost = 0, single_transport_cost = 0, cost = 0;
        double[] garbage_sum = new double[this.facility_count];
        for(int i = 0; i < this.facility_count; i++) {
            garbage_sum[i] = 0;
        }
        
        //Capacities of facilities
        double capacities[] = new double[this.facility_count];
        double costs[] = new double[this.facility_count];
        double capacity_sum = 0, overused, capacity_cost=0;
        double a,b,c,x,y,z;
        double garb, capac;
        
        //Allocation of producents to the cheapest option
        for(int i = 0; i < this.use_producent_indexes.length; i++) {
            
            cost_min = -1;
            dist_min = -1;
            facility_index = -1;
            
            //Go through all facilities
            for(int j = 0; j < this.facility_count; j++) {

                dist = adjM[this.locations[j]][this.use_producent_indexes[bestIndexes[i]]];
                
                garb = (garbage_sum[j] + garbage_production[this.use_producent_indexes[bestIndexes[i]]]);
                capac = this.possible_capacities[this.use_incinerator_indexes[j]][this.possible_capacities[this.use_incinerator_indexes[j]].length-1];
                
                //Incineration cost calculation
                if(garb <= capac) {
                    
                    //TODO
                    incineration_cost = 0;
                    
                    for(int cap = 0; cap < this.possible_capacities[this.use_incinerator_indexes[j]].length; cap++) {

                        capac = this.possible_capacities[this.use_incinerator_indexes[j]][cap];
                        
                        if(capac >= garb) {

                            capacities[j] = capac;
                            costs[j] = this.possible_prices[this.use_incinerator_indexes[j]][cap];

                            a = this.penalization_koeficients[this.use_incinerator_indexes[j]][0];
                            b = this.penalization_koeficients[this.use_incinerator_indexes[j]][1];
                            c = this.penalization_koeficients[this.use_incinerator_indexes[j]][2];
                            x = capacities[j];
                            
                            if(x != 0) {
                                x = x/1000.0;
                                y = (x - garb/1000.0)/x;
                                z = 1.0/(a + (b/x) + (c/y));

                                incineration_cost = z;
                            } 

                            break;
                        }
                    }
                   
                }
                else {
                    continue;
                }
                
                //Transport cost
                single_transport_cost = (path_penalty * dist * garbage_production[this.use_producent_indexes[bestIndexes[i]]]);
                
                //Cost calculation
                cost = single_transport_cost + incineration_cost;

                if(cost_min == -1 || cost < cost_min) {
                    facility_index = j;
                    cost_min = cost;
                    dist_min = dist;
                }

            }
            
            if(facility_index == -1)
                return null;
            
            facility_nodes.get(facility_index).add(this.use_producent_indexes[bestIndexes[i]]);
            
            transport_cost += (path_penalty * dist_min * garbage_production[this.use_producent_indexes[bestIndexes[i]]]);

            garbage_sum[facility_index] += garbage_production[this.use_producent_indexes[bestIndexes[i]]];

        }
        
        fitness = transport_cost;
        
        for(int i = 0; i < facility_nodes.size(); i++) {
            map.put("facility[[" + (i+1) + "]]", facility_nodes.get(i));
            facility_capacities.add(garbage_sum[i]);
        }

        map.put("usedCapacities", facility_capacities);
        
        //Capacities of facilities
        facility_capacities = new ArrayList<>();
        
        capacities = new double[this.facility_count];
        costs = new double[this.facility_count];
        capacity_sum = 0;
        capacity_cost=0;
        int current, previous;
        
        for(int i = 0; i < this.facility_count; i++){

            for(int j = 0; j < this.possible_capacities[this.use_incinerator_indexes[i]].length; j++) {
                
                current = j;
                previous = j-1;
                
                if(this.possible_capacities[this.use_incinerator_indexes[i]][current] >= garbage_sum[i]) {

                    capacities[i] = this.possible_capacities[this.use_incinerator_indexes[i]][current];
                    costs[i] = this.possible_prices[this.use_incinerator_indexes[i]][current];
                    
                    //first capacity is enough
                    if(current == 0) {
                        a = this.penalization_koeficients[this.use_incinerator_indexes[i]][0];
                        b = this.penalization_koeficients[this.use_incinerator_indexes[i]][1];
                        c = this.penalization_koeficients[this.use_incinerator_indexes[i]][2];
                        x = capacities[i]; 
                        if(x != 0) {
                            x = x/1000.0;
                            y = (x - garbage_sum[i]/1000.0)/x;
                            z = 1.0/(a + (b/x) + (c/y));

                            fitness += z;     //parameter based penalty
                        } 
                        
                    }
                    //compare previous capacity with overused penalty and current capacity with unused penalty
                    else {
                        
                        a = this.penalization_koeficients[this.use_incinerator_indexes[i]][0];
                        b = this.penalization_koeficients[this.use_incinerator_indexes[i]][1];
                        c = this.penalization_koeficients[this.use_incinerator_indexes[i]][2];
                        x = capacities[i]; 
                        z = 0;
                        if(x != 0) {
                            x = x/1000.0;
                            y = (x - garbage_sum[i]/1000.0)/x;
                            z = 1.0/(a + (b/x) + (c/y));
                        }
                        
                        overused = (garbage_sum[i] - (this.possible_capacities[this.use_incinerator_indexes[i]][previous]))*overused_penalty;
                        
                        if(z < overused) {
                            fitness += z;     //parameter based penalty
                        }
                        else {
                            capacities[i] = this.possible_capacities[this.use_incinerator_indexes[i]][previous];
                            costs[i] = this.possible_prices[this.use_incinerator_indexes[i]][previous];
                            fitness += overused;
                        }
                        
                    }
                    
                    break;
                }
                else
                {
                    if(j == this.possible_capacities[this.use_incinerator_indexes[i]].length-1) {
                        overused = (garbage_sum[i] - (this.possible_capacities[this.use_incinerator_indexes[i]][j]))*overused_penalty;
                        capacities[i] = this.possible_capacities[this.use_incinerator_indexes[i]][j];
                        costs[i] = this.possible_prices[this.use_incinerator_indexes[i]][j];
                        fitness += overused;
                    }
                }
                
            }

            capacity_sum += capacities[i];
            capacity_cost += costs[i];
            fitness += costs[i];
            
            facility_capacities.add(capacities[i]);
        }

        map.put("capacities", facility_capacities);
        
        List<List<Integer>> paths;
        List pp;       
        for(int i = 0; i < facility_count; i++) {
            
            paths = new ArrayList<>();

            for(Integer node_index : facility_nodes.get(i)) {
                pp = new ArrayList<>();
                if(this.locations[i] != node_index) {
                    pp.add(this.locations[i]);
                    pp.add(node_index);
                }
                else {
                    pp.add(node_index);
                }
                paths.add(pp);
            }
            
            map.put("span[[" + (i+1) + "]]", paths);
            
        }

        separate_costs.add(transport_cost/25.3294);
        separate_costs.add(capacity_cost/25.3294);
        separate_costs.add(fitness/25.3294);

        map.put("Transport/Capacity/All", separate_costs);
        
        return map;
    }  
 
    @Override
    public double fitness(Individual individual) {
        return fitness(individual.vector);
    }

    @Override
    public void constrain(Individual individual) {
        IndividualUtil.randIfOutOfBounds(individual, 0, 1);
    }

    @Override
    public double[] generateTrial(int dim) {
        double[] vector = new double[dim];
        Random rnd = new UniformRandom();
//        for (int i = 0; i < 39; i++) vector[i] = rnd.nextDouble(0.9, 0.95);
        for (int i = 0; i < dim; i++) vector[i] = rnd.nextDouble(0, 1);
        return vector;
    }

    @Override
    public double fixedAccLevel() {
        return 10^-7;
    }

    @Override
    public double optimum() {
        return 0;
    }

    @Override
    public double max(int dim) {
        return 1;
    }

    @Override
    public double min(int dim) {
        return 0;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {

        double[] vector;
        Spalovny_iterative sp;

        int[] use_prod = new int[]{93,94,95,96,97,98,99,100,101,102,103,104,105};
        int[] use_inc = new int[]{7,8,21};

        vector = new double[use_prod.length];
        for(int i = 0; i < vector.length; i++) {
            vector[i] = new UniformRandom().nextDouble();
        }
                    
        sp = new Spalovny_iterative(use_inc, use_prod);
        System.out.println(sp.fitness(vector));
                    
        use_prod = new int[]{193,194,195,196,197,198,199,200,201,202,203,204,205};
        use_inc = new int[]{16,17,20,28,29,33};

        vector = new double[use_prod.length];
        for(int i = 0; i < vector.length; i++) {
            vector[i] = new UniformRandom().nextDouble();
        }
                    
        sp = new Spalovny_iterative(use_inc, use_prod);
        System.out.println(sp.fitness(vector));
        
        use_prod = new int[]{18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,193,194,195,196,197,198,199,200,201,202,203,204,205};
        use_inc = new int[]{1,6,34,16,17,20,28,29,33};

        vector = new double[use_prod.length];
        for(int i = 0; i < vector.length; i++) {
            vector[i] = new UniformRandom().nextDouble();
        }
                    
        sp = new Spalovny_iterative(use_inc, use_prod);
        System.out.println(sp.fitness(vector));
        
        

        use_prod = new int[]{93,94,95,96,97,98,99,100,101,102,103,104,105,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,193,194,195,196,197,198,199,200,201,202,203,204,205};
        use_inc = new int[]{7,8,21,1,6,34,16,17,20,28,29,33};

        vector = new double[use_prod.length];
        for(int i = 0; i < vector.length; i++) {
            vector[i] = new UniformRandom().nextDouble();
        }
                    
        sp = new Spalovny_iterative(use_inc, use_prod);
        System.out.println(sp.fitness(vector));
        
        

        use_prod = new int[]{71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,193,194,195,196,197,198,199,200,201,202,203,204,205};
        use_inc = new int[]{27,32,35,36,37,38,39,7,8,21,1,6,34,16,17,20,28,29,33};

        vector = new double[use_prod.length];
        for(int i = 0; i < vector.length; i++) {
            vector[i] = new UniformRandom().nextDouble();
        }
                    
        sp = new Spalovny_iterative(use_inc, use_prod);
        System.out.println(sp.fitness(vector));
        
        

        use_prod = new int[]{106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,193,194,195,196,197,198,199,200,201,202,203,204,205};
        use_inc = new int[]{10,27,32,35,36,37,38,39,7,8,21,1,6,34,16,17,20,28,29,33};

        vector = new double[use_prod.length];
        for(int i = 0; i < vector.length; i++) {
            vector[i] = new UniformRandom().nextDouble();
        }
                    
        sp = new Spalovny_iterative(use_inc, use_prod);
        System.out.println(sp.fitness(vector));
        
        

        use_prod = new int[]{178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,193,194,195,196,197,198,199,200,201,202,203,204,205};
        use_inc = new int[]{12,23,25,10,27,32,35,36,37,38,39,7,8,21,1,6,34,16,17,20,28,29,33};

        vector = new double[use_prod.length];
        for(int i = 0; i < vector.length; i++) {
            vector[i] = new UniformRandom().nextDouble();
        }
                    
        sp = new Spalovny_iterative(use_inc, use_prod);
        System.out.println(sp.fitness(vector));
        
        

        use_prod = new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,193,194,195,196,197,198,199,200,201,202,203,204,205};
        use_inc = new int[]{9,19,12,23,25,10,27,32,35,36,37,38,39,7,8,21,1,6,34,16,17,20,28,29,33};

        vector = new double[use_prod.length];
        for(int i = 0; i < vector.length; i++) {
            vector[i] = new UniformRandom().nextDouble();
        }
                    
        sp = new Spalovny_iterative(use_inc, use_prod);
        System.out.println(sp.fitness(vector));
        
        

        use_prod = new int[]{46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,193,194,195,196,197,198,199,200,201,202,203,204,205};
        use_inc = new int[]{14,18,9,19,12,23,25,10,27,32,35,36,37,38,39,7,8,21,1,6,34,16,17,20,28,29,33};

        vector = new double[use_prod.length];
        for(int i = 0; i < vector.length; i++) {
            vector[i] = new UniformRandom().nextDouble();
        }
                    
        sp = new Spalovny_iterative(use_inc, use_prod);
        System.out.println(sp.fitness(vector));
        
        

        use_prod = new int[]{136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,193,194,195,196,197,198,199,200,201,202,203,204,205};
        use_inc = new int[]{4,5,31,14,18,9,19,12,23,25,10,27,32,35,36,37,38,39,7,8,21,1,6,34,16,17,20,28,29,33};

        vector = new double[use_prod.length];
        for(int i = 0; i < vector.length; i++) {
            vector[i] = new UniformRandom().nextDouble();
        }
                    
        sp = new Spalovny_iterative(use_inc, use_prod);
        System.out.println(sp.fitness(vector));
        
        
  
        use_prod = new int[]{0,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,193,194,195,196,197,198,199,200,201,202,203,204,205};
        use_inc = new int[]{0,4,5,31,14,18,9,19,12,23,25,10,27,32,35,36,37,38,39,7,8,21,1,6,34,16,17,20,28,29,33};

        vector = new double[use_prod.length];
        for(int i = 0; i < vector.length; i++) {
            vector[i] = new UniformRandom().nextDouble();
        }
                    
        sp = new Spalovny_iterative(use_inc, use_prod);
        System.out.println(sp.fitness(vector));
        
        

        use_prod = new int[]{178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,39,40,41,42,43,44,45,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,0};
        use_inc = new int[]{12,23,25,10,14,18,2,11,13,26,15,22,24,4,5,31,9,19,3,30,0};

        vector = new double[use_prod.length];
        for(int i = 0; i < vector.length; i++) {
            vector[i] = new UniformRandom().nextDouble();
        }
                    
        sp = new Spalovny_iterative(use_inc, use_prod);
        System.out.println(sp.fitness(vector));
        
        

        use_prod = new int[]{0,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,193,194,195,196,197,198,199,200,201,202,203,204,205,61,62,63,64,65,66,67,68,69,70};
        use_inc = new int[]{0,4,5,31,14,18,9,19,12,23,25,10,27,32,35,36,37,38,39,7,8,21,1,6,34,16,17,20,28,29,33,2};

        vector = new double[use_prod.length];
        for(int i = 0; i < vector.length; i++) {
            vector[i] = new UniformRandom().nextDouble();
        }
                    
        sp = new Spalovny_iterative(use_inc, use_prod);
        System.out.println(sp.fitness(vector));
        
        

        use_prod = new int[]{0,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,193,194,195,196,197,198,199,200,201,202,203,204,205,61,62,63,64,65,66,67,68,69,70,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135};
        use_inc = new int[]{0,4,5,31,14,18,9,19,12,23,25,10,27,32,35,36,37,38,39,7,8,21,1,6,34,16,17,20,28,29,33,2,3,30};

        vector = new double[use_prod.length];
        for(int i = 0; i < vector.length; i++) {
            vector[i] = new UniformRandom().nextDouble();
        }
                    
        sp = new Spalovny_iterative(use_inc, use_prod);
        System.out.println(sp.fitness(vector));
        
        

        use_prod = new int[]{0,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,193,194,195,196,197,198,199,200,201,202,203,204,205,61,62,63,64,65,66,67,68,69,70,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177};
        use_inc = new int[]{0,4,5,31,14,18,9,19,12,23,25,10,27,32,35,36,37,38,39,7,8,21,1,6,34,16,17,20,28,29,33,2,3,30,11,13,26};

        vector = new double[use_prod.length];
        for(int i = 0; i < vector.length; i++) {
            vector[i] = new UniformRandom().nextDouble();
        }
                    
        sp = new Spalovny_iterative(use_inc, use_prod);
        System.out.println(sp.fitness(vector));
        
        
                    
//        vector = new double[use_prod.length];
//        for(int i = 0; i < vector.length; i++) {
//            vector[i] = new UniformRandom().nextDouble();
//        }
//
//        /**
//         * Pro subset
//         */
//        Spalovny_iterative sp = new Spalovny_iterative(use_inc, use_prod);
//        Spalovny_iterative sp = new Spalovny_iterative();
        
//        for(int i = 0; i < 1; i++) {
//            sp = new Spalovny_iterative(use_inc, use_prod);
////            sp = new Spalovny_iterative();
//            System.out.println(sp.fitness(vector));
//        
//            Map<String, List> map = sp.getBest_map();
//
//            System.out.println("=================================");
//            String line;
//
//            if(map == null) {
//                continue;
//            }
//
//            if(map != null){
//                for(Map.Entry<String,List> entry : map.entrySet()){
//                    line = "";
//                    System.out.print(entry.getKey() + " = ");
//                    line += "{";
//                    for(int pup = 0; pup < entry.getValue().size(); pup++){
//                        line += entry.getValue().get(pup);
//                        if(pup != entry.getValue().size()-1){
//                           line += ",";
//                        }
//                    }
//                    line += "};";
//                    line = line.replace("[", "{");
//                    line = line.replace("]", "}");
//                    System.out.println(line);
//
//                }
//            }
//
//            System.out.println("=================================");
//
//        }
    }

    @Override
    public double[] optimumPosition() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
}
